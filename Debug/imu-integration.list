
imu-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009a24  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000564  08009b38  08009b38  00019b38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a09c  0800a09c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800a09c  0800a09c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a09c  0800a09c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a09c  0800a09c  0001a09c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a0a0  0800a0a0  0001a0a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a0a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  200001e0  0800a284  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  0800a284  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d2c  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036f9  00000000  00000000  00039f35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0003d630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0003ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad33  00000000  00000000  00040270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ee7  00000000  00000000  0005afa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098094  00000000  00000000  00073e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bf1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000070d8  00000000  00000000  0010bf70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009b1c 	.word	0x08009b1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009b1c 	.word	0x08009b1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr

08000d44 <__aeabi_f2iz>:
 8000d44:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000d48:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000d4c:	d30f      	bcc.n	8000d6e <__aeabi_f2iz+0x2a>
 8000d4e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000d52:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000d56:	d90d      	bls.n	8000d74 <__aeabi_f2iz+0x30>
 8000d58:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000d5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d60:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000d64:	fa23 f002 	lsr.w	r0, r3, r2
 8000d68:	bf18      	it	ne
 8000d6a:	4240      	negne	r0, r0
 8000d6c:	4770      	bx	lr
 8000d6e:	f04f 0000 	mov.w	r0, #0
 8000d72:	4770      	bx	lr
 8000d74:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000d78:	d101      	bne.n	8000d7e <__aeabi_f2iz+0x3a>
 8000d7a:	0242      	lsls	r2, r0, #9
 8000d7c:	d105      	bne.n	8000d8a <__aeabi_f2iz+0x46>
 8000d7e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	bf08      	it	eq
 8000d84:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f04f 0000 	mov.w	r0, #0
 8000d8e:	4770      	bx	lr

08000d90 <transmitData>:


#define UART_TIMEOUT 1000

void transmitData(uint8_t* data, uint16_t size)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
 8000d98:	460b      	mov	r3, r1
 8000d9a:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&huart2, data, size, UART_TIMEOUT);
 8000d9c:	887a      	ldrh	r2, [r7, #2]
 8000d9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	4805      	ldr	r0, [pc, #20]	; (8000dbc <transmitData+0x2c>)
 8000da6:	f003 f82e 	bl	8003e06 <HAL_UART_Transmit>
	HAL_Delay(1000);
 8000daa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000dae:	f000 fe6d 	bl	8001a8c <HAL_Delay>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200002ac 	.word	0x200002ac

08000dc0 <gyro>:

float gyro(enum GyroType type)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b088      	sub	sp, #32
 8000dc4:	af04      	add	r7, sp, #16
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	71fb      	strb	r3, [r7, #7]

	int16_t gyro;
	uint8_t OUT_H_G, OUT_L_G;

	// goes sequential
	uint16_t addL = 0x22 + (type * 2);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	3311      	adds	r3, #17
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x23 + (type * 2);
 8000dd4:	79fb      	ldrb	r3, [r7, #7]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	3323      	adds	r3, #35	; 0x23
 8000dde:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8000de0:	89fa      	ldrh	r2, [r7, #14]
 8000de2:	2364      	movs	r3, #100	; 0x64
 8000de4:	9302      	str	r3, [sp, #8]
 8000de6:	2301      	movs	r3, #1
 8000de8:	9301      	str	r3, [sp, #4]
 8000dea:	f107 0308 	add.w	r3, r7, #8
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	2301      	movs	r3, #1
 8000df2:	21d4      	movs	r1, #212	; 0xd4
 8000df4:	4824      	ldr	r0, [pc, #144]	; (8000e88 <gyro+0xc8>)
 8000df6:	f001 fb63 	bl	80024c0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8000dfa:	89ba      	ldrh	r2, [r7, #12]
 8000dfc:	2364      	movs	r3, #100	; 0x64
 8000dfe:	9302      	str	r3, [sp, #8]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9301      	str	r3, [sp, #4]
 8000e04:	f107 0309 	add.w	r3, r7, #9
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	21d4      	movs	r1, #212	; 0xd4
 8000e0e:	481e      	ldr	r0, [pc, #120]	; (8000e88 <gyro+0xc8>)
 8000e10:	f001 fb56 	bl	80024c0 <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	gyro = (OUT_H_G << 8) | (OUT_L_G);
 8000e14:	7a7b      	ldrb	r3, [r7, #9]
 8000e16:	021b      	lsls	r3, r3, #8
 8000e18:	b21a      	sxth	r2, r3
 8000e1a:	7a3b      	ldrb	r3, [r7, #8]
 8000e1c:	b21b      	sxth	r3, r3
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	817b      	strh	r3, [r7, #10]

	gyro = (float) gyro / 8.75; // datasheet pg10
 8000e22:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f7ff ff38 	bl	8000c9c <__aeabi_i2f>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff fafa 	bl	8000428 <__aeabi_f2d>
 8000e34:	f04f 0200 	mov.w	r2, #0
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <gyro+0xcc>)
 8000e3a:	f7ff fc77 	bl	800072c <__aeabi_ddiv>
 8000e3e:	4602      	mov	r2, r0
 8000e40:	460b      	mov	r3, r1
 8000e42:	4610      	mov	r0, r2
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff fdf7 	bl	8000a38 <__aeabi_d2iz>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	817b      	strh	r3, [r7, #10]

	return (float) gyro * 0.02;
 8000e4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff22 	bl	8000c9c <__aeabi_i2f>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f7ff fae4 	bl	8000428 <__aeabi_f2d>
 8000e60:	a307      	add	r3, pc, #28	; (adr r3, 8000e80 <gyro+0xc0>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff fb37 	bl	80004d8 <__aeabi_dmul>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	4610      	mov	r0, r2
 8000e70:	4619      	mov	r1, r3
 8000e72:	f7ff fe09 	bl	8000a88 <__aeabi_d2f>
 8000e76:	4603      	mov	r3, r0
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3710      	adds	r7, #16
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	47ae147b 	.word	0x47ae147b
 8000e84:	3f947ae1 	.word	0x3f947ae1
 8000e88:	20000258 	.word	0x20000258
 8000e8c:	40218000 	.word	0x40218000

08000e90 <accel>:

float accel(enum AccelType type)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af04      	add	r7, sp, #16
 8000e96:	4603      	mov	r3, r0
 8000e98:	71fb      	strb	r3, [r7, #7]

	int16_t accel;
	uint8_t OUT_H_A, OUT_L_A;

	// goes sequential
	uint16_t addL = 0x28 + (type * 2);
 8000e9a:	79fb      	ldrb	r3, [r7, #7]
 8000e9c:	3314      	adds	r3, #20
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x29 + (type * 2);
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	b29b      	uxth	r3, r3
 8000ea8:	005b      	lsls	r3, r3, #1
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	3329      	adds	r3, #41	; 0x29
 8000eae:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8000eb0:	89fa      	ldrh	r2, [r7, #14]
 8000eb2:	2364      	movs	r3, #100	; 0x64
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	f107 0308 	add.w	r3, r7, #8
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	21d4      	movs	r1, #212	; 0xd4
 8000ec4:	481e      	ldr	r0, [pc, #120]	; (8000f40 <accel+0xb0>)
 8000ec6:	f001 fafb 	bl	80024c0 <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8000eca:	89ba      	ldrh	r2, [r7, #12]
 8000ecc:	2364      	movs	r3, #100	; 0x64
 8000ece:	9302      	str	r3, [sp, #8]
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	9301      	str	r3, [sp, #4]
 8000ed4:	f107 0309 	add.w	r3, r7, #9
 8000ed8:	9300      	str	r3, [sp, #0]
 8000eda:	2301      	movs	r3, #1
 8000edc:	21d4      	movs	r1, #212	; 0xd4
 8000ede:	4818      	ldr	r0, [pc, #96]	; (8000f40 <accel+0xb0>)
 8000ee0:	f001 faee 	bl	80024c0 <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	accel = (OUT_H_A << 8) | (OUT_L_A);
 8000ee4:	7a7b      	ldrb	r3, [r7, #9]
 8000ee6:	021b      	lsls	r3, r3, #8
 8000ee8:	b21a      	sxth	r2, r3
 8000eea:	7a3b      	ldrb	r3, [r7, #8]
 8000eec:	b21b      	sxth	r3, r3
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	817b      	strh	r3, [r7, #10]

	accel = (float) accel * 0.061; // datasheet pg10
 8000ef2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f7ff fed0 	bl	8000c9c <__aeabi_i2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fa92 	bl	8000428 <__aeabi_f2d>
 8000f04:	a30c      	add	r3, pc, #48	; (adr r3, 8000f38 <accel+0xa8>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f7ff fae5 	bl	80004d8 <__aeabi_dmul>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	460b      	mov	r3, r1
 8000f12:	4610      	mov	r0, r2
 8000f14:	4619      	mov	r1, r3
 8000f16:	f7ff fd8f 	bl	8000a38 <__aeabi_d2iz>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	817b      	strh	r3, [r7, #10]

	return (float) accel;
 8000f1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff feba 	bl	8000c9c <__aeabi_i2f>
 8000f28:	4603      	mov	r3, r0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3710      	adds	r7, #16
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	f3af 8000 	nop.w
 8000f38:	5a1cac08 	.word	0x5a1cac08
 8000f3c:	3faf3b64 	.word	0x3faf3b64
 8000f40:	20000258 	.word	0x20000258

08000f44 <initIMU>:


void
initIMU(void) // set up stuff for gyro/accel modes
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af04      	add	r7, sp, #16
	uint8_t data;

	data = 0x80; // 0b10000000
 8000f4a:	2380      	movs	r3, #128	; 0x80
 8000f4c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 8000f4e:	2364      	movs	r3, #100	; 0x64
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	2301      	movs	r3, #1
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	2210      	movs	r2, #16
 8000f5e:	21d4      	movs	r1, #212	; 0xd4
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <initIMU+0x64>)
 8000f62:	f001 f9b3 	bl	80022cc <HAL_I2C_Mem_Write>

	data = 0x80; // 0b10000000
 8000f66:	2380      	movs	r3, #128	; 0x80
 8000f68:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 8000f6a:	2364      	movs	r3, #100	; 0x64
 8000f6c:	9302      	str	r3, [sp, #8]
 8000f6e:	2301      	movs	r3, #1
 8000f70:	9301      	str	r3, [sp, #4]
 8000f72:	1dfb      	adds	r3, r7, #7
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	2301      	movs	r3, #1
 8000f78:	2211      	movs	r2, #17
 8000f7a:	21d4      	movs	r1, #212	; 0xd4
 8000f7c:	480a      	ldr	r0, [pc, #40]	; (8000fa8 <initIMU+0x64>)
 8000f7e:	f001 f9a5 	bl	80022cc <HAL_I2C_Mem_Write>

	data = 0x04; // 0b00000100
 8000f82:	2304      	movs	r3, #4
 8000f84:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8000f86:	2364      	movs	r3, #100	; 0x64
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2301      	movs	r3, #1
 8000f94:	2212      	movs	r2, #18
 8000f96:	21d4      	movs	r1, #212	; 0xd4
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <initIMU+0x64>)
 8000f9a:	f001 f997 	bl	80022cc <HAL_I2C_Mem_Write>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000258 	.word	0x20000258

08000fac <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000fb4:	1d39      	adds	r1, r7, #4
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4803      	ldr	r0, [pc, #12]	; (8000fcc <__io_putchar+0x20>)
 8000fbe:	f002 ff22 	bl	8003e06 <HAL_UART_Transmit>
  return ch;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	200002ac 	.word	0x200002ac

08000fd0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* Initialize IMU */
  initIMU();
 8000fd4:	f7ff ffb6 	bl	8000f44 <initIMU>

  /* Create Queue */
  imuMessageQueueHandle = osMessageQueueNew(IMU_QUEUE_SIZE, sizeof(IMU_msg_t), &imuMessageQueue_attributes);
 8000fd8:	4a10      	ldr	r2, [pc, #64]	; (800101c <MX_FREERTOS_Init+0x4c>)
 8000fda:	2106      	movs	r1, #6
 8000fdc:	200a      	movs	r0, #10
 8000fde:	f003 f9ed 	bl	80043bc <osMessageQueueNew>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <MX_FREERTOS_Init+0x50>)
 8000fe6:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  blinkledHandle = osThreadNew(StartBlinkLed, NULL, &blinkled_attributes);
 8000fe8:	4a0e      	ldr	r2, [pc, #56]	; (8001024 <MX_FREERTOS_Init+0x54>)
 8000fea:	2100      	movs	r1, #0
 8000fec:	480e      	ldr	r0, [pc, #56]	; (8001028 <MX_FREERTOS_Init+0x58>)
 8000fee:	f003 f8db 	bl	80041a8 <osThreadNew>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	4a0d      	ldr	r2, [pc, #52]	; (800102c <MX_FREERTOS_Init+0x5c>)
 8000ff6:	6013      	str	r3, [r2, #0]
  readimuHandle = osThreadNew(StartReadIMU, NULL, &readimu_attributes);
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	; (8001030 <MX_FREERTOS_Init+0x60>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	480d      	ldr	r0, [pc, #52]	; (8001034 <MX_FREERTOS_Init+0x64>)
 8000ffe:	f003 f8d3 	bl	80041a8 <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a0c      	ldr	r2, [pc, #48]	; (8001038 <MX_FREERTOS_Init+0x68>)
 8001006:	6013      	str	r3, [r2, #0]
  transmitdataHandle = osThreadNew(StartTransmitData, NULL, &transmitdata_attributes);
 8001008:	4a0c      	ldr	r2, [pc, #48]	; (800103c <MX_FREERTOS_Init+0x6c>)
 800100a:	2100      	movs	r1, #0
 800100c:	480c      	ldr	r0, [pc, #48]	; (8001040 <MX_FREERTOS_Init+0x70>)
 800100e:	f003 f8cb 	bl	80041a8 <osThreadNew>
 8001012:	4603      	mov	r3, r0
 8001014:	4a0b      	ldr	r2, [pc, #44]	; (8001044 <MX_FREERTOS_Init+0x74>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08009c94 	.word	0x08009c94
 8001020:	20000208 	.word	0x20000208
 8001024:	08009c28 	.word	0x08009c28
 8001028:	08001049 	.word	0x08001049
 800102c:	200001fc 	.word	0x200001fc
 8001030:	08009c4c 	.word	0x08009c4c
 8001034:	08001069 	.word	0x08001069
 8001038:	20000200 	.word	0x20000200
 800103c:	08009c70 	.word	0x08009c70
 8001040:	080011d5 	.word	0x080011d5
 8001044:	20000204 	.word	0x20000204

08001048 <StartBlinkLed>:
  * @param  argument: Not used
  * @retval None
  */

void StartBlinkLed(void *argument)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001050:	2120      	movs	r1, #32
 8001052:	4804      	ldr	r0, [pc, #16]	; (8001064 <StartBlinkLed+0x1c>)
 8001054:	f000 ffba 	bl	8001fcc <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001058:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800105c:	f003 f980 	bl	8004360 <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001060:	e7f6      	b.n	8001050 <StartBlinkLed+0x8>
 8001062:	bf00      	nop
 8001064:	40010800 	.word	0x40010800

08001068 <StartReadIMU>:
* @param argument: Not used
* @retval None
*/

void StartReadIMU(void *argument)
{
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b088      	sub	sp, #32
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  union FloatBytes gy_x, gy_y, gy_z, ax_x, ax_y, ax_z;
  /* Infinite loop */
  while(1)
  {
    gy_x.float_value = gyro(GYRO_X);
 8001070:	2000      	movs	r0, #0
 8001072:	f7ff fea5 	bl	8000dc0 <gyro>
 8001076:	4603      	mov	r3, r0
 8001078:	61fb      	str	r3, [r7, #28]
    gy_y.float_value = gyro(GYRO_Y);
 800107a:	2001      	movs	r0, #1
 800107c:	f7ff fea0 	bl	8000dc0 <gyro>
 8001080:	4603      	mov	r3, r0
 8001082:	61bb      	str	r3, [r7, #24]
    gy_z.float_value = gyro(GYRO_Z);
 8001084:	2002      	movs	r0, #2
 8001086:	f7ff fe9b 	bl	8000dc0 <gyro>
 800108a:	4603      	mov	r3, r0
 800108c:	617b      	str	r3, [r7, #20]
    ax_x.float_value = accel(ACCEL_X);
 800108e:	2000      	movs	r0, #0
 8001090:	f7ff fefe 	bl	8000e90 <accel>
 8001094:	4603      	mov	r3, r0
 8001096:	613b      	str	r3, [r7, #16]
    ax_y.float_value = accel(ACCEL_Y);
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff fef9 	bl	8000e90 <accel>
 800109e:	4603      	mov	r3, r0
 80010a0:	60fb      	str	r3, [r7, #12]
    ax_z.float_value = accel(ACCEL_Z);
 80010a2:	2002      	movs	r0, #2
 80010a4:	f7ff fef4 	bl	8000e90 <accel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	60bb      	str	r3, [r7, #8]


    printf("\e[1;1H\e[38;2;252;186;3mGYRO\e[0m | X : %i | Y : %i | Z : %i \n\r", (int)gy_x.float_value, (int)gy_y.float_value, (int)gy_z.float_value);
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fe48 	bl	8000d44 <__aeabi_f2iz>
 80010b4:	4604      	mov	r4, r0
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fe43 	bl	8000d44 <__aeabi_f2iz>
 80010be:	4605      	mov	r5, r0
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	4618      	mov	r0, r3
 80010c4:	f7ff fe3e 	bl	8000d44 <__aeabi_f2iz>
 80010c8:	4603      	mov	r3, r0
 80010ca:	462a      	mov	r2, r5
 80010cc:	4621      	mov	r1, r4
 80010ce:	4823      	ldr	r0, [pc, #140]	; (800115c <StartReadIMU+0xf4>)
 80010d0:	f006 fd92 	bl	8007bf8 <iprintf>
    printf("\e[1;1H\e[38;2;252;186;3mACCL\e[0m | X : %i | Y : %i | Z : %i \n\r", (int)ax_x.float_value, (int)ax_y.float_value, (int)ax_z.float_value);
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fe34 	bl	8000d44 <__aeabi_f2iz>
 80010dc:	4604      	mov	r4, r0
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fe2f 	bl	8000d44 <__aeabi_f2iz>
 80010e6:	4605      	mov	r5, r0
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fe2a 	bl	8000d44 <__aeabi_f2iz>
 80010f0:	4603      	mov	r3, r0
 80010f2:	462a      	mov	r2, r5
 80010f4:	4621      	mov	r1, r4
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <StartReadIMU+0xf8>)
 80010f8:	f006 fd7e 	bl	8007bf8 <iprintf>

    // IMU DATA: 16 ASCII characters
    addtoIMUQueue("G", "X", gy_x.bytes);
 80010fc:	f107 031c 	add.w	r3, r7, #28
 8001100:	461a      	mov	r2, r3
 8001102:	4918      	ldr	r1, [pc, #96]	; (8001164 <StartReadIMU+0xfc>)
 8001104:	4818      	ldr	r0, [pc, #96]	; (8001168 <StartReadIMU+0x100>)
 8001106:	f000 f837 	bl	8001178 <addtoIMUQueue>
    addtoIMUQueue("G", "Y", gy_y.bytes);
 800110a:	f107 0318 	add.w	r3, r7, #24
 800110e:	461a      	mov	r2, r3
 8001110:	4916      	ldr	r1, [pc, #88]	; (800116c <StartReadIMU+0x104>)
 8001112:	4815      	ldr	r0, [pc, #84]	; (8001168 <StartReadIMU+0x100>)
 8001114:	f000 f830 	bl	8001178 <addtoIMUQueue>
    addtoIMUQueue("G", "Z", gy_z.bytes);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	461a      	mov	r2, r3
 800111e:	4914      	ldr	r1, [pc, #80]	; (8001170 <StartReadIMU+0x108>)
 8001120:	4811      	ldr	r0, [pc, #68]	; (8001168 <StartReadIMU+0x100>)
 8001122:	f000 f829 	bl	8001178 <addtoIMUQueue>
    addtoIMUQueue("A", "X", ax_x.bytes);
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	461a      	mov	r2, r3
 800112c:	490d      	ldr	r1, [pc, #52]	; (8001164 <StartReadIMU+0xfc>)
 800112e:	4811      	ldr	r0, [pc, #68]	; (8001174 <StartReadIMU+0x10c>)
 8001130:	f000 f822 	bl	8001178 <addtoIMUQueue>
    addtoIMUQueue("A", "Y", ax_y.bytes);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	461a      	mov	r2, r3
 800113a:	490c      	ldr	r1, [pc, #48]	; (800116c <StartReadIMU+0x104>)
 800113c:	480d      	ldr	r0, [pc, #52]	; (8001174 <StartReadIMU+0x10c>)
 800113e:	f000 f81b 	bl	8001178 <addtoIMUQueue>
    addtoIMUQueue("A", "Z", ax_z.bytes);
 8001142:	f107 0308 	add.w	r3, r7, #8
 8001146:	461a      	mov	r2, r3
 8001148:	4909      	ldr	r1, [pc, #36]	; (8001170 <StartReadIMU+0x108>)
 800114a:	480a      	ldr	r0, [pc, #40]	; (8001174 <StartReadIMU+0x10c>)
 800114c:	f000 f814 	bl	8001178 <addtoIMUQueue>

    osDelay(1000);
 8001150:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001154:	f003 f904 	bl	8004360 <osDelay>
    gy_x.float_value = gyro(GYRO_X);
 8001158:	e78a      	b.n	8001070 <StartReadIMU+0x8>
 800115a:	bf00      	nop
 800115c:	08009b6c 	.word	0x08009b6c
 8001160:	08009bac 	.word	0x08009bac
 8001164:	08009bec 	.word	0x08009bec
 8001168:	08009bf0 	.word	0x08009bf0
 800116c:	08009bf4 	.word	0x08009bf4
 8001170:	08009bf8 	.word	0x08009bf8
 8001174:	08009bfc 	.word	0x08009bfc

08001178 <addtoIMUQueue>:
  // In case we accidentally exit from task loop
  osThreadTerminate(NULL);

}

void addtoIMUQueue(char* type, char* dimension, uint8_t* data){
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type[1] = type;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	b2db      	uxtb	r3, r3
 8001188:	757b      	strb	r3, [r7, #21]
    imu_message.dimension[1] = dimension;
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	75bb      	strb	r3, [r7, #22]
    for (int i = 0; i < 4; i++) {
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
 8001194:	e00c      	b.n	80011b0 <addtoIMUQueue+0x38>
        imu_message.data[i] = data[i];
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	4413      	add	r3, r2
 800119c:	7819      	ldrb	r1, [r3, #0]
 800119e:	f107 0216 	add.w	r2, r7, #22
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	4413      	add	r3, r2
 80011a6:	460a      	mov	r2, r1
 80011a8:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3301      	adds	r3, #1
 80011ae:	61fb      	str	r3, [r7, #28]
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	2b03      	cmp	r3, #3
 80011b4:	ddef      	ble.n	8001196 <addtoIMUQueue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 80011b6:	4b06      	ldr	r3, [pc, #24]	; (80011d0 <addtoIMUQueue+0x58>)
 80011b8:	6818      	ldr	r0, [r3, #0]
 80011ba:	f107 0114 	add.w	r1, r7, #20
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	f003 f981 	bl	80044c8 <osMessageQueuePut>
}
 80011c6:	bf00      	nop
 80011c8:	3720      	adds	r7, #32
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	20000208 	.word	0x20000208

080011d4 <StartTransmitData>:

void StartTransmitData(void *argument){
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b088      	sub	sp, #32
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  osStatus_t imu_queue_status;
  IMU_msg_t imu_message;

  while(1)
  {
    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 80011dc:	4b20      	ldr	r3, [pc, #128]	; (8001260 <StartTransmitData+0x8c>)
 80011de:	6818      	ldr	r0, [r3, #0]
 80011e0:	f107 0114 	add.w	r1, r7, #20
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	2200      	movs	r2, #0
 80011ea:	f003 f9e1 	bl	80045b0 <osMessageQueueGet>
 80011ee:	61f8      	str	r0, [r7, #28]

    if (imu_queue_status != osOK){
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <StartTransmitData+0x26>
      osThreadYield();
 80011f6:	f003 f881 	bl	80042fc <osThreadYield>
    }
    // IMU ID: 1 ASCII characters
    uint8_t imu_id[1] = "@";
 80011fa:	2340      	movs	r3, #64	; 0x40
 80011fc:	743b      	strb	r3, [r7, #16]
    HAL_UART_Transmit(&huart2, imu_id, sizeof(imu_id), 1000);
 80011fe:	f107 0110 	add.w	r1, r7, #16
 8001202:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001206:	2201      	movs	r2, #1
 8001208:	4816      	ldr	r0, [pc, #88]	; (8001264 <StartTransmitData+0x90>)
 800120a:	f002 fdfc 	bl	8003e06 <HAL_UART_Transmit>

    transmitData(imu_message.imu_type, sizeof(imu_message.imu_type));
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	2101      	movs	r1, #1
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fdbb 	bl	8000d90 <transmitData>
    transmitData(imu_message.dimension, sizeof(imu_message.dimension));
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	3301      	adds	r3, #1
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fdb4 	bl	8000d90 <transmitData>
    transmitData(imu_message.data, sizeof(imu_message.data));
 8001228:	f107 0314 	add.w	r3, r7, #20
 800122c:	3302      	adds	r3, #2
 800122e:	2104      	movs	r1, #4
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fdad 	bl	8000d90 <transmitData>

    // NEW LINE: 1 ASCII character
    uint8_t newline[1] = "\n";
 8001236:	230a      	movs	r3, #10
 8001238:	733b      	strb	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, newline, sizeof(newline), 1000);
 800123a:	f107 010c 	add.w	r1, r7, #12
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	2201      	movs	r2, #1
 8001244:	4807      	ldr	r0, [pc, #28]	; (8001264 <StartTransmitData+0x90>)
 8001246:	f002 fdde 	bl	8003e06 <HAL_UART_Transmit>

    // CARRIAGE RETURN: 1 ASCII character
    uint8_t carriage[1] = "\r";
 800124a:	230d      	movs	r3, #13
 800124c:	723b      	strb	r3, [r7, #8]
    HAL_UART_Transmit(&huart2, carriage, sizeof(carriage), 1000);
 800124e:	f107 0108 	add.w	r1, r7, #8
 8001252:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001256:	2201      	movs	r2, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <StartTransmitData+0x90>)
 800125a:	f002 fdd4 	bl	8003e06 <HAL_UART_Transmit>
  {
 800125e:	e7bd      	b.n	80011dc <StartTransmitData+0x8>
 8001260:	20000208 	.word	0x20000208
 8001264:	200002ac 	.word	0x200002ac

08001268 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800126c:	f000 fbdc 	bl	8001a28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001270:	f000 f80f 	bl	8001292 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001274:	f000 f84e 	bl	8001314 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001278:	f000 fb5c 	bl	8001934 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800127c:	f000 fb2c 	bl	80018d8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001280:	f000 fb82 	bl	8001988 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001284:	f002 ff2a 	bl	80040dc <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
   MX_FREERTOS_Init();
 8001288:	f7ff fea2 	bl	8000fd0 <MX_FREERTOS_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800128c:	f002 ff58 	bl	8004140 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001290:	e7fe      	b.n	8001290 <main+0x28>

08001292 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b090      	sub	sp, #64	; 0x40
 8001296:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001298:	f107 0318 	add.w	r3, r7, #24
 800129c:	2228      	movs	r2, #40	; 0x28
 800129e:	2100      	movs	r1, #0
 80012a0:	4618      	mov	r0, r3
 80012a2:	f005 ffac 	bl	80071fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2310      	movs	r3, #16
 80012be:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012c8:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012ce:	f107 0318 	add.w	r3, r7, #24
 80012d2:	4618      	mov	r0, r3
 80012d4:	f001 feb6 	bl	8003044 <HAL_RCC_OscConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80012de:	f000 f899 	bl	8001414 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e2:	230f      	movs	r3, #15
 80012e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e6:	2302      	movs	r3, #2
 80012e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ea:	2300      	movs	r3, #0
 80012ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2102      	movs	r1, #2
 80012fc:	4618      	mov	r0, r3
 80012fe:	f002 f923 	bl	8003548 <HAL_RCC_ClockConfig>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001308:	f000 f884 	bl	8001414 <Error_Handler>
  }
}
 800130c:	bf00      	nop
 800130e:	3740      	adds	r7, #64	; 0x40
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131a:	f107 0310 	add.w	r3, r7, #16
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001328:	4b2d      	ldr	r3, [pc, #180]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a2c      	ldr	r2, [pc, #176]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800132e:	f043 0310 	orr.w	r3, r3, #16
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b2a      	ldr	r3, [pc, #168]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0310 	and.w	r3, r3, #16
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	4a26      	ldr	r2, [pc, #152]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001346:	f043 0320 	orr.w	r3, r3, #32
 800134a:	6193      	str	r3, [r2, #24]
 800134c:	4b24      	ldr	r3, [pc, #144]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800134e:	699b      	ldr	r3, [r3, #24]
 8001350:	f003 0320 	and.w	r3, r3, #32
 8001354:	60bb      	str	r3, [r7, #8]
 8001356:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800135e:	f043 0304 	orr.w	r3, r3, #4
 8001362:	6193      	str	r3, [r2, #24]
 8001364:	4b1e      	ldr	r3, [pc, #120]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001366:	699b      	ldr	r3, [r3, #24]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001370:	4b1b      	ldr	r3, [pc, #108]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001372:	699b      	ldr	r3, [r3, #24]
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <MX_GPIO_Init+0xcc>)
 8001376:	f043 0308 	orr.w	r3, r3, #8
 800137a:	6193      	str	r3, [r2, #24]
 800137c:	4b18      	ldr	r3, [pc, #96]	; (80013e0 <MX_GPIO_Init+0xcc>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	603b      	str	r3, [r7, #0]
 8001386:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	4815      	ldr	r0, [pc, #84]	; (80013e4 <MX_GPIO_Init+0xd0>)
 800138e:	f000 fe05 	bl	8001f9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001392:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001396:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001398:	4b13      	ldr	r3, [pc, #76]	; (80013e8 <MX_GPIO_Init+0xd4>)
 800139a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a0:	f107 0310 	add.w	r3, r7, #16
 80013a4:	4619      	mov	r1, r3
 80013a6:	4811      	ldr	r0, [pc, #68]	; (80013ec <MX_GPIO_Init+0xd8>)
 80013a8:	f000 fc74 	bl	8001c94 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013ac:	2320      	movs	r3, #32
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b0:	2301      	movs	r3, #1
 80013b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b8:	2302      	movs	r3, #2
 80013ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	4619      	mov	r1, r3
 80013c2:	4808      	ldr	r0, [pc, #32]	; (80013e4 <MX_GPIO_Init+0xd0>)
 80013c4:	f000 fc66 	bl	8001c94 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80013c8:	2200      	movs	r2, #0
 80013ca:	2105      	movs	r1, #5
 80013cc:	2028      	movs	r0, #40	; 0x28
 80013ce:	f000 fc36 	bl	8001c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013d2:	2028      	movs	r0, #40	; 0x28
 80013d4:	f000 fc4f 	bl	8001c76 <HAL_NVIC_EnableIRQ>

}
 80013d8:	bf00      	nop
 80013da:	3720      	adds	r7, #32
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010800 	.word	0x40010800
 80013e8:	10110000 	.word	0x10110000
 80013ec:	40011000 	.word	0x40011000

080013f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a04      	ldr	r2, [pc, #16]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d101      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001402:	f000 fb27 	bl	8001a54 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40000800 	.word	0x40000800

08001414 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001418:	b672      	cpsid	i
}
 800141a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800141c:	e7fe      	b.n	800141c <Error_Handler+0x8>
	...

08001420 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001426:	4b18      	ldr	r3, [pc, #96]	; (8001488 <HAL_MspInit+0x68>)
 8001428:	699b      	ldr	r3, [r3, #24]
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <HAL_MspInit+0x68>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6193      	str	r3, [r2, #24]
 8001432:	4b15      	ldr	r3, [pc, #84]	; (8001488 <HAL_MspInit+0x68>)
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60bb      	str	r3, [r7, #8]
 800143c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <HAL_MspInit+0x68>)
 8001440:	69db      	ldr	r3, [r3, #28]
 8001442:	4a11      	ldr	r2, [pc, #68]	; (8001488 <HAL_MspInit+0x68>)
 8001444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001448:	61d3      	str	r3, [r2, #28]
 800144a:	4b0f      	ldr	r3, [pc, #60]	; (8001488 <HAL_MspInit+0x68>)
 800144c:	69db      	ldr	r3, [r3, #28]
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	607b      	str	r3, [r7, #4]
 8001454:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001456:	2200      	movs	r2, #0
 8001458:	210f      	movs	r1, #15
 800145a:	f06f 0001 	mvn.w	r0, #1
 800145e:	f000 fbee 	bl	8001c3e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <HAL_MspInit+0x6c>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800146e:	60fb      	str	r3, [r7, #12]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_MspInit+0x6c>)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40021000 	.word	0x40021000
 800148c:	40010000 	.word	0x40010000

08001490 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b088      	sub	sp, #32
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a15      	ldr	r2, [pc, #84]	; (8001500 <HAL_I2C_MspInit+0x70>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d123      	bne.n	80014f8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014b2:	699b      	ldr	r3, [r3, #24]
 80014b4:	4a13      	ldr	r2, [pc, #76]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014b6:	f043 0308 	orr.w	r3, r3, #8
 80014ba:	6193      	str	r3, [r2, #24]
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	f003 0308 	and.w	r3, r3, #8
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c8:	23c0      	movs	r3, #192	; 0xc0
 80014ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014cc:	2312      	movs	r3, #18
 80014ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d4:	f107 0310 	add.w	r3, r7, #16
 80014d8:	4619      	mov	r1, r3
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_I2C_MspInit+0x78>)
 80014dc:	f000 fbda 	bl	8001c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e0:	4b08      	ldr	r3, [pc, #32]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014e2:	69db      	ldr	r3, [r3, #28]
 80014e4:	4a07      	ldr	r2, [pc, #28]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ea:	61d3      	str	r3, [r2, #28]
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_I2C_MspInit+0x74>)
 80014ee:	69db      	ldr	r3, [r3, #28]
 80014f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f4:	60bb      	str	r3, [r7, #8]
 80014f6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014f8:	bf00      	nop
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40005400 	.word	0x40005400
 8001504:	40021000 	.word	0x40021000
 8001508:	40010c00 	.word	0x40010c00

0800150c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0318 	add.w	r3, r7, #24
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a31      	ldr	r2, [pc, #196]	; (80015ec <HAL_UART_MspInit+0xe0>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d124      	bne.n	8001576 <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800152c:	4b30      	ldr	r3, [pc, #192]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	4a2f      	ldr	r2, [pc, #188]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 8001532:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001536:	61d3      	str	r3, [r2, #28]
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800153a:	69db      	ldr	r3, [r3, #28]
 800153c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001540:	617b      	str	r3, [r7, #20]
 8001542:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001544:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a29      	ldr	r2, [pc, #164]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800154a:	f043 0304 	orr.w	r3, r3, #4
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b27      	ldr	r3, [pc, #156]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0304 	and.w	r3, r3, #4
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800155c:	230c      	movs	r3, #12
 800155e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001560:	2302      	movs	r3, #2
 8001562:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2302      	movs	r3, #2
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001568:	f107 0318 	add.w	r3, r7, #24
 800156c:	4619      	mov	r1, r3
 800156e:	4821      	ldr	r0, [pc, #132]	; (80015f4 <HAL_UART_MspInit+0xe8>)
 8001570:	f000 fb90 	bl	8001c94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001574:	e036      	b.n	80015e4 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART3)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	4a1f      	ldr	r2, [pc, #124]	; (80015f8 <HAL_UART_MspInit+0xec>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d131      	bne.n	80015e4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001580:	4b1b      	ldr	r3, [pc, #108]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	4a1a      	ldr	r2, [pc, #104]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 8001586:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800158a:	61d3      	str	r3, [r2, #28]
 800158c:	4b18      	ldr	r3, [pc, #96]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001594:	60fb      	str	r3, [r7, #12]
 8001596:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001598:	4b15      	ldr	r3, [pc, #84]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800159a:	699b      	ldr	r3, [r3, #24]
 800159c:	4a14      	ldr	r2, [pc, #80]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6193      	str	r3, [r2, #24]
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_UART_MspInit+0xe4>)
 80015a6:	699b      	ldr	r3, [r3, #24]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80015b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b6:	2302      	movs	r3, #2
 80015b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ba:	2303      	movs	r3, #3
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015be:	f107 0318 	add.w	r3, r7, #24
 80015c2:	4619      	mov	r1, r3
 80015c4:	480d      	ldr	r0, [pc, #52]	; (80015fc <HAL_UART_MspInit+0xf0>)
 80015c6:	f000 fb65 	bl	8001c94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0318 	add.w	r3, r7, #24
 80015dc:	4619      	mov	r1, r3
 80015de:	4807      	ldr	r0, [pc, #28]	; (80015fc <HAL_UART_MspInit+0xf0>)
 80015e0:	f000 fb58 	bl	8001c94 <HAL_GPIO_Init>
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40004400 	.word	0x40004400
 80015f0:	40021000 	.word	0x40021000
 80015f4:	40010800 	.word	0x40010800
 80015f8:	40004800 	.word	0x40004800
 80015fc:	40010c00 	.word	0x40010c00

08001600 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08e      	sub	sp, #56	; 0x38
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001608:	2300      	movs	r3, #0
 800160a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800160c:	2300      	movs	r3, #0
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001610:	2300      	movs	r3, #0
 8001612:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001616:	4b34      	ldr	r3, [pc, #208]	; (80016e8 <HAL_InitTick+0xe8>)
 8001618:	69db      	ldr	r3, [r3, #28]
 800161a:	4a33      	ldr	r2, [pc, #204]	; (80016e8 <HAL_InitTick+0xe8>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	61d3      	str	r3, [r2, #28]
 8001622:	4b31      	ldr	r3, [pc, #196]	; (80016e8 <HAL_InitTick+0xe8>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800162e:	f107 0210 	add.w	r2, r7, #16
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f002 f8ff 	bl	800383c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800163e:	6a3b      	ldr	r3, [r7, #32]
 8001640:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001644:	2b00      	cmp	r3, #0
 8001646:	d103      	bne.n	8001650 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001648:	f002 f8d0 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 800164c:	6378      	str	r0, [r7, #52]	; 0x34
 800164e:	e004      	b.n	800165a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001650:	f002 f8cc 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8001654:	4603      	mov	r3, r0
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800165a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800165c:	4a23      	ldr	r2, [pc, #140]	; (80016ec <HAL_InitTick+0xec>)
 800165e:	fba2 2303 	umull	r2, r3, r2, r3
 8001662:	0c9b      	lsrs	r3, r3, #18
 8001664:	3b01      	subs	r3, #1
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001668:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_InitTick+0xf0>)
 800166a:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_InitTick+0xf4>)
 800166c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800166e:	4b20      	ldr	r3, [pc, #128]	; (80016f0 <HAL_InitTick+0xf0>)
 8001670:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001674:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001676:	4a1e      	ldr	r2, [pc, #120]	; (80016f0 <HAL_InitTick+0xf0>)
 8001678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800167a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800167c:	4b1c      	ldr	r3, [pc, #112]	; (80016f0 <HAL_InitTick+0xf0>)
 800167e:	2200      	movs	r2, #0
 8001680:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001682:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <HAL_InitTick+0xf0>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001688:	4b19      	ldr	r3, [pc, #100]	; (80016f0 <HAL_InitTick+0xf0>)
 800168a:	2200      	movs	r2, #0
 800168c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800168e:	4818      	ldr	r0, [pc, #96]	; (80016f0 <HAL_InitTick+0xf0>)
 8001690:	f002 f922 	bl	80038d8 <HAL_TIM_Base_Init>
 8001694:	4603      	mov	r3, r0
 8001696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800169a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d11b      	bne.n	80016da <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80016a2:	4813      	ldr	r0, [pc, #76]	; (80016f0 <HAL_InitTick+0xf0>)
 80016a4:	f002 f970 	bl	8003988 <HAL_TIM_Base_Start_IT>
 80016a8:	4603      	mov	r3, r0
 80016aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80016ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d111      	bne.n	80016da <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80016b6:	201e      	movs	r0, #30
 80016b8:	f000 fadd 	bl	8001c76 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2b0f      	cmp	r3, #15
 80016c0:	d808      	bhi.n	80016d4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80016c2:	2200      	movs	r2, #0
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	201e      	movs	r0, #30
 80016c8:	f000 fab9 	bl	8001c3e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016cc:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <HAL_InitTick+0xf8>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
 80016d2:	e002      	b.n	80016da <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80016da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3738      	adds	r7, #56	; 0x38
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	40021000 	.word	0x40021000
 80016ec:	431bde83 	.word	0x431bde83
 80016f0:	2000020c 	.word	0x2000020c
 80016f4:	40000800 	.word	0x40000800
 80016f8:	20000004 	.word	0x20000004

080016fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001700:	e7fe      	b.n	8001700 <NMI_Handler+0x4>

08001702 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001702:	b480      	push	{r7}
 8001704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001706:	e7fe      	b.n	8001706 <HardFault_Handler+0x4>

08001708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800170c:	e7fe      	b.n	800170c <MemManage_Handler+0x4>

0800170e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001712:	e7fe      	b.n	8001712 <BusFault_Handler+0x4>

08001714 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001718:	e7fe      	b.n	8001718 <UsageFault_Handler+0x4>

0800171a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800171a:	b480      	push	{r7}
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800171e:	bf00      	nop
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr
	...

08001728 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800172c:	4802      	ldr	r0, [pc, #8]	; (8001738 <TIM4_IRQHandler+0x10>)
 800172e:	f002 f97d 	bl	8003a2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001732:	bf00      	nop
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	2000020c 	.word	0x2000020c

0800173c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001740:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001744:	f000 fc5c 	bl	8002000 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001748:	bf00      	nop
 800174a:	bd80      	pop	{r7, pc}

0800174c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
	return 1;
 8001750:	2301      	movs	r3, #1
}
 8001752:	4618      	mov	r0, r3
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_kill>:

int _kill(int pid, int sig)
{
 800175a:	b580      	push	{r7, lr}
 800175c:	b082      	sub	sp, #8
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
 8001762:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001764:	f005 fc1a 	bl	8006f9c <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	2216      	movs	r2, #22
 800176c:	601a      	str	r2, [r3, #0]
	return -1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001772:	4618      	mov	r0, r3
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_exit>:

void _exit (int status)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	b082      	sub	sp, #8
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001782:	f04f 31ff 	mov.w	r1, #4294967295
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f7ff ffe7 	bl	800175a <_kill>
	while (1) {}		/* Make sure we hang here */
 800178c:	e7fe      	b.n	800178c <_exit+0x12>

0800178e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179a:	2300      	movs	r3, #0
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e00a      	b.n	80017b6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80017a0:	f3af 8000 	nop.w
 80017a4:	4601      	mov	r1, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	60ba      	str	r2, [r7, #8]
 80017ac:	b2ca      	uxtb	r2, r1
 80017ae:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	3301      	adds	r3, #1
 80017b4:	617b      	str	r3, [r7, #20]
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dbf0      	blt.n	80017a0 <_read+0x12>
	}

return len;
 80017be:	687b      	ldr	r3, [r7, #4]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017d4:	2300      	movs	r3, #0
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	e009      	b.n	80017ee <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	1c5a      	adds	r2, r3, #1
 80017de:	60ba      	str	r2, [r7, #8]
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7ff fbe2 	bl	8000fac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3301      	adds	r3, #1
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	697a      	ldr	r2, [r7, #20]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	429a      	cmp	r2, r3
 80017f4:	dbf1      	blt.n	80017da <_write+0x12>
	}
	return len;
 80017f6:	687b      	ldr	r3, [r7, #4]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3718      	adds	r7, #24
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}

08001800 <_close>:

int _close(int file)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	return -1;
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
 800181e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001826:	605a      	str	r2, [r3, #4]
	return 0;
 8001828:	2300      	movs	r3, #0
}
 800182a:	4618      	mov	r0, r3
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <_isatty>:

int _isatty(int file)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	return 1;
 800183c:	2301      	movs	r3, #1
}
 800183e:	4618      	mov	r0, r3
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	bc80      	pop	{r7}
 8001846:	4770      	bx	lr

08001848 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
	return 0;
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3714      	adds	r7, #20
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001868:	4a14      	ldr	r2, [pc, #80]	; (80018bc <_sbrk+0x5c>)
 800186a:	4b15      	ldr	r3, [pc, #84]	; (80018c0 <_sbrk+0x60>)
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d102      	bne.n	8001882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <_sbrk+0x64>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <_sbrk+0x68>)
 8001880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <_sbrk+0x64>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	429a      	cmp	r2, r3
 800188e:	d207      	bcs.n	80018a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001890:	f005 fb84 	bl	8006f9c <__errno>
 8001894:	4603      	mov	r3, r0
 8001896:	220c      	movs	r2, #12
 8001898:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800189a:	f04f 33ff 	mov.w	r3, #4294967295
 800189e:	e009      	b.n	80018b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <_sbrk+0x64>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018a6:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <_sbrk+0x64>)
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4413      	add	r3, r2
 80018ae:	4a05      	ldr	r2, [pc, #20]	; (80018c4 <_sbrk+0x64>)
 80018b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3718      	adds	r7, #24
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}
 80018bc:	20005000 	.word	0x20005000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000254 	.word	0x20000254
 80018c8:	20001d50 	.word	0x20001d50

080018cc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018d0:	bf00      	nop
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr

080018d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018dc:	4b12      	ldr	r3, [pc, #72]	; (8001928 <MX_I2C1_Init+0x50>)
 80018de:	4a13      	ldr	r2, [pc, #76]	; (800192c <MX_I2C1_Init+0x54>)
 80018e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018e2:	4b11      	ldr	r3, [pc, #68]	; (8001928 <MX_I2C1_Init+0x50>)
 80018e4:	4a12      	ldr	r2, [pc, #72]	; (8001930 <MX_I2C1_Init+0x58>)
 80018e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018e8:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <MX_I2C1_Init+0x50>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80018ee:	4b0e      	ldr	r3, [pc, #56]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018f4:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <MX_I2C1_Init+0x50>)
 80018f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018fc:	4b0a      	ldr	r3, [pc, #40]	; (8001928 <MX_I2C1_Init+0x50>)
 80018fe:	2200      	movs	r2, #0
 8001900:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001902:	4b09      	ldr	r3, [pc, #36]	; (8001928 <MX_I2C1_Init+0x50>)
 8001904:	2200      	movs	r2, #0
 8001906:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001908:	4b07      	ldr	r3, [pc, #28]	; (8001928 <MX_I2C1_Init+0x50>)
 800190a:	2200      	movs	r2, #0
 800190c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800190e:	4b06      	ldr	r3, [pc, #24]	; (8001928 <MX_I2C1_Init+0x50>)
 8001910:	2200      	movs	r2, #0
 8001912:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001914:	4804      	ldr	r0, [pc, #16]	; (8001928 <MX_I2C1_Init+0x50>)
 8001916:	f000 fb95 	bl	8002044 <HAL_I2C_Init>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001920:	f7ff fd78 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001924:	bf00      	nop
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20000258 	.word	0x20000258
 800192c:	40005400 	.word	0x40005400
 8001930:	000186a0 	.word	0x000186a0

08001934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001938:	4b11      	ldr	r3, [pc, #68]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800193a:	4a12      	ldr	r2, [pc, #72]	; (8001984 <MX_USART2_UART_Init+0x50>)
 800193c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001940:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001948:	2200      	movs	r2, #0
 800194a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800194c:	4b0c      	ldr	r3, [pc, #48]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800194e:	2200      	movs	r2, #0
 8001950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001952:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800195a:	220c      	movs	r2, #12
 800195c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800195e:	4b08      	ldr	r3, [pc, #32]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800196a:	4805      	ldr	r0, [pc, #20]	; (8001980 <MX_USART2_UART_Init+0x4c>)
 800196c:	f002 f9fe 	bl	8003d6c <HAL_UART_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001976:	f7ff fd4d 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002ac 	.word	0x200002ac
 8001984:	40004400 	.word	0x40004400

08001988 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <MX_USART3_UART_Init+0x50>)
 8001990:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 8001994:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001998:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019ae:	220c      	movs	r2, #12
 80019b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART3_UART_Init+0x4c>)
 80019c0:	f002 f9d4 	bl	8003d6c <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80019ca:	f7ff fd23 	bl	8001414 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	200002f0 	.word	0x200002f0
 80019d8:	40004800 	.word	0x40004800

080019dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019dc:	480c      	ldr	r0, [pc, #48]	; (8001a10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80019de:	490d      	ldr	r1, [pc, #52]	; (8001a14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80019e0:	4a0d      	ldr	r2, [pc, #52]	; (8001a18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80019e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e4:	e002      	b.n	80019ec <LoopCopyDataInit>

080019e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ea:	3304      	adds	r3, #4

080019ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f0:	d3f9      	bcc.n	80019e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019f4:	4c0a      	ldr	r4, [pc, #40]	; (8001a20 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019f8:	e001      	b.n	80019fe <LoopFillZerobss>

080019fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019fc:	3204      	adds	r2, #4

080019fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a00:	d3fb      	bcc.n	80019fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a02:	f7ff ff63 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a06:	f005 fbc5 	bl	8007194 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a0a:	f7ff fc2d 	bl	8001268 <main>
  bx lr
 8001a0e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a14:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001a18:	0800a0a4 	.word	0x0800a0a4
  ldr r2, =_sbss
 8001a1c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a20:	20001d50 	.word	0x20001d50

08001a24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a24:	e7fe      	b.n	8001a24 <ADC1_2_IRQHandler>
	...

08001a28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a2c:	4b08      	ldr	r3, [pc, #32]	; (8001a50 <HAL_Init+0x28>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a07      	ldr	r2, [pc, #28]	; (8001a50 <HAL_Init+0x28>)
 8001a32:	f043 0310 	orr.w	r3, r3, #16
 8001a36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a38:	2003      	movs	r0, #3
 8001a3a:	f000 f8f5 	bl	8001c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a3e:	200f      	movs	r0, #15
 8001a40:	f7ff fdde 	bl	8001600 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a44:	f7ff fcec 	bl	8001420 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_IncTick+0x1c>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <HAL_IncTick+0x20>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	4a03      	ldr	r2, [pc, #12]	; (8001a74 <HAL_IncTick+0x20>)
 8001a66:	6013      	str	r3, [r2, #0]
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr
 8001a70:	20000008 	.word	0x20000008
 8001a74:	20000334 	.word	0x20000334

08001a78 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a7c:	4b02      	ldr	r3, [pc, #8]	; (8001a88 <HAL_GetTick+0x10>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bc80      	pop	{r7}
 8001a86:	4770      	bx	lr
 8001a88:	20000334 	.word	0x20000334

08001a8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b084      	sub	sp, #16
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_GetTick>
 8001a98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001aa4:	d005      	beq.n	8001ab2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_Delay+0x44>)
 8001aa8:	781b      	ldrb	r3, [r3, #0]
 8001aaa:	461a      	mov	r2, r3
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	4413      	add	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ab2:	bf00      	nop
 8001ab4:	f7ff ffe0 	bl	8001a78 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	68fa      	ldr	r2, [r7, #12]
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d8f7      	bhi.n	8001ab4 <HAL_Delay+0x28>
  {
  }
}
 8001ac4:	bf00      	nop
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000008 	.word	0x20000008

08001ad4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b085      	sub	sp, #20
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ae4:	4b0c      	ldr	r3, [pc, #48]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aea:	68ba      	ldr	r2, [r7, #8]
 8001aec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001af0:	4013      	ands	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001afc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b06:	4a04      	ldr	r2, [pc, #16]	; (8001b18 <__NVIC_SetPriorityGrouping+0x44>)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	60d3      	str	r3, [r2, #12]
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bc80      	pop	{r7}
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	e000ed00 	.word	0xe000ed00

08001b1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_GetPriorityGrouping+0x18>)
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	0a1b      	lsrs	r3, r3, #8
 8001b26:	f003 0307 	and.w	r3, r3, #7
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	db0b      	blt.n	8001b62 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b4a:	79fb      	ldrb	r3, [r7, #7]
 8001b4c:	f003 021f 	and.w	r2, r3, #31
 8001b50:	4906      	ldr	r1, [pc, #24]	; (8001b6c <__NVIC_EnableIRQ+0x34>)
 8001b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b56:	095b      	lsrs	r3, r3, #5
 8001b58:	2001      	movs	r0, #1
 8001b5a:	fa00 f202 	lsl.w	r2, r0, r2
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr
 8001b6c:	e000e100 	.word	0xe000e100

08001b70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	6039      	str	r1, [r7, #0]
 8001b7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	db0a      	blt.n	8001b9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	b2da      	uxtb	r2, r3
 8001b88:	490c      	ldr	r1, [pc, #48]	; (8001bbc <__NVIC_SetPriority+0x4c>)
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	0112      	lsls	r2, r2, #4
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	440b      	add	r3, r1
 8001b94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b98:	e00a      	b.n	8001bb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	b2da      	uxtb	r2, r3
 8001b9e:	4908      	ldr	r1, [pc, #32]	; (8001bc0 <__NVIC_SetPriority+0x50>)
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	3b04      	subs	r3, #4
 8001ba8:	0112      	lsls	r2, r2, #4
 8001baa:	b2d2      	uxtb	r2, r2
 8001bac:	440b      	add	r3, r1
 8001bae:	761a      	strb	r2, [r3, #24]
}
 8001bb0:	bf00      	nop
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bc80      	pop	{r7}
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	e000e100 	.word	0xe000e100
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f1c3 0307 	rsb	r3, r3, #7
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	bf28      	it	cs
 8001be2:	2304      	movcs	r3, #4
 8001be4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3304      	adds	r3, #4
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d902      	bls.n	8001bf4 <NVIC_EncodePriority+0x30>
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	3b03      	subs	r3, #3
 8001bf2:	e000      	b.n	8001bf6 <NVIC_EncodePriority+0x32>
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bfc:	69bb      	ldr	r3, [r7, #24]
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	43da      	mvns	r2, r3
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	401a      	ands	r2, r3
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	fa01 f303 	lsl.w	r3, r1, r3
 8001c16:	43d9      	mvns	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	4313      	orrs	r3, r2
         );
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3724      	adds	r7, #36	; 0x24
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff ff4f 	bl	8001ad4 <__NVIC_SetPriorityGrouping>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c3e:	b580      	push	{r7, lr}
 8001c40:	b086      	sub	sp, #24
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	4603      	mov	r3, r0
 8001c46:	60b9      	str	r1, [r7, #8]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c50:	f7ff ff64 	bl	8001b1c <__NVIC_GetPriorityGrouping>
 8001c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	68b9      	ldr	r1, [r7, #8]
 8001c5a:	6978      	ldr	r0, [r7, #20]
 8001c5c:	f7ff ffb2 	bl	8001bc4 <NVIC_EncodePriority>
 8001c60:	4602      	mov	r2, r0
 8001c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c66:	4611      	mov	r1, r2
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff81 	bl	8001b70 <__NVIC_SetPriority>
}
 8001c6e:	bf00      	nop
 8001c70:	3718      	adds	r7, #24
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b082      	sub	sp, #8
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff ff57 	bl	8001b38 <__NVIC_EnableIRQ>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b08b      	sub	sp, #44	; 0x2c
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ca6:	e169      	b.n	8001f7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	69fa      	ldr	r2, [r7, #28]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	f040 8158 	bne.w	8001f76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	4a9a      	ldr	r2, [pc, #616]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d05e      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cd0:	4a98      	ldr	r2, [pc, #608]	; (8001f34 <HAL_GPIO_Init+0x2a0>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d875      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cd6:	4a98      	ldr	r2, [pc, #608]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d058      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cdc:	4a96      	ldr	r2, [pc, #600]	; (8001f38 <HAL_GPIO_Init+0x2a4>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d86f      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001ce2:	4a96      	ldr	r2, [pc, #600]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d052      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001ce8:	4a94      	ldr	r2, [pc, #592]	; (8001f3c <HAL_GPIO_Init+0x2a8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d869      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cee:	4a94      	ldr	r2, [pc, #592]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d04c      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001cf4:	4a92      	ldr	r2, [pc, #584]	; (8001f40 <HAL_GPIO_Init+0x2ac>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d863      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001cfa:	4a92      	ldr	r2, [pc, #584]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d046      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
 8001d00:	4a90      	ldr	r2, [pc, #576]	; (8001f44 <HAL_GPIO_Init+0x2b0>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d85d      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d06:	2b12      	cmp	r3, #18
 8001d08:	d82a      	bhi.n	8001d60 <HAL_GPIO_Init+0xcc>
 8001d0a:	2b12      	cmp	r3, #18
 8001d0c:	d859      	bhi.n	8001dc2 <HAL_GPIO_Init+0x12e>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <HAL_GPIO_Init+0x80>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d8f 	.word	0x08001d8f
 8001d18:	08001d69 	.word	0x08001d69
 8001d1c:	08001d7b 	.word	0x08001d7b
 8001d20:	08001dbd 	.word	0x08001dbd
 8001d24:	08001dc3 	.word	0x08001dc3
 8001d28:	08001dc3 	.word	0x08001dc3
 8001d2c:	08001dc3 	.word	0x08001dc3
 8001d30:	08001dc3 	.word	0x08001dc3
 8001d34:	08001dc3 	.word	0x08001dc3
 8001d38:	08001dc3 	.word	0x08001dc3
 8001d3c:	08001dc3 	.word	0x08001dc3
 8001d40:	08001dc3 	.word	0x08001dc3
 8001d44:	08001dc3 	.word	0x08001dc3
 8001d48:	08001dc3 	.word	0x08001dc3
 8001d4c:	08001dc3 	.word	0x08001dc3
 8001d50:	08001dc3 	.word	0x08001dc3
 8001d54:	08001dc3 	.word	0x08001dc3
 8001d58:	08001d71 	.word	0x08001d71
 8001d5c:	08001d85 	.word	0x08001d85
 8001d60:	4a79      	ldr	r2, [pc, #484]	; (8001f48 <HAL_GPIO_Init+0x2b4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d66:	e02c      	b.n	8001dc2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	623b      	str	r3, [r7, #32]
          break;
 8001d6e:	e029      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	3304      	adds	r3, #4
 8001d76:	623b      	str	r3, [r7, #32]
          break;
 8001d78:	e024      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	3308      	adds	r3, #8
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e01f      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	330c      	adds	r3, #12
 8001d8a:	623b      	str	r3, [r7, #32]
          break;
 8001d8c:	e01a      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d102      	bne.n	8001d9c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d96:	2304      	movs	r3, #4
 8001d98:	623b      	str	r3, [r7, #32]
          break;
 8001d9a:	e013      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d105      	bne.n	8001db0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001da4:	2308      	movs	r3, #8
 8001da6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	611a      	str	r2, [r3, #16]
          break;
 8001dae:	e009      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001db0:	2308      	movs	r3, #8
 8001db2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69fa      	ldr	r2, [r7, #28]
 8001db8:	615a      	str	r2, [r3, #20]
          break;
 8001dba:	e003      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x130>
          break;
 8001dc2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2bff      	cmp	r3, #255	; 0xff
 8001dc8:	d801      	bhi.n	8001dce <HAL_GPIO_Init+0x13a>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	e001      	b.n	8001dd2 <HAL_GPIO_Init+0x13e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3304      	adds	r3, #4
 8001dd2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	2bff      	cmp	r3, #255	; 0xff
 8001dd8:	d802      	bhi.n	8001de0 <HAL_GPIO_Init+0x14c>
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	e002      	b.n	8001de6 <HAL_GPIO_Init+0x152>
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	3b08      	subs	r3, #8
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	210f      	movs	r1, #15
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	43db      	mvns	r3, r3
 8001df6:	401a      	ands	r2, r3
 8001df8:	6a39      	ldr	r1, [r7, #32]
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	fa01 f303 	lsl.w	r3, r1, r3
 8001e00:	431a      	orrs	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f000 80b1 	beq.w	8001f76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e14:	4b4d      	ldr	r3, [pc, #308]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a4c      	ldr	r2, [pc, #304]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e1a:	f043 0301 	orr.w	r3, r3, #1
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b4a      	ldr	r3, [pc, #296]	; (8001f4c <HAL_GPIO_Init+0x2b8>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e2c:	4a48      	ldr	r2, [pc, #288]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	009b      	lsls	r3, r3, #2
 8001e42:	220f      	movs	r2, #15
 8001e44:	fa02 f303 	lsl.w	r3, r2, r3
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a40      	ldr	r2, [pc, #256]	; (8001f54 <HAL_GPIO_Init+0x2c0>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_GPIO_Init+0x1ec>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a3f      	ldr	r2, [pc, #252]	; (8001f58 <HAL_GPIO_Init+0x2c4>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1e8>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <HAL_GPIO_Init+0x2c8>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1e4>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a3d      	ldr	r2, [pc, #244]	; (8001f60 <HAL_GPIO_Init+0x2cc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1e0>
 8001e70:	2303      	movs	r3, #3
 8001e72:	e006      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e74:	2304      	movs	r3, #4
 8001e76:	e004      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e78:	2302      	movs	r3, #2
 8001e7a:	e002      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e000      	b.n	8001e82 <HAL_GPIO_Init+0x1ee>
 8001e80:	2300      	movs	r3, #0
 8001e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e84:	f002 0203 	and.w	r2, r2, #3
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	4093      	lsls	r3, r2
 8001e8c:	68fa      	ldr	r2, [r7, #12]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e92:	492f      	ldr	r1, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x2bc>)
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	3302      	adds	r3, #2
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001eac:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	492c      	ldr	r1, [pc, #176]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	600b      	str	r3, [r1, #0]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001eba:	4b2a      	ldr	r3, [pc, #168]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4928      	ldr	r1, [pc, #160]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d006      	beq.n	8001ee2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ed4:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	4922      	ldr	r1, [pc, #136]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	604b      	str	r3, [r1, #4]
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	685a      	ldr	r2, [r3, #4]
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	491e      	ldr	r1, [pc, #120]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d006      	beq.n	8001f0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001efe:	689a      	ldr	r2, [r3, #8]
 8001f00:	4918      	ldr	r1, [pc, #96]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	608b      	str	r3, [r1, #8]
 8001f08:	e006      	b.n	8001f18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	689a      	ldr	r2, [r3, #8]
 8001f0e:	69bb      	ldr	r3, [r7, #24]
 8001f10:	43db      	mvns	r3, r3
 8001f12:	4914      	ldr	r1, [pc, #80]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f14:	4013      	ands	r3, r2
 8001f16:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d021      	beq.n	8001f68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f26:	68da      	ldr	r2, [r3, #12]
 8001f28:	490e      	ldr	r1, [pc, #56]	; (8001f64 <HAL_GPIO_Init+0x2d0>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	60cb      	str	r3, [r1, #12]
 8001f30:	e021      	b.n	8001f76 <HAL_GPIO_Init+0x2e2>
 8001f32:	bf00      	nop
 8001f34:	10320000 	.word	0x10320000
 8001f38:	10310000 	.word	0x10310000
 8001f3c:	10220000 	.word	0x10220000
 8001f40:	10210000 	.word	0x10210000
 8001f44:	10120000 	.word	0x10120000
 8001f48:	10110000 	.word	0x10110000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	40010800 	.word	0x40010800
 8001f58:	40010c00 	.word	0x40010c00
 8001f5c:	40011000 	.word	0x40011000
 8001f60:	40011400 	.word	0x40011400
 8001f64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f68:	4b0b      	ldr	r3, [pc, #44]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	69bb      	ldr	r3, [r7, #24]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	4909      	ldr	r1, [pc, #36]	; (8001f98 <HAL_GPIO_Init+0x304>)
 8001f72:	4013      	ands	r3, r2
 8001f74:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	3301      	adds	r3, #1
 8001f7a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f47f ae8e 	bne.w	8001ca8 <HAL_GPIO_Init+0x14>
  }
}
 8001f8c:	bf00      	nop
 8001f8e:	bf00      	nop
 8001f90:	372c      	adds	r7, #44	; 0x2c
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr
 8001f98:	40010400 	.word	0x40010400

08001f9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	460b      	mov	r3, r1
 8001fa6:	807b      	strh	r3, [r7, #2]
 8001fa8:	4613      	mov	r3, r2
 8001faa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001fac:	787b      	ldrb	r3, [r7, #1]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d003      	beq.n	8001fba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fb2:	887a      	ldrh	r2, [r7, #2]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fb8:	e003      	b.n	8001fc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fba:	887b      	ldrh	r3, [r7, #2]
 8001fbc:	041a      	lsls	r2, r3, #16
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	611a      	str	r2, [r3, #16]
}
 8001fc2:	bf00      	nop
 8001fc4:	370c      	adds	r7, #12
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bc80      	pop	{r7}
 8001fca:	4770      	bx	lr

08001fcc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fde:	887a      	ldrh	r2, [r7, #2]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	041a      	lsls	r2, r3, #16
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	43d9      	mvns	r1, r3
 8001fea:	887b      	ldrh	r3, [r7, #2]
 8001fec:	400b      	ands	r3, r1
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	611a      	str	r2, [r3, #16]
}
 8001ff4:	bf00      	nop
 8001ff6:	3714      	adds	r7, #20
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bc80      	pop	{r7}
 8001ffc:	4770      	bx	lr
	...

08002000 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800200c:	695a      	ldr	r2, [r3, #20]
 800200e:	88fb      	ldrh	r3, [r7, #6]
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d006      	beq.n	8002024 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002016:	4a05      	ldr	r2, [pc, #20]	; (800202c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002018:	88fb      	ldrh	r3, [r7, #6]
 800201a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	4618      	mov	r0, r3
 8002020:	f000 f806 	bl	8002030 <HAL_GPIO_EXTI_Callback>
  }
}
 8002024:	bf00      	nop
 8002026:	3708      	adds	r7, #8
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40010400 	.word	0x40010400

08002030 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e12b      	b.n	80022ae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d106      	bne.n	8002070 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff fa10 	bl	8001490 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2224      	movs	r2, #36	; 0x24
 8002074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f022 0201 	bic.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002096:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020a6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020a8:	f001 fba0 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 80020ac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	4a81      	ldr	r2, [pc, #516]	; (80022b8 <HAL_I2C_Init+0x274>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d807      	bhi.n	80020c8 <HAL_I2C_Init+0x84>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4a80      	ldr	r2, [pc, #512]	; (80022bc <HAL_I2C_Init+0x278>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	bf94      	ite	ls
 80020c0:	2301      	movls	r3, #1
 80020c2:	2300      	movhi	r3, #0
 80020c4:	b2db      	uxtb	r3, r3
 80020c6:	e006      	b.n	80020d6 <HAL_I2C_Init+0x92>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4a7d      	ldr	r2, [pc, #500]	; (80022c0 <HAL_I2C_Init+0x27c>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	bf94      	ite	ls
 80020d0:	2301      	movls	r3, #1
 80020d2:	2300      	movhi	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e0e7      	b.n	80022ae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	4a78      	ldr	r2, [pc, #480]	; (80022c4 <HAL_I2C_Init+0x280>)
 80020e2:	fba2 2303 	umull	r2, r3, r2, r3
 80020e6:	0c9b      	lsrs	r3, r3, #18
 80020e8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68ba      	ldr	r2, [r7, #8]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	4a6a      	ldr	r2, [pc, #424]	; (80022b8 <HAL_I2C_Init+0x274>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d802      	bhi.n	8002118 <HAL_I2C_Init+0xd4>
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	3301      	adds	r3, #1
 8002116:	e009      	b.n	800212c <HAL_I2C_Init+0xe8>
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800211e:	fb02 f303 	mul.w	r3, r2, r3
 8002122:	4a69      	ldr	r2, [pc, #420]	; (80022c8 <HAL_I2C_Init+0x284>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	099b      	lsrs	r3, r3, #6
 800212a:	3301      	adds	r3, #1
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	430b      	orrs	r3, r1
 8002132:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800213e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	495c      	ldr	r1, [pc, #368]	; (80022b8 <HAL_I2C_Init+0x274>)
 8002148:	428b      	cmp	r3, r1
 800214a:	d819      	bhi.n	8002180 <HAL_I2C_Init+0x13c>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	1e59      	subs	r1, r3, #1
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	005b      	lsls	r3, r3, #1
 8002156:	fbb1 f3f3 	udiv	r3, r1, r3
 800215a:	1c59      	adds	r1, r3, #1
 800215c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002160:	400b      	ands	r3, r1
 8002162:	2b00      	cmp	r3, #0
 8002164:	d00a      	beq.n	800217c <HAL_I2C_Init+0x138>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1e59      	subs	r1, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	005b      	lsls	r3, r3, #1
 8002170:	fbb1 f3f3 	udiv	r3, r1, r3
 8002174:	3301      	adds	r3, #1
 8002176:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800217a:	e051      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 800217c:	2304      	movs	r3, #4
 800217e:	e04f      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d111      	bne.n	80021ac <HAL_I2C_Init+0x168>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	1e58      	subs	r0, r3, #1
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6859      	ldr	r1, [r3, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	440b      	add	r3, r1
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	bf0c      	ite	eq
 80021a4:	2301      	moveq	r3, #1
 80021a6:	2300      	movne	r3, #0
 80021a8:	b2db      	uxtb	r3, r3
 80021aa:	e012      	b.n	80021d2 <HAL_I2C_Init+0x18e>
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	1e58      	subs	r0, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6859      	ldr	r1, [r3, #4]
 80021b4:	460b      	mov	r3, r1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	440b      	add	r3, r1
 80021ba:	0099      	lsls	r1, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	fbb0 f3f3 	udiv	r3, r0, r3
 80021c2:	3301      	adds	r3, #1
 80021c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	bf0c      	ite	eq
 80021cc:	2301      	moveq	r3, #1
 80021ce:	2300      	movne	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <HAL_I2C_Init+0x196>
 80021d6:	2301      	movs	r3, #1
 80021d8:	e022      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d10e      	bne.n	8002200 <HAL_I2C_Init+0x1bc>
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e58      	subs	r0, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6859      	ldr	r1, [r3, #4]
 80021ea:	460b      	mov	r3, r1
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	440b      	add	r3, r1
 80021f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80021f4:	3301      	adds	r3, #1
 80021f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021fe:	e00f      	b.n	8002220 <HAL_I2C_Init+0x1dc>
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	1e58      	subs	r0, r3, #1
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	460b      	mov	r3, r1
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	440b      	add	r3, r1
 800220e:	0099      	lsls	r1, r3, #2
 8002210:	440b      	add	r3, r1
 8002212:	fbb0 f3f3 	udiv	r3, r0, r3
 8002216:	3301      	adds	r3, #1
 8002218:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800221c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	6809      	ldr	r1, [r1, #0]
 8002224:	4313      	orrs	r3, r2
 8002226:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	69da      	ldr	r2, [r3, #28]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800224e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	6911      	ldr	r1, [r2, #16]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	68d2      	ldr	r2, [r2, #12]
 800225a:	4311      	orrs	r1, r2
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	430b      	orrs	r3, r1
 8002262:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	695a      	ldr	r2, [r3, #20]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	431a      	orrs	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2200      	movs	r2, #0
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2220      	movs	r2, #32
 800229a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2200      	movs	r2, #0
 80022a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	000186a0 	.word	0x000186a0
 80022bc:	001e847f 	.word	0x001e847f
 80022c0:	003d08ff 	.word	0x003d08ff
 80022c4:	431bde83 	.word	0x431bde83
 80022c8:	10624dd3 	.word	0x10624dd3

080022cc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	4608      	mov	r0, r1
 80022d6:	4611      	mov	r1, r2
 80022d8:	461a      	mov	r2, r3
 80022da:	4603      	mov	r3, r0
 80022dc:	817b      	strh	r3, [r7, #10]
 80022de:	460b      	mov	r3, r1
 80022e0:	813b      	strh	r3, [r7, #8]
 80022e2:	4613      	mov	r3, r2
 80022e4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80022e6:	f7ff fbc7 	bl	8001a78 <HAL_GetTick>
 80022ea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	f040 80d9 	bne.w	80024ac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	9300      	str	r3, [sp, #0]
 80022fe:	2319      	movs	r3, #25
 8002300:	2201      	movs	r2, #1
 8002302:	496d      	ldr	r1, [pc, #436]	; (80024b8 <HAL_I2C_Mem_Write+0x1ec>)
 8002304:	68f8      	ldr	r0, [r7, #12]
 8002306:	f000 fcc1 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002310:	2302      	movs	r3, #2
 8002312:	e0cc      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800231a:	2b01      	cmp	r3, #1
 800231c:	d101      	bne.n	8002322 <HAL_I2C_Mem_Write+0x56>
 800231e:	2302      	movs	r3, #2
 8002320:	e0c5      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2201      	movs	r2, #1
 8002326:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d007      	beq.n	8002348 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002356:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2221      	movs	r2, #33	; 0x21
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002378:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800237e:	b29a      	uxth	r2, r3
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	4a4d      	ldr	r2, [pc, #308]	; (80024bc <HAL_I2C_Mem_Write+0x1f0>)
 8002388:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238a:	88f8      	ldrh	r0, [r7, #6]
 800238c:	893a      	ldrh	r2, [r7, #8]
 800238e:	8979      	ldrh	r1, [r7, #10]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	4603      	mov	r3, r0
 800239a:	68f8      	ldr	r0, [r7, #12]
 800239c:	f000 faf8 	bl	8002990 <I2C_RequestMemoryWrite>
 80023a0:	4603      	mov	r3, r0
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d052      	beq.n	800244c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e081      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fd42 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00d      	beq.n	80023d6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023be:	2b04      	cmp	r3, #4
 80023c0:	d107      	bne.n	80023d2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e06b      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023da:	781a      	ldrb	r2, [r3, #0]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	3b01      	subs	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29a      	uxth	r2, r3
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695b      	ldr	r3, [r3, #20]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b04      	cmp	r3, #4
 8002412:	d11b      	bne.n	800244c <HAL_I2C_Mem_Write+0x180>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002418:	2b00      	cmp	r3, #0
 800241a:	d017      	beq.n	800244c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002420:	781a      	ldrb	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002436:	3b01      	subs	r3, #1
 8002438:	b29a      	uxth	r2, r3
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002442:	b29b      	uxth	r3, r3
 8002444:	3b01      	subs	r3, #1
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1aa      	bne.n	80023aa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002454:	697a      	ldr	r2, [r7, #20]
 8002456:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 fd2e 	bl	8002eba <I2C_WaitOnBTFFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00d      	beq.n	8002480 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	2b04      	cmp	r3, #4
 800246a:	d107      	bne.n	800247c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800247a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	e016      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800248e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2220      	movs	r2, #32
 8002494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80024a8:	2300      	movs	r3, #0
 80024aa:	e000      	b.n	80024ae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80024ac:	2302      	movs	r3, #2
  }
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3718      	adds	r7, #24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	00100002 	.word	0x00100002
 80024bc:	ffff0000 	.word	0xffff0000

080024c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08c      	sub	sp, #48	; 0x30
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	4608      	mov	r0, r1
 80024ca:	4611      	mov	r1, r2
 80024cc:	461a      	mov	r2, r3
 80024ce:	4603      	mov	r3, r0
 80024d0:	817b      	strh	r3, [r7, #10]
 80024d2:	460b      	mov	r3, r1
 80024d4:	813b      	strh	r3, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80024da:	2300      	movs	r3, #0
 80024dc:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80024de:	f7ff facb 	bl	8001a78 <HAL_GetTick>
 80024e2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	2b20      	cmp	r3, #32
 80024ee:	f040 8244 	bne.w	800297a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	9300      	str	r3, [sp, #0]
 80024f6:	2319      	movs	r3, #25
 80024f8:	2201      	movs	r2, #1
 80024fa:	4982      	ldr	r1, [pc, #520]	; (8002704 <HAL_I2C_Mem_Read+0x244>)
 80024fc:	68f8      	ldr	r0, [r7, #12]
 80024fe:	f000 fbc5 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002508:	2302      	movs	r3, #2
 800250a:	e237      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_I2C_Mem_Read+0x5a>
 8002516:	2302      	movs	r3, #2
 8002518:	e230      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b01      	cmp	r3, #1
 800252e:	d007      	beq.n	8002540 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f042 0201 	orr.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800254e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2222      	movs	r2, #34	; 0x22
 8002554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	2240      	movs	r2, #64	; 0x40
 800255c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	2200      	movs	r2, #0
 8002564:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800256a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002570:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002576:	b29a      	uxth	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4a62      	ldr	r2, [pc, #392]	; (8002708 <HAL_I2C_Mem_Read+0x248>)
 8002580:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002582:	88f8      	ldrh	r0, [r7, #6]
 8002584:	893a      	ldrh	r2, [r7, #8]
 8002586:	8979      	ldrh	r1, [r7, #10]
 8002588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800258e:	9300      	str	r3, [sp, #0]
 8002590:	4603      	mov	r3, r0
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f000 fa92 	bl	8002abc <I2C_RequestMemoryRead>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e1ec      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d113      	bne.n	80025d2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025aa:	2300      	movs	r3, #0
 80025ac:	61fb      	str	r3, [r7, #28]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	695b      	ldr	r3, [r3, #20]
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ce:	601a      	str	r2, [r3, #0]
 80025d0:	e1c0      	b.n	8002954 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d11e      	bne.n	8002618 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80025ea:	b672      	cpsid	i
}
 80025ec:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ee:	2300      	movs	r3, #0
 80025f0:	61bb      	str	r3, [r7, #24]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	695b      	ldr	r3, [r3, #20]
 80025f8:	61bb      	str	r3, [r7, #24]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002612:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002614:	b662      	cpsie	i
}
 8002616:	e035      	b.n	8002684 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	2b02      	cmp	r3, #2
 800261e:	d11e      	bne.n	800265e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800262e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002630:	b672      	cpsid	i
}
 8002632:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	617b      	str	r3, [r7, #20]
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	699b      	ldr	r3, [r3, #24]
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002658:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800265a:	b662      	cpsie	i
}
 800265c:	e012      	b.n	8002684 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800266c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	695b      	ldr	r3, [r3, #20]
 8002678:	613b      	str	r3, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	699b      	ldr	r3, [r3, #24]
 8002680:	613b      	str	r3, [r7, #16]
 8002682:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002684:	e166      	b.n	8002954 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800268a:	2b03      	cmp	r3, #3
 800268c:	f200 811f 	bhi.w	80028ce <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002694:	2b01      	cmp	r3, #1
 8002696:	d123      	bne.n	80026e0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	f000 fc4d 	bl	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e167      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	691a      	ldr	r2, [r3, #16]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026be:	1c5a      	adds	r2, r3, #1
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	3b01      	subs	r3, #1
 80026d8:	b29a      	uxth	r2, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80026de:	e139      	b.n	8002954 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d152      	bne.n	800278e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ee:	2200      	movs	r2, #0
 80026f0:	4906      	ldr	r1, [pc, #24]	; (800270c <HAL_I2C_Mem_Read+0x24c>)
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f000 faca 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d008      	beq.n	8002710 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e13c      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
 8002702:	bf00      	nop
 8002704:	00100002 	.word	0x00100002
 8002708:	ffff0000 	.word	0xffff0000
 800270c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002710:	b672      	cpsid	i
}
 8002712:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	691a      	ldr	r2, [r3, #16]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272e:	b2d2      	uxtb	r2, r2
 8002730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	1c5a      	adds	r2, r3, #1
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002740:	3b01      	subs	r3, #1
 8002742:	b29a      	uxth	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	3b01      	subs	r3, #1
 8002750:	b29a      	uxth	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002756:	b662      	cpsie	i
}
 8002758:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	3b01      	subs	r3, #1
 8002786:	b29a      	uxth	r2, r3
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800278c:	e0e2      	b.n	8002954 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002794:	2200      	movs	r2, #0
 8002796:	497b      	ldr	r1, [pc, #492]	; (8002984 <HAL_I2C_Mem_Read+0x4c4>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 fa77 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0e9      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80027b8:	b672      	cpsid	i
}
 80027ba:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	b2d2      	uxtb	r2, r2
 80027c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ce:	1c5a      	adds	r2, r3, #1
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027d8:	3b01      	subs	r3, #1
 80027da:	b29a      	uxth	r2, r3
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	3b01      	subs	r3, #1
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80027ee:	4b66      	ldr	r3, [pc, #408]	; (8002988 <HAL_I2C_Mem_Read+0x4c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	08db      	lsrs	r3, r3, #3
 80027f4:	4a65      	ldr	r2, [pc, #404]	; (800298c <HAL_I2C_Mem_Read+0x4cc>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0a1a      	lsrs	r2, r3, #8
 80027fc:	4613      	mov	r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	4413      	add	r3, r2
 8002802:	00da      	lsls	r2, r3, #3
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002808:	6a3b      	ldr	r3, [r7, #32]
 800280a:	3b01      	subs	r3, #1
 800280c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d118      	bne.n	8002846 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2220      	movs	r2, #32
 800281e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282e:	f043 0220 	orr.w	r2, r3, #32
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002836:	b662      	cpsie	i
}
 8002838:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2200      	movs	r2, #0
 800283e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e09a      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b04      	cmp	r3, #4
 8002852:	d1d9      	bne.n	8002808 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002862:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	691a      	ldr	r2, [r3, #16]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	1c5a      	adds	r2, r3, #1
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	3b01      	subs	r3, #1
 8002882:	b29a      	uxth	r2, r3
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002896:	b662      	cpsie	i
}
 8002898:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	691a      	ldr	r2, [r3, #16]
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	b2d2      	uxtb	r2, r2
 80028a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028cc:	e042      	b.n	8002954 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80028d2:	68f8      	ldr	r0, [r7, #12]
 80028d4:	f000 fb32 	bl	8002f3c <I2C_WaitOnRXNEFlagUntilTimeout>
 80028d8:	4603      	mov	r3, r0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d001      	beq.n	80028e2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e04c      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691a      	ldr	r2, [r3, #16]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	b2d2      	uxtb	r2, r2
 80028ee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028fe:	3b01      	subs	r3, #1
 8002900:	b29a      	uxth	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800290a:	b29b      	uxth	r3, r3
 800290c:	3b01      	subs	r3, #1
 800290e:	b29a      	uxth	r2, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0304 	and.w	r3, r3, #4
 800291e:	2b04      	cmp	r3, #4
 8002920:	d118      	bne.n	8002954 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	691a      	ldr	r2, [r3, #16]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292c:	b2d2      	uxtb	r2, r2
 800292e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002934:	1c5a      	adds	r2, r3, #1
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	3b01      	subs	r3, #1
 8002940:	b29a      	uxth	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800294a:	b29b      	uxth	r3, r3
 800294c:	3b01      	subs	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002958:	2b00      	cmp	r3, #0
 800295a:	f47f ae94 	bne.w	8002686 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2220      	movs	r2, #32
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	e000      	b.n	800297c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800297a:	2302      	movs	r3, #2
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3728      	adds	r7, #40	; 0x28
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	00010004 	.word	0x00010004
 8002988:	20000000 	.word	0x20000000
 800298c:	14f8b589 	.word	0x14f8b589

08002990 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b088      	sub	sp, #32
 8002994:	af02      	add	r7, sp, #8
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	4608      	mov	r0, r1
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	4603      	mov	r3, r0
 80029a0:	817b      	strh	r3, [r7, #10]
 80029a2:	460b      	mov	r3, r1
 80029a4:	813b      	strh	r3, [r7, #8]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029b8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	9300      	str	r3, [sp, #0]
 80029be:	6a3b      	ldr	r3, [r7, #32]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029c6:	68f8      	ldr	r0, [r7, #12]
 80029c8:	f000 f960 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00d      	beq.n	80029ee <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e0:	d103      	bne.n	80029ea <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029e8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e05f      	b.n	8002aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ee:	897b      	ldrh	r3, [r7, #10]
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029fc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	6a3a      	ldr	r2, [r7, #32]
 8002a02:	492d      	ldr	r1, [pc, #180]	; (8002ab8 <I2C_RequestMemoryWrite+0x128>)
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 f998 	bl	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e04c      	b.n	8002aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a14:	2300      	movs	r3, #0
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	617b      	str	r3, [r7, #20]
 8002a28:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a2c:	6a39      	ldr	r1, [r7, #32]
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fa02 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00d      	beq.n	8002a56 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	d107      	bne.n	8002a52 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a50:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e02b      	b.n	8002aae <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a56:	88fb      	ldrh	r3, [r7, #6]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d105      	bne.n	8002a68 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a5c:	893b      	ldrh	r3, [r7, #8]
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	611a      	str	r2, [r3, #16]
 8002a66:	e021      	b.n	8002aac <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a68:	893b      	ldrh	r3, [r7, #8]
 8002a6a:	0a1b      	lsrs	r3, r3, #8
 8002a6c:	b29b      	uxth	r3, r3
 8002a6e:	b2da      	uxtb	r2, r3
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a78:	6a39      	ldr	r1, [r7, #32]
 8002a7a:	68f8      	ldr	r0, [r7, #12]
 8002a7c:	f000 f9dc 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d00d      	beq.n	8002aa2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d107      	bne.n	8002a9e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a9c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e005      	b.n	8002aae <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aa2:	893b      	ldrh	r3, [r7, #8]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	00010002 	.word	0x00010002

08002abc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b088      	sub	sp, #32
 8002ac0:	af02      	add	r7, sp, #8
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	4608      	mov	r0, r1
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	461a      	mov	r2, r3
 8002aca:	4603      	mov	r3, r0
 8002acc:	817b      	strh	r3, [r7, #10]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	813b      	strh	r3, [r7, #8]
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ae4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af8:	9300      	str	r3, [sp, #0]
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b02:	68f8      	ldr	r0, [r7, #12]
 8002b04:	f000 f8c2 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00d      	beq.n	8002b2a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b1c:	d103      	bne.n	8002b26 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e0aa      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b2a:	897b      	ldrh	r3, [r7, #10]
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3c:	6a3a      	ldr	r2, [r7, #32]
 8002b3e:	4952      	ldr	r1, [pc, #328]	; (8002c88 <I2C_RequestMemoryRead+0x1cc>)
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f000 f8fa 	bl	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e097      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	617b      	str	r3, [r7, #20]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	6a39      	ldr	r1, [r7, #32]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f964 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d107      	bne.n	8002b8e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e076      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b92:	88fb      	ldrh	r3, [r7, #6]
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d105      	bne.n	8002ba4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b98:	893b      	ldrh	r3, [r7, #8]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	611a      	str	r2, [r3, #16]
 8002ba2:	e021      	b.n	8002be8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002ba4:	893b      	ldrh	r3, [r7, #8]
 8002ba6:	0a1b      	lsrs	r3, r3, #8
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	b2da      	uxtb	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	f000 f93e 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d00d      	beq.n	8002bde <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d107      	bne.n	8002bda <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e050      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002bde:	893b      	ldrh	r3, [r7, #8]
 8002be0:	b2da      	uxtb	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	6a39      	ldr	r1, [r7, #32]
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f000 f923 	bl	8002e38 <I2C_WaitOnTXEFlagUntilTimeout>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00d      	beq.n	8002c14 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	2b04      	cmp	r3, #4
 8002bfe:	d107      	bne.n	8002c10 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c0e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e035      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c22:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	6a3b      	ldr	r3, [r7, #32]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f82b 	bl	8002c8c <I2C_WaitOnFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00d      	beq.n	8002c58 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c4a:	d103      	bne.n	8002c54 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e013      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c58:	897b      	ldrh	r3, [r7, #10]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	b2da      	uxtb	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6a:	6a3a      	ldr	r2, [r7, #32]
 8002c6c:	4906      	ldr	r1, [pc, #24]	; (8002c88 <I2C_RequestMemoryRead+0x1cc>)
 8002c6e:	68f8      	ldr	r0, [r7, #12]
 8002c70:	f000 f863 	bl	8002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d001      	beq.n	8002c7e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e000      	b.n	8002c80 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3718      	adds	r7, #24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	00010002 	.word	0x00010002

08002c8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	60f8      	str	r0, [r7, #12]
 8002c94:	60b9      	str	r1, [r7, #8]
 8002c96:	603b      	str	r3, [r7, #0]
 8002c98:	4613      	mov	r3, r2
 8002c9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c9c:	e025      	b.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca4:	d021      	beq.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ca6:	f7fe fee7 	bl	8001a78 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	69bb      	ldr	r3, [r7, #24]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d302      	bcc.n	8002cbc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d116      	bne.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f043 0220 	orr.w	r2, r3, #32
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e023      	b.n	8002d32 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	0c1b      	lsrs	r3, r3, #16
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d10d      	bne.n	8002d10 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	43da      	mvns	r2, r3
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bf0c      	ite	eq
 8002d06:	2301      	moveq	r3, #1
 8002d08:	2300      	movne	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	e00c      	b.n	8002d2a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	43da      	mvns	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	bf0c      	ite	eq
 8002d22:	2301      	moveq	r3, #1
 8002d24:	2300      	movne	r3, #0
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
 8002d2a:	79fb      	ldrb	r3, [r7, #7]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d0b6      	beq.n	8002c9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002d30:	2300      	movs	r3, #0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b084      	sub	sp, #16
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	60f8      	str	r0, [r7, #12]
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d48:	e051      	b.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d58:	d123      	bne.n	8002da2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d68:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d72:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f043 0204 	orr.w	r2, r3, #4
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e046      	b.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d021      	beq.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7fe fe65 	bl	8001a78 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2220      	movs	r2, #32
 8002dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	f043 0220 	orr.w	r2, r3, #32
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e020      	b.n	8002e30 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10c      	bne.n	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e00b      	b.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d18d      	bne.n	8002d4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3710      	adds	r7, #16
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bd80      	pop	{r7, pc}

08002e38 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b084      	sub	sp, #16
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e44:	e02d      	b.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8ce 	bl	8002fe8 <I2C_IsAcknowledgeFailed>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d001      	beq.n	8002e56 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e02d      	b.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5c:	d021      	beq.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e5e:	f7fe fe0b 	bl	8001a78 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d302      	bcc.n	8002e74 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d116      	bne.n	8002ea2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2220      	movs	r2, #32
 8002e7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f043 0220 	orr.w	r2, r3, #32
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e007      	b.n	8002eb2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eac:	2b80      	cmp	r3, #128	; 0x80
 8002eae:	d1ca      	bne.n	8002e46 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	60f8      	str	r0, [r7, #12]
 8002ec2:	60b9      	str	r1, [r7, #8]
 8002ec4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ec6:	e02d      	b.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f88d 	bl	8002fe8 <I2C_IsAcknowledgeFailed>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e02d      	b.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d021      	beq.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fe fdca 	bl	8001a78 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d116      	bne.n	8002f24 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e007      	b.n	8002f34 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	f003 0304 	and.w	r3, r3, #4
 8002f2e:	2b04      	cmp	r3, #4
 8002f30:	d1ca      	bne.n	8002ec8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002f48:	e042      	b.n	8002fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	695b      	ldr	r3, [r3, #20]
 8002f50:	f003 0310 	and.w	r3, r3, #16
 8002f54:	2b10      	cmp	r3, #16
 8002f56:	d119      	bne.n	8002f8c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f06f 0210 	mvn.w	r2, #16
 8002f60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2220      	movs	r2, #32
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e029      	b.n	8002fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f8c:	f7fe fd74 	bl	8001a78 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	68ba      	ldr	r2, [r7, #8]
 8002f98:	429a      	cmp	r2, r3
 8002f9a:	d302      	bcc.n	8002fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d116      	bne.n	8002fd0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	2220      	movs	r2, #32
 8002fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f043 0220 	orr.w	r2, r3, #32
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e007      	b.n	8002fe0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d1b5      	bne.n	8002f4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3710      	adds	r7, #16
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffe:	d11b      	bne.n	8003038 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003008:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2200      	movs	r2, #0
 800300e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2220      	movs	r2, #32
 8003014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003024:	f043 0204 	orr.w	r2, r3, #4
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d101      	bne.n	8003056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e272      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	f000 8087 	beq.w	8003172 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003064:	4b92      	ldr	r3, [pc, #584]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f003 030c 	and.w	r3, r3, #12
 800306c:	2b04      	cmp	r3, #4
 800306e:	d00c      	beq.n	800308a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003070:	4b8f      	ldr	r3, [pc, #572]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f003 030c 	and.w	r3, r3, #12
 8003078:	2b08      	cmp	r3, #8
 800307a:	d112      	bne.n	80030a2 <HAL_RCC_OscConfig+0x5e>
 800307c:	4b8c      	ldr	r3, [pc, #560]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003088:	d10b      	bne.n	80030a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308a:	4b89      	ldr	r3, [pc, #548]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d06c      	beq.n	8003170 <HAL_RCC_OscConfig+0x12c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d168      	bne.n	8003170 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e24c      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x76>
 80030ac:	4b80      	ldr	r3, [pc, #512]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a7f      	ldr	r2, [pc, #508]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b6:	6013      	str	r3, [r2, #0]
 80030b8:	e02e      	b.n	8003118 <HAL_RCC_OscConfig+0xd4>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x98>
 80030c2:	4b7b      	ldr	r3, [pc, #492]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a7a      	ldr	r2, [pc, #488]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030cc:	6013      	str	r3, [r2, #0]
 80030ce:	4b78      	ldr	r3, [pc, #480]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a77      	ldr	r2, [pc, #476]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	e01d      	b.n	8003118 <HAL_RCC_OscConfig+0xd4>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e4:	d10c      	bne.n	8003100 <HAL_RCC_OscConfig+0xbc>
 80030e6:	4b72      	ldr	r3, [pc, #456]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a71      	ldr	r2, [pc, #452]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030f0:	6013      	str	r3, [r2, #0]
 80030f2:	4b6f      	ldr	r3, [pc, #444]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a6e      	ldr	r2, [pc, #440]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80030f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	e00b      	b.n	8003118 <HAL_RCC_OscConfig+0xd4>
 8003100:	4b6b      	ldr	r3, [pc, #428]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a6a      	ldr	r2, [pc, #424]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800310a:	6013      	str	r3, [r2, #0]
 800310c:	4b68      	ldr	r3, [pc, #416]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a67      	ldr	r2, [pc, #412]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003116:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d013      	beq.n	8003148 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003120:	f7fe fcaa 	bl	8001a78 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003128:	f7fe fca6 	bl	8001a78 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b64      	cmp	r3, #100	; 0x64
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e200      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800313a:	4b5d      	ldr	r3, [pc, #372]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0xe4>
 8003146:	e014      	b.n	8003172 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003148:	f7fe fc96 	bl	8001a78 <HAL_GetTick>
 800314c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314e:	e008      	b.n	8003162 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003150:	f7fe fc92 	bl	8001a78 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d901      	bls.n	8003162 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e1ec      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003162:	4b53      	ldr	r3, [pc, #332]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1f0      	bne.n	8003150 <HAL_RCC_OscConfig+0x10c>
 800316e:	e000      	b.n	8003172 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b00      	cmp	r3, #0
 800317c:	d063      	beq.n	8003246 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317e:	4b4c      	ldr	r3, [pc, #304]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f003 030c 	and.w	r3, r3, #12
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00b      	beq.n	80031a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800318a:	4b49      	ldr	r3, [pc, #292]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 030c 	and.w	r3, r3, #12
 8003192:	2b08      	cmp	r3, #8
 8003194:	d11c      	bne.n	80031d0 <HAL_RCC_OscConfig+0x18c>
 8003196:	4b46      	ldr	r3, [pc, #280]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <HAL_RCC_OscConfig+0x176>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	691b      	ldr	r3, [r3, #16]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d001      	beq.n	80031ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e1c0      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ba:	4b3d      	ldr	r3, [pc, #244]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695b      	ldr	r3, [r3, #20]
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	4939      	ldr	r1, [pc, #228]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ce:	e03a      	b.n	8003246 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d020      	beq.n	800321a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d8:	4b36      	ldr	r3, [pc, #216]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fc4b 	bl	8001a78 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e6:	f7fe fc47 	bl	8001a78 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e1a1      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031f8:	4b2d      	ldr	r3, [pc, #180]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003204:	4b2a      	ldr	r3, [pc, #168]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	695b      	ldr	r3, [r3, #20]
 8003210:	00db      	lsls	r3, r3, #3
 8003212:	4927      	ldr	r1, [pc, #156]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 8003214:	4313      	orrs	r3, r2
 8003216:	600b      	str	r3, [r1, #0]
 8003218:	e015      	b.n	8003246 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321a:	4b26      	ldr	r3, [pc, #152]	; (80032b4 <HAL_RCC_OscConfig+0x270>)
 800321c:	2200      	movs	r2, #0
 800321e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003220:	f7fe fc2a 	bl	8001a78 <HAL_GetTick>
 8003224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003226:	e008      	b.n	800323a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003228:	f7fe fc26 	bl	8001a78 <HAL_GetTick>
 800322c:	4602      	mov	r2, r0
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	1ad3      	subs	r3, r2, r3
 8003232:	2b02      	cmp	r3, #2
 8003234:	d901      	bls.n	800323a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003236:	2303      	movs	r3, #3
 8003238:	e180      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800323a:	4b1d      	ldr	r3, [pc, #116]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f0      	bne.n	8003228 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d03a      	beq.n	80032c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d019      	beq.n	800328e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800325a:	4b17      	ldr	r3, [pc, #92]	; (80032b8 <HAL_RCC_OscConfig+0x274>)
 800325c:	2201      	movs	r2, #1
 800325e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003260:	f7fe fc0a 	bl	8001a78 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fc06 	bl	8001a78 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e160      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800327a:	4b0d      	ldr	r3, [pc, #52]	; (80032b0 <HAL_RCC_OscConfig+0x26c>)
 800327c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003286:	2001      	movs	r0, #1
 8003288:	f000 fb08 	bl	800389c <RCC_Delay>
 800328c:	e01c      	b.n	80032c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_OscConfig+0x274>)
 8003290:	2200      	movs	r2, #0
 8003292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003294:	f7fe fbf0 	bl	8001a78 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329a:	e00f      	b.n	80032bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe fbec 	bl	8001a78 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d908      	bls.n	80032bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e146      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
 80032ae:	bf00      	nop
 80032b0:	40021000 	.word	0x40021000
 80032b4:	42420000 	.word	0x42420000
 80032b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032bc:	4b92      	ldr	r3, [pc, #584]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	f003 0302 	and.w	r3, r3, #2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1e9      	bne.n	800329c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 0304 	and.w	r3, r3, #4
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 80a6 	beq.w	8003422 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032da:	4b8b      	ldr	r3, [pc, #556]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80032dc:	69db      	ldr	r3, [r3, #28]
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4b88      	ldr	r3, [pc, #544]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80032e8:	69db      	ldr	r3, [r3, #28]
 80032ea:	4a87      	ldr	r2, [pc, #540]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	61d3      	str	r3, [r2, #28]
 80032f2:	4b85      	ldr	r3, [pc, #532]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003302:	4b82      	ldr	r3, [pc, #520]	; (800350c <HAL_RCC_OscConfig+0x4c8>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330e:	4b7f      	ldr	r3, [pc, #508]	; (800350c <HAL_RCC_OscConfig+0x4c8>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7e      	ldr	r2, [pc, #504]	; (800350c <HAL_RCC_OscConfig+0x4c8>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fe fbad 	bl	8001a78 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fe fba9 	bl	8001a78 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e103      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003334:	4b75      	ldr	r3, [pc, #468]	; (800350c <HAL_RCC_OscConfig+0x4c8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x312>
 8003348:	4b6f      	ldr	r3, [pc, #444]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a6e      	ldr	r2, [pc, #440]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e02d      	b.n	80033b2 <HAL_RCC_OscConfig+0x36e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x334>
 800335e:	4b6a      	ldr	r3, [pc, #424]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	4a69      	ldr	r2, [pc, #420]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6213      	str	r3, [r2, #32]
 800336a:	4b67      	ldr	r3, [pc, #412]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	4a66      	ldr	r2, [pc, #408]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6213      	str	r3, [r2, #32]
 8003376:	e01c      	b.n	80033b2 <HAL_RCC_OscConfig+0x36e>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d10c      	bne.n	800339a <HAL_RCC_OscConfig+0x356>
 8003380:	4b61      	ldr	r3, [pc, #388]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	4a60      	ldr	r2, [pc, #384]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6213      	str	r3, [r2, #32]
 800338c:	4b5e      	ldr	r3, [pc, #376]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	4a5d      	ldr	r2, [pc, #372]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6213      	str	r3, [r2, #32]
 8003398:	e00b      	b.n	80033b2 <HAL_RCC_OscConfig+0x36e>
 800339a:	4b5b      	ldr	r3, [pc, #364]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800339c:	6a1b      	ldr	r3, [r3, #32]
 800339e:	4a5a      	ldr	r2, [pc, #360]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6213      	str	r3, [r2, #32]
 80033a6:	4b58      	ldr	r3, [pc, #352]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	4a57      	ldr	r2, [pc, #348]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68db      	ldr	r3, [r3, #12]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d015      	beq.n	80033e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033ba:	f7fe fb5d 	bl	8001a78 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fe fb59 	bl	8001a78 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0b1      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b4b      	ldr	r3, [pc, #300]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCC_OscConfig+0x37e>
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e6:	f7fe fb47 	bl	8001a78 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fb43 	bl	8001a78 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e09b      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	4b40      	ldr	r3, [pc, #256]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b3c      	ldr	r3, [pc, #240]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	4a3b      	ldr	r2, [pc, #236]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8087 	beq.w	800353a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	4b36      	ldr	r3, [pc, #216]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d061      	beq.n	80034fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	69db      	ldr	r3, [r3, #28]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d146      	bne.n	80034ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b33      	ldr	r3, [pc, #204]	; (8003510 <HAL_RCC_OscConfig+0x4cc>)
 8003442:	2200      	movs	r2, #0
 8003444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003446:	f7fe fb17 	bl	8001a78 <HAL_GetTick>
 800344a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800344c:	e008      	b.n	8003460 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800344e:	f7fe fb13 	bl	8001a78 <HAL_GetTick>
 8003452:	4602      	mov	r2, r0
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	2b02      	cmp	r3, #2
 800345a:	d901      	bls.n	8003460 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e06d      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003460:	4b29      	ldr	r3, [pc, #164]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f0      	bne.n	800344e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a1b      	ldr	r3, [r3, #32]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d108      	bne.n	8003488 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003476:	4b24      	ldr	r3, [pc, #144]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	4921      	ldr	r1, [pc, #132]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 8003484:	4313      	orrs	r3, r2
 8003486:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003488:	4b1f      	ldr	r3, [pc, #124]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a19      	ldr	r1, [r3, #32]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	430b      	orrs	r3, r1
 800349a:	491b      	ldr	r1, [pc, #108]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <HAL_RCC_OscConfig+0x4cc>)
 80034a2:	2201      	movs	r2, #1
 80034a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034a6:	f7fe fae7 	bl	8001a78 <HAL_GetTick>
 80034aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034ac:	e008      	b.n	80034c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ae:	f7fe fae3 	bl	8001a78 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d901      	bls.n	80034c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e03d      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034c0:	4b11      	ldr	r3, [pc, #68]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d0f0      	beq.n	80034ae <HAL_RCC_OscConfig+0x46a>
 80034cc:	e035      	b.n	800353a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ce:	4b10      	ldr	r3, [pc, #64]	; (8003510 <HAL_RCC_OscConfig+0x4cc>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fad0 	bl	8001a78 <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034dc:	f7fe facc 	bl	8001a78 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b02      	cmp	r3, #2
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e026      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ee:	4b06      	ldr	r3, [pc, #24]	; (8003508 <HAL_RCC_OscConfig+0x4c4>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x498>
 80034fa:	e01e      	b.n	800353a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	2b01      	cmp	r3, #1
 8003502:	d107      	bne.n	8003514 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003504:	2301      	movs	r3, #1
 8003506:	e019      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
 8003508:	40021000 	.word	0x40021000
 800350c:	40007000 	.word	0x40007000
 8003510:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003514:	4b0b      	ldr	r3, [pc, #44]	; (8003544 <HAL_RCC_OscConfig+0x500>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a1b      	ldr	r3, [r3, #32]
 8003524:	429a      	cmp	r2, r3
 8003526:	d106      	bne.n	8003536 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003532:	429a      	cmp	r2, r3
 8003534:	d001      	beq.n	800353a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003536:	2301      	movs	r3, #1
 8003538:	e000      	b.n	800353c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40021000 	.word	0x40021000

08003548 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d101      	bne.n	800355c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003558:	2301      	movs	r3, #1
 800355a:	e0d0      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800355c:	4b6a      	ldr	r3, [pc, #424]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	429a      	cmp	r2, r3
 8003568:	d910      	bls.n	800358c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800356a:	4b67      	ldr	r3, [pc, #412]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0207 	bic.w	r2, r3, #7
 8003572:	4965      	ldr	r1, [pc, #404]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	4313      	orrs	r3, r2
 8003578:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d001      	beq.n	800358c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e0b8      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d020      	beq.n	80035da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0304 	and.w	r3, r3, #4
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035a4:	4b59      	ldr	r3, [pc, #356]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a58      	ldr	r2, [pc, #352]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80035ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d005      	beq.n	80035c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035bc:	4b53      	ldr	r3, [pc, #332]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	4a52      	ldr	r2, [pc, #328]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035c2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035c8:	4b50      	ldr	r3, [pc, #320]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	494d      	ldr	r1, [pc, #308]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0301 	and.w	r3, r3, #1
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d040      	beq.n	8003668 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d107      	bne.n	80035fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ee:	4b47      	ldr	r3, [pc, #284]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d115      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e07f      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	2b02      	cmp	r3, #2
 8003604:	d107      	bne.n	8003616 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800360e:	2b00      	cmp	r3, #0
 8003610:	d109      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e073      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	4b3d      	ldr	r3, [pc, #244]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0302 	and.w	r3, r3, #2
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e06b      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f023 0203 	bic.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	4936      	ldr	r1, [pc, #216]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 8003634:	4313      	orrs	r3, r2
 8003636:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003638:	f7fe fa1e 	bl	8001a78 <HAL_GetTick>
 800363c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800363e:	e00a      	b.n	8003656 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003640:	f7fe fa1a 	bl	8001a78 <HAL_GetTick>
 8003644:	4602      	mov	r2, r0
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	1ad3      	subs	r3, r2, r3
 800364a:	f241 3288 	movw	r2, #5000	; 0x1388
 800364e:	4293      	cmp	r3, r2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e053      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003656:	4b2d      	ldr	r3, [pc, #180]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 020c 	and.w	r2, r3, #12
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	429a      	cmp	r2, r3
 8003666:	d1eb      	bne.n	8003640 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003668:	4b27      	ldr	r3, [pc, #156]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	429a      	cmp	r2, r3
 8003674:	d210      	bcs.n	8003698 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003676:	4b24      	ldr	r3, [pc, #144]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f023 0207 	bic.w	r2, r3, #7
 800367e:	4922      	ldr	r1, [pc, #136]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	4313      	orrs	r3, r2
 8003684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003686:	4b20      	ldr	r3, [pc, #128]	; (8003708 <HAL_RCC_ClockConfig+0x1c0>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0307 	and.w	r3, r3, #7
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	429a      	cmp	r2, r3
 8003692:	d001      	beq.n	8003698 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e032      	b.n	80036fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0304 	and.w	r3, r3, #4
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d008      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036a4:	4b19      	ldr	r3, [pc, #100]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	4916      	ldr	r1, [pc, #88]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d009      	beq.n	80036d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	490e      	ldr	r1, [pc, #56]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036d6:	f000 f821 	bl	800371c <HAL_RCC_GetSysClockFreq>
 80036da:	4602      	mov	r2, r0
 80036dc:	4b0b      	ldr	r3, [pc, #44]	; (800370c <HAL_RCC_ClockConfig+0x1c4>)
 80036de:	685b      	ldr	r3, [r3, #4]
 80036e0:	091b      	lsrs	r3, r3, #4
 80036e2:	f003 030f 	and.w	r3, r3, #15
 80036e6:	490a      	ldr	r1, [pc, #40]	; (8003710 <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	5ccb      	ldrb	r3, [r1, r3]
 80036ea:	fa22 f303 	lsr.w	r3, r2, r3
 80036ee:	4a09      	ldr	r2, [pc, #36]	; (8003714 <HAL_RCC_ClockConfig+0x1cc>)
 80036f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036f2:	4b09      	ldr	r3, [pc, #36]	; (8003718 <HAL_RCC_ClockConfig+0x1d0>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd ff82 	bl	8001600 <HAL_InitTick>

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3710      	adds	r7, #16
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	40022000 	.word	0x40022000
 800370c:	40021000 	.word	0x40021000
 8003710:	08009cac 	.word	0x08009cac
 8003714:	20000000 	.word	0x20000000
 8003718:	20000004 	.word	0x20000004

0800371c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800371c:	b490      	push	{r4, r7}
 800371e:	b08a      	sub	sp, #40	; 0x28
 8003720:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003722:	4b29      	ldr	r3, [pc, #164]	; (80037c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8003724:	1d3c      	adds	r4, r7, #4
 8003726:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003728:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800372c:	f240 2301 	movw	r3, #513	; 0x201
 8003730:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003732:	2300      	movs	r3, #0
 8003734:	61fb      	str	r3, [r7, #28]
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	2300      	movs	r3, #0
 800373c:	627b      	str	r3, [r7, #36]	; 0x24
 800373e:	2300      	movs	r3, #0
 8003740:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003742:	2300      	movs	r3, #0
 8003744:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003746:	4b21      	ldr	r3, [pc, #132]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b04      	cmp	r3, #4
 8003754:	d002      	beq.n	800375c <HAL_RCC_GetSysClockFreq+0x40>
 8003756:	2b08      	cmp	r3, #8
 8003758:	d003      	beq.n	8003762 <HAL_RCC_GetSysClockFreq+0x46>
 800375a:	e02b      	b.n	80037b4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800375c:	4b1c      	ldr	r3, [pc, #112]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 800375e:	623b      	str	r3, [r7, #32]
      break;
 8003760:	e02b      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	0c9b      	lsrs	r3, r3, #18
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3328      	adds	r3, #40	; 0x28
 800376c:	443b      	add	r3, r7
 800376e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003772:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d012      	beq.n	80037a4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800377e:	4b13      	ldr	r3, [pc, #76]	; (80037cc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	0c5b      	lsrs	r3, r3, #17
 8003784:	f003 0301 	and.w	r3, r3, #1
 8003788:	3328      	adds	r3, #40	; 0x28
 800378a:	443b      	add	r3, r7
 800378c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003790:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	4a0e      	ldr	r2, [pc, #56]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003796:	fb03 f202 	mul.w	r2, r3, r2
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a0:	627b      	str	r3, [r7, #36]	; 0x24
 80037a2:	e004      	b.n	80037ae <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	4a0b      	ldr	r2, [pc, #44]	; (80037d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037a8:	fb02 f303 	mul.w	r3, r2, r3
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	623b      	str	r3, [r7, #32]
      break;
 80037b2:	e002      	b.n	80037ba <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_GetSysClockFreq+0xb4>)
 80037b6:	623b      	str	r3, [r7, #32]
      break;
 80037b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037ba:	6a3b      	ldr	r3, [r7, #32]
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3728      	adds	r7, #40	; 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bc90      	pop	{r4, r7}
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	08009c00 	.word	0x08009c00
 80037cc:	40021000 	.word	0x40021000
 80037d0:	007a1200 	.word	0x007a1200
 80037d4:	003d0900 	.word	0x003d0900

080037d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037dc:	4b02      	ldr	r3, [pc, #8]	; (80037e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80037de:	681b      	ldr	r3, [r3, #0]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	20000000 	.word	0x20000000

080037ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037f0:	f7ff fff2 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 80037f4:	4602      	mov	r2, r0
 80037f6:	4b05      	ldr	r3, [pc, #20]	; (800380c <HAL_RCC_GetPCLK1Freq+0x20>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	0a1b      	lsrs	r3, r3, #8
 80037fc:	f003 0307 	and.w	r3, r3, #7
 8003800:	4903      	ldr	r1, [pc, #12]	; (8003810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003802:	5ccb      	ldrb	r3, [r1, r3]
 8003804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003808:	4618      	mov	r0, r3
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40021000 	.word	0x40021000
 8003810:	08009cbc 	.word	0x08009cbc

08003814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003818:	f7ff ffde 	bl	80037d8 <HAL_RCC_GetHCLKFreq>
 800381c:	4602      	mov	r2, r0
 800381e:	4b05      	ldr	r3, [pc, #20]	; (8003834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	0adb      	lsrs	r3, r3, #11
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	4903      	ldr	r1, [pc, #12]	; (8003838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800382a:	5ccb      	ldrb	r3, [r1, r3]
 800382c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003830:	4618      	mov	r0, r3
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000
 8003838:	08009cbc 	.word	0x08009cbc

0800383c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	220f      	movs	r2, #15
 800384a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <HAL_RCC_GetClockConfig+0x58>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	f003 0203 	and.w	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003858:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_RCC_GetClockConfig+0x58>)
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003864:	4b0b      	ldr	r3, [pc, #44]	; (8003894 <HAL_RCC_GetClockConfig+0x58>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003870:	4b08      	ldr	r3, [pc, #32]	; (8003894 <HAL_RCC_GetClockConfig+0x58>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	08db      	lsrs	r3, r3, #3
 8003876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800387e:	4b06      	ldr	r3, [pc, #24]	; (8003898 <HAL_RCC_GetClockConfig+0x5c>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0207 	and.w	r2, r3, #7
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800388a:	bf00      	nop
 800388c:	370c      	adds	r7, #12
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	40021000 	.word	0x40021000
 8003898:	40022000 	.word	0x40022000

0800389c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800389c:	b480      	push	{r7}
 800389e:	b085      	sub	sp, #20
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80038a4:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <RCC_Delay+0x34>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a0a      	ldr	r2, [pc, #40]	; (80038d4 <RCC_Delay+0x38>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0a5b      	lsrs	r3, r3, #9
 80038b0:	687a      	ldr	r2, [r7, #4]
 80038b2:	fb02 f303 	mul.w	r3, r2, r3
 80038b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80038b8:	bf00      	nop
  }
  while (Delay --);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	1e5a      	subs	r2, r3, #1
 80038be:	60fa      	str	r2, [r7, #12]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f9      	bne.n	80038b8 <RCC_Delay+0x1c>
}
 80038c4:	bf00      	nop
 80038c6:	bf00      	nop
 80038c8:	3714      	adds	r7, #20
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bc80      	pop	{r7}
 80038ce:	4770      	bx	lr
 80038d0:	20000000 	.word	0x20000000
 80038d4:	10624dd3 	.word	0x10624dd3

080038d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e041      	b.n	800396e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f839 	bl	8003976 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f000 f9b4 	bl	8003c84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2201      	movs	r2, #1
 8003928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800396c:	2300      	movs	r3, #0
}
 800396e:	4618      	mov	r0, r3
 8003970:	3708      	adds	r7, #8
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}

08003976 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr

08003988 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003996:	b2db      	uxtb	r3, r3
 8003998:	2b01      	cmp	r3, #1
 800399a:	d001      	beq.n	80039a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e03a      	b.n	8003a16 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68da      	ldr	r2, [r3, #12]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a18      	ldr	r2, [pc, #96]	; (8003a20 <HAL_TIM_Base_Start_IT+0x98>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00e      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039ca:	d009      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a14      	ldr	r2, [pc, #80]	; (8003a24 <HAL_TIM_Base_Start_IT+0x9c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d004      	beq.n	80039e0 <HAL_TIM_Base_Start_IT+0x58>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a13      	ldr	r2, [pc, #76]	; (8003a28 <HAL_TIM_Base_Start_IT+0xa0>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d111      	bne.n	8003a04 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f003 0307 	and.w	r3, r3, #7
 80039ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2b06      	cmp	r3, #6
 80039f0:	d010      	beq.n	8003a14 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f042 0201 	orr.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a02:	e007      	b.n	8003a14 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f042 0201 	orr.w	r2, r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a14:	2300      	movs	r3, #0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bc80      	pop	{r7}
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40000400 	.word	0x40000400
 8003a28:	40000800 	.word	0x40000800

08003a2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d122      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	f003 0302 	and.w	r3, r3, #2
 8003a4c:	2b02      	cmp	r3, #2
 8003a4e:	d11b      	bne.n	8003a88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f06f 0202 	mvn.w	r2, #2
 8003a58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 f8ed 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003a74:	e005      	b.n	8003a82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a76:	6878      	ldr	r0, [r7, #4]
 8003a78:	f000 f8e0 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f8ef 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	691b      	ldr	r3, [r3, #16]
 8003a8e:	f003 0304 	and.w	r3, r3, #4
 8003a92:	2b04      	cmp	r3, #4
 8003a94:	d122      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	68db      	ldr	r3, [r3, #12]
 8003a9c:	f003 0304 	and.w	r3, r3, #4
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d11b      	bne.n	8003adc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f06f 0204 	mvn.w	r2, #4
 8003aac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2202      	movs	r2, #2
 8003ab2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	699b      	ldr	r3, [r3, #24]
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 f8c3 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003ac8:	e005      	b.n	8003ad6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8b6 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f8c5 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0308 	and.w	r3, r3, #8
 8003ae6:	2b08      	cmp	r3, #8
 8003ae8:	d122      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	f003 0308 	and.w	r3, r3, #8
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d11b      	bne.n	8003b30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f06f 0208 	mvn.w	r2, #8
 8003b00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2204      	movs	r2, #4
 8003b06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d003      	beq.n	8003b1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f000 f899 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003b1c:	e005      	b.n	8003b2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 f88c 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f89b 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0310 	and.w	r3, r3, #16
 8003b3a:	2b10      	cmp	r3, #16
 8003b3c:	d122      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	f003 0310 	and.w	r3, r3, #16
 8003b48:	2b10      	cmp	r3, #16
 8003b4a:	d11b      	bne.n	8003b84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f06f 0210 	mvn.w	r2, #16
 8003b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2208      	movs	r2, #8
 8003b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	69db      	ldr	r3, [r3, #28]
 8003b62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f86f 	bl	8003c4e <HAL_TIM_IC_CaptureCallback>
 8003b70:	e005      	b.n	8003b7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f862 	bl	8003c3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 f871 	bl	8003c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	f003 0301 	and.w	r3, r3, #1
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d10e      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	f003 0301 	and.w	r3, r3, #1
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d107      	bne.n	8003bb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f06f 0201 	mvn.w	r2, #1
 8003ba8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	f7fd fc20 	bl	80013f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bba:	2b80      	cmp	r3, #128	; 0x80
 8003bbc:	d10e      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bc8:	2b80      	cmp	r3, #128	; 0x80
 8003bca:	d107      	bne.n	8003bdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003bd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 f8bf 	bl	8003d5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	691b      	ldr	r3, [r3, #16]
 8003be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d10e      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf4:	2b40      	cmp	r3, #64	; 0x40
 8003bf6:	d107      	bne.n	8003c08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f835 	bl	8003c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	f003 0320 	and.w	r3, r3, #32
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d10e      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	f003 0320 	and.w	r3, r3, #32
 8003c20:	2b20      	cmp	r3, #32
 8003c22:	d107      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f06f 0220 	mvn.w	r2, #32
 8003c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c2e:	6878      	ldr	r0, [r7, #4]
 8003c30:	f000 f88a 	bl	8003d48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c34:	bf00      	nop
 8003c36:	3708      	adds	r7, #8
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bd80      	pop	{r7, pc}

08003c3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bc80      	pop	{r7}
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr

08003c60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c68:	bf00      	nop
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bc80      	pop	{r7}
 8003c70:	4770      	bx	lr

08003c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b083      	sub	sp, #12
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c7a:	bf00      	nop
 8003c7c:	370c      	adds	r7, #12
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bc80      	pop	{r7}
 8003c82:	4770      	bx	lr

08003c84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a29      	ldr	r2, [pc, #164]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a26      	ldr	r2, [pc, #152]	; (8003d40 <TIM_Base_SetConfig+0xbc>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x30>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a25      	ldr	r2, [pc, #148]	; (8003d44 <TIM_Base_SetConfig+0xc0>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00b      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cd4:	d007      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a19      	ldr	r2, [pc, #100]	; (8003d40 <TIM_Base_SetConfig+0xbc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d003      	beq.n	8003ce6 <TIM_Base_SetConfig+0x62>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a18      	ldr	r2, [pc, #96]	; (8003d44 <TIM_Base_SetConfig+0xc0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d108      	bne.n	8003cf8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	68fa      	ldr	r2, [r7, #12]
 8003d0a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a07      	ldr	r2, [pc, #28]	; (8003d3c <TIM_Base_SetConfig+0xb8>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d103      	bne.n	8003d2c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	615a      	str	r2, [r3, #20]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bc80      	pop	{r7}
 8003d3a:	4770      	bx	lr
 8003d3c:	40012c00 	.word	0x40012c00
 8003d40:	40000400 	.word	0x40000400
 8003d44:	40000800 	.word	0x40000800

08003d48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003d48:	b480      	push	{r7}
 8003d4a:	b083      	sub	sp, #12
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bc80      	pop	{r7}
 8003d58:	4770      	bx	lr

08003d5a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003d5a:	b480      	push	{r7}
 8003d5c:	b083      	sub	sp, #12
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003d62:	bf00      	nop
 8003d64:	370c      	adds	r7, #12
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bc80      	pop	{r7}
 8003d6a:	4770      	bx	lr

08003d6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d101      	bne.n	8003d7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e03f      	b.n	8003dfe <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d106      	bne.n	8003d98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7fd fbba 	bl	800150c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2224      	movs	r2, #36	; 0x24
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	68da      	ldr	r2, [r3, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f000 f905 	bl	8003fc0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	695a      	ldr	r2, [r3, #20]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68da      	ldr	r2, [r3, #12]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2220      	movs	r2, #32
 8003df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2220      	movs	r2, #32
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b08a      	sub	sp, #40	; 0x28
 8003e0a:	af02      	add	r7, sp, #8
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	2b20      	cmp	r3, #32
 8003e24:	d17c      	bne.n	8003f20 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d002      	beq.n	8003e32 <HAL_UART_Transmit+0x2c>
 8003e2c:	88fb      	ldrh	r3, [r7, #6]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e075      	b.n	8003f22 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d101      	bne.n	8003e44 <HAL_UART_Transmit+0x3e>
 8003e40:	2302      	movs	r3, #2
 8003e42:	e06e      	b.n	8003f22 <HAL_UART_Transmit+0x11c>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2221      	movs	r2, #33	; 0x21
 8003e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e5a:	f7fd fe0d 	bl	8001a78 <HAL_GetTick>
 8003e5e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	88fa      	ldrh	r2, [r7, #6]
 8003e64:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	88fa      	ldrh	r2, [r7, #6]
 8003e6a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e74:	d108      	bne.n	8003e88 <HAL_UART_Transmit+0x82>
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	61bb      	str	r3, [r7, #24]
 8003e86:	e003      	b.n	8003e90 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e98:	e02a      	b.n	8003ef0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	2180      	movs	r1, #128	; 0x80
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f840 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e036      	b.n	8003f22 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d10b      	bne.n	8003ed2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ec8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	3302      	adds	r3, #2
 8003ece:	61bb      	str	r3, [r7, #24]
 8003ed0:	e007      	b.n	8003ee2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	781a      	ldrb	r2, [r3, #0]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1cf      	bne.n	8003e9a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2200      	movs	r2, #0
 8003f02:	2140      	movs	r1, #64	; 0x40
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f810 	bl	8003f2a <UART_WaitOnFlagUntilTimeout>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d001      	beq.n	8003f14 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e006      	b.n	8003f22 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2220      	movs	r2, #32
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	e000      	b.n	8003f22 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f20:	2302      	movs	r3, #2
  }
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3720      	adds	r7, #32
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}

08003f2a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f2a:	b580      	push	{r7, lr}
 8003f2c:	b084      	sub	sp, #16
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	60f8      	str	r0, [r7, #12]
 8003f32:	60b9      	str	r1, [r7, #8]
 8003f34:	603b      	str	r3, [r7, #0]
 8003f36:	4613      	mov	r3, r2
 8003f38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3a:	e02c      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d028      	beq.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d007      	beq.n	8003f5a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f4a:	f7fd fd95 	bl	8001a78 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d21d      	bcs.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	68da      	ldr	r2, [r3, #12]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f68:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 0201 	bic.w	r2, r2, #1
 8003f78:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e00f      	b.n	8003fb6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	68ba      	ldr	r2, [r7, #8]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	bf0c      	ite	eq
 8003fa6:	2301      	moveq	r3, #1
 8003fa8:	2300      	movne	r3, #0
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	461a      	mov	r2, r3
 8003fae:	79fb      	ldrb	r3, [r7, #7]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d0c3      	beq.n	8003f3c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003fb4:	2300      	movs	r3, #0
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	68da      	ldr	r2, [r3, #12]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	430a      	orrs	r2, r1
 8003fdc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	695b      	ldr	r3, [r3, #20]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68db      	ldr	r3, [r3, #12]
 8003ff6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ffa:	f023 030c 	bic.w	r3, r3, #12
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	6812      	ldr	r2, [r2, #0]
 8004002:	68b9      	ldr	r1, [r7, #8]
 8004004:	430b      	orrs	r3, r1
 8004006:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699a      	ldr	r2, [r3, #24]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a2c      	ldr	r2, [pc, #176]	; (80040d4 <UART_SetConfig+0x114>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d103      	bne.n	8004030 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004028:	f7ff fbf4 	bl	8003814 <HAL_RCC_GetPCLK2Freq>
 800402c:	60f8      	str	r0, [r7, #12]
 800402e:	e002      	b.n	8004036 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004030:	f7ff fbdc 	bl	80037ec <HAL_RCC_GetPCLK1Freq>
 8004034:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fbb2 f3f3 	udiv	r3, r2, r3
 800404c:	4a22      	ldr	r2, [pc, #136]	; (80040d8 <UART_SetConfig+0x118>)
 800404e:	fba2 2303 	umull	r2, r3, r2, r3
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	0119      	lsls	r1, r3, #4
 8004056:	68fa      	ldr	r2, [r7, #12]
 8004058:	4613      	mov	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	009a      	lsls	r2, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	fbb2 f2f3 	udiv	r2, r2, r3
 800406c:	4b1a      	ldr	r3, [pc, #104]	; (80040d8 <UART_SetConfig+0x118>)
 800406e:	fba3 0302 	umull	r0, r3, r3, r2
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	2064      	movs	r0, #100	; 0x64
 8004076:	fb00 f303 	mul.w	r3, r0, r3
 800407a:	1ad3      	subs	r3, r2, r3
 800407c:	011b      	lsls	r3, r3, #4
 800407e:	3332      	adds	r3, #50	; 0x32
 8004080:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <UART_SetConfig+0x118>)
 8004082:	fba2 2303 	umull	r2, r3, r2, r3
 8004086:	095b      	lsrs	r3, r3, #5
 8004088:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800408c:	4419      	add	r1, r3
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	4613      	mov	r3, r2
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	4413      	add	r3, r2
 8004096:	009a      	lsls	r2, r3, #2
 8004098:	441a      	add	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80040a4:	4b0c      	ldr	r3, [pc, #48]	; (80040d8 <UART_SetConfig+0x118>)
 80040a6:	fba3 0302 	umull	r0, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	2064      	movs	r0, #100	; 0x64
 80040ae:	fb00 f303 	mul.w	r3, r0, r3
 80040b2:	1ad3      	subs	r3, r2, r3
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	3332      	adds	r3, #50	; 0x32
 80040b8:	4a07      	ldr	r2, [pc, #28]	; (80040d8 <UART_SetConfig+0x118>)
 80040ba:	fba2 2303 	umull	r2, r3, r2, r3
 80040be:	095b      	lsrs	r3, r3, #5
 80040c0:	f003 020f 	and.w	r2, r3, #15
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	440a      	add	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040cc:	bf00      	nop
 80040ce:	3710      	adds	r7, #16
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	40013800 	.word	0x40013800
 80040d8:	51eb851f 	.word	0x51eb851f

080040dc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040e2:	f3ef 8305 	mrs	r3, IPSR
 80040e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040e8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10f      	bne.n	800410e <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040ee:	f3ef 8310 	mrs	r3, PRIMASK
 80040f2:	607b      	str	r3, [r7, #4]
  return(result);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <osKernelInitialize+0x32>
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <osKernelInitialize+0x60>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d109      	bne.n	8004116 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004102:	f3ef 8311 	mrs	r3, BASEPRI
 8004106:	603b      	str	r3, [r7, #0]
  return(result);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800410e:	f06f 0305 	mvn.w	r3, #5
 8004112:	60fb      	str	r3, [r7, #12]
 8004114:	e00c      	b.n	8004130 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004116:	4b09      	ldr	r3, [pc, #36]	; (800413c <osKernelInitialize+0x60>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d105      	bne.n	800412a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800411e:	4b07      	ldr	r3, [pc, #28]	; (800413c <osKernelInitialize+0x60>)
 8004120:	2201      	movs	r2, #1
 8004122:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004124:	2300      	movs	r3, #0
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	e002      	b.n	8004130 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800412a:	f04f 33ff 	mov.w	r3, #4294967295
 800412e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004130:	68fb      	ldr	r3, [r7, #12]
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr
 800413c:	20000338 	.word	0x20000338

08004140 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004146:	f3ef 8305 	mrs	r3, IPSR
 800414a:	60bb      	str	r3, [r7, #8]
  return(result);
 800414c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800414e:	2b00      	cmp	r3, #0
 8004150:	d10f      	bne.n	8004172 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004152:	f3ef 8310 	mrs	r3, PRIMASK
 8004156:	607b      	str	r3, [r7, #4]
  return(result);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d109      	bne.n	8004172 <osKernelStart+0x32>
 800415e:	4b11      	ldr	r3, [pc, #68]	; (80041a4 <osKernelStart+0x64>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d109      	bne.n	800417a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004166:	f3ef 8311 	mrs	r3, BASEPRI
 800416a:	603b      	str	r3, [r7, #0]
  return(result);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <osKernelStart+0x3a>
    stat = osErrorISR;
 8004172:	f06f 0305 	mvn.w	r3, #5
 8004176:	60fb      	str	r3, [r7, #12]
 8004178:	e00e      	b.n	8004198 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 800417a:	4b0a      	ldr	r3, [pc, #40]	; (80041a4 <osKernelStart+0x64>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d107      	bne.n	8004192 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8004182:	4b08      	ldr	r3, [pc, #32]	; (80041a4 <osKernelStart+0x64>)
 8004184:	2202      	movs	r2, #2
 8004186:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004188:	f001 faec 	bl	8005764 <vTaskStartScheduler>
      stat = osOK;
 800418c:	2300      	movs	r3, #0
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	e002      	b.n	8004198 <osKernelStart+0x58>
    } else {
      stat = osError;
 8004192:	f04f 33ff 	mov.w	r3, #4294967295
 8004196:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004198:	68fb      	ldr	r3, [r7, #12]
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	20000338 	.word	0x20000338

080041a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b092      	sub	sp, #72	; 0x48
 80041ac:	af04      	add	r7, sp, #16
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041b8:	f3ef 8305 	mrs	r3, IPSR
 80041bc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	f040 8094 	bne.w	80042ee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041c6:	f3ef 8310 	mrs	r3, PRIMASK
 80041ca:	623b      	str	r3, [r7, #32]
  return(result);
 80041cc:	6a3b      	ldr	r3, [r7, #32]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	f040 808d 	bne.w	80042ee <osThreadNew+0x146>
 80041d4:	4b48      	ldr	r3, [pc, #288]	; (80042f8 <osThreadNew+0x150>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d106      	bne.n	80041ea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041dc:	f3ef 8311 	mrs	r3, BASEPRI
 80041e0:	61fb      	str	r3, [r7, #28]
  return(result);
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	f040 8082 	bne.w	80042ee <osThreadNew+0x146>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d07e      	beq.n	80042ee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80041f4:	2318      	movs	r3, #24
 80041f6:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80041f8:	2300      	movs	r3, #0
 80041fa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80041fc:	f107 031b 	add.w	r3, r7, #27
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8004202:	f04f 33ff 	mov.w	r3, #4294967295
 8004206:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d045      	beq.n	800429a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d002      	beq.n	800421c <osThreadNew+0x74>
        name = attr->name;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d002      	beq.n	800422a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	d008      	beq.n	8004242 <osThreadNew+0x9a>
 8004230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004232:	2b38      	cmp	r3, #56	; 0x38
 8004234:	d805      	bhi.n	8004242 <osThreadNew+0x9a>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <osThreadNew+0x9e>
        return (NULL);
 8004242:	2300      	movs	r3, #0
 8004244:	e054      	b.n	80042f0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	695b      	ldr	r3, [r3, #20]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d003      	beq.n	8004256 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695b      	ldr	r3, [r3, #20]
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00e      	beq.n	800427c <osThreadNew+0xd4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	2bbb      	cmp	r3, #187	; 0xbb
 8004264:	d90a      	bls.n	800427c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800426a:	2b00      	cmp	r3, #0
 800426c:	d006      	beq.n	800427c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	695b      	ldr	r3, [r3, #20]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d002      	beq.n	800427c <osThreadNew+0xd4>
        mem = 1;
 8004276:	2301      	movs	r3, #1
 8004278:	62bb      	str	r3, [r7, #40]	; 0x28
 800427a:	e010      	b.n	800429e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d10c      	bne.n	800429e <osThreadNew+0xf6>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d108      	bne.n	800429e <osThreadNew+0xf6>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <osThreadNew+0xf6>
          mem = 0;
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	e001      	b.n	800429e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 800429a:	2300      	movs	r3, #0
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800429e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d110      	bne.n	80042c6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80042ac:	9202      	str	r2, [sp, #8]
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f001 f86e 	bl	800539c <xTaskCreateStatic>
 80042c0:	4603      	mov	r3, r0
 80042c2:	617b      	str	r3, [r7, #20]
 80042c4:	e013      	b.n	80042ee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80042c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d110      	bne.n	80042ee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80042cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ce:	b29a      	uxth	r2, r3
 80042d0:	f107 0314 	add.w	r3, r7, #20
 80042d4:	9301      	str	r3, [sp, #4]
 80042d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80042de:	68f8      	ldr	r0, [r7, #12]
 80042e0:	f001 f8b8 	bl	8005454 <xTaskCreate>
 80042e4:	4603      	mov	r3, r0
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d001      	beq.n	80042ee <osThreadNew+0x146>
          hTask = NULL;
 80042ea:	2300      	movs	r3, #0
 80042ec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80042ee:	697b      	ldr	r3, [r7, #20]
}
 80042f0:	4618      	mov	r0, r3
 80042f2:	3738      	adds	r7, #56	; 0x38
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000338 	.word	0x20000338

080042fc <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004302:	f3ef 8305 	mrs	r3, IPSR
 8004306:	60bb      	str	r3, [r7, #8]
  return(result);
 8004308:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800430a:	2b00      	cmp	r3, #0
 800430c:	d10f      	bne.n	800432e <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430e:	f3ef 8310 	mrs	r3, PRIMASK
 8004312:	607b      	str	r3, [r7, #4]
  return(result);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d109      	bne.n	800432e <osThreadYield+0x32>
 800431a:	4b0f      	ldr	r3, [pc, #60]	; (8004358 <osThreadYield+0x5c>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d109      	bne.n	8004336 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004322:	f3ef 8311 	mrs	r3, BASEPRI
 8004326:	603b      	str	r3, [r7, #0]
  return(result);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <osThreadYield+0x3a>
    stat = osErrorISR;
 800432e:	f06f 0305 	mvn.w	r3, #5
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	e009      	b.n	800434a <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8004336:	2300      	movs	r3, #0
 8004338:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 800433a:	4b08      	ldr	r3, [pc, #32]	; (800435c <osThreadYield+0x60>)
 800433c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004340:	601a      	str	r2, [r3, #0]
 8004342:	f3bf 8f4f 	dsb	sy
 8004346:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 800434a:	68fb      	ldr	r3, [r7, #12]
}
 800434c:	4618      	mov	r0, r3
 800434e:	3714      	adds	r7, #20
 8004350:	46bd      	mov	sp, r7
 8004352:	bc80      	pop	{r7}
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	20000338 	.word	0x20000338
 800435c:	e000ed04 	.word	0xe000ed04

08004360 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004368:	f3ef 8305 	mrs	r3, IPSR
 800436c:	613b      	str	r3, [r7, #16]
  return(result);
 800436e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004370:	2b00      	cmp	r3, #0
 8004372:	d10f      	bne.n	8004394 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004374:	f3ef 8310 	mrs	r3, PRIMASK
 8004378:	60fb      	str	r3, [r7, #12]
  return(result);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d109      	bne.n	8004394 <osDelay+0x34>
 8004380:	4b0d      	ldr	r3, [pc, #52]	; (80043b8 <osDelay+0x58>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d109      	bne.n	800439c <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004388:	f3ef 8311 	mrs	r3, BASEPRI
 800438c:	60bb      	str	r3, [r7, #8]
  return(result);
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d003      	beq.n	800439c <osDelay+0x3c>
    stat = osErrorISR;
 8004394:	f06f 0305 	mvn.w	r3, #5
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e007      	b.n	80043ac <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800439c:	2300      	movs	r3, #0
 800439e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <osDelay+0x4c>
      vTaskDelay(ticks);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f001 f9a8 	bl	80056fc <vTaskDelay>
    }
  }

  return (stat);
 80043ac:	697b      	ldr	r3, [r7, #20]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000338 	.word	0x20000338

080043bc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b08c      	sub	sp, #48	; 0x30
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043cc:	f3ef 8305 	mrs	r3, IPSR
 80043d0:	61bb      	str	r3, [r7, #24]
  return(result);
 80043d2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d16f      	bne.n	80044b8 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043d8:	f3ef 8310 	mrs	r3, PRIMASK
 80043dc:	617b      	str	r3, [r7, #20]
  return(result);
 80043de:	697b      	ldr	r3, [r7, #20]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d169      	bne.n	80044b8 <osMessageQueueNew+0xfc>
 80043e4:	4b37      	ldr	r3, [pc, #220]	; (80044c4 <osMessageQueueNew+0x108>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b02      	cmp	r3, #2
 80043ea:	d105      	bne.n	80043f8 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043ec:	f3ef 8311 	mrs	r3, BASEPRI
 80043f0:	613b      	str	r3, [r7, #16]
  return(result);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d15f      	bne.n	80044b8 <osMessageQueueNew+0xfc>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d05c      	beq.n	80044b8 <osMessageQueueNew+0xfc>
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d059      	beq.n	80044b8 <osMessageQueueNew+0xfc>
    mem = -1;
 8004404:	f04f 33ff 	mov.w	r3, #4294967295
 8004408:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d029      	beq.n	8004464 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d012      	beq.n	800443e <osMessageQueueNew+0x82>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	2b4f      	cmp	r3, #79	; 0x4f
 800441e:	d90e      	bls.n	800443e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004424:	2b00      	cmp	r3, #0
 8004426:	d00a      	beq.n	800443e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	68b9      	ldr	r1, [r7, #8]
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	429a      	cmp	r2, r3
 8004436:	d302      	bcc.n	800443e <osMessageQueueNew+0x82>
        mem = 1;
 8004438:	2301      	movs	r3, #1
 800443a:	623b      	str	r3, [r7, #32]
 800443c:	e014      	b.n	8004468 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d110      	bne.n	8004468 <osMessageQueueNew+0xac>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d10c      	bne.n	8004468 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004452:	2b00      	cmp	r3, #0
 8004454:	d108      	bne.n	8004468 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	695b      	ldr	r3, [r3, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d104      	bne.n	8004468 <osMessageQueueNew+0xac>
          mem = 0;
 800445e:	2300      	movs	r3, #0
 8004460:	623b      	str	r3, [r7, #32]
 8004462:	e001      	b.n	8004468 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004464:	2300      	movs	r3, #0
 8004466:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d10b      	bne.n	8004486 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	691a      	ldr	r2, [r3, #16]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2100      	movs	r1, #0
 8004478:	9100      	str	r1, [sp, #0]
 800447a:	68b9      	ldr	r1, [r7, #8]
 800447c:	68f8      	ldr	r0, [r7, #12]
 800447e:	f000 fa53 	bl	8004928 <xQueueGenericCreateStatic>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
 8004484:	e008      	b.n	8004498 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004486:	6a3b      	ldr	r3, [r7, #32]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d105      	bne.n	8004498 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800448c:	2200      	movs	r2, #0
 800448e:	68b9      	ldr	r1, [r7, #8]
 8004490:	68f8      	ldr	r0, [r7, #12]
 8004492:	f000 fac0 	bl	8004a16 <xQueueGenericCreate>
 8004496:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00c      	beq.n	80044b8 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <osMessageQueueNew+0xf0>
        name = attr->name;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	61fb      	str	r3, [r7, #28]
 80044aa:	e001      	b.n	80044b0 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 80044ac:	2300      	movs	r3, #0
 80044ae:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 80044b0:	69f9      	ldr	r1, [r7, #28]
 80044b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044b4:	f000 ff16 	bl	80052e4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3728      	adds	r7, #40	; 0x28
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000338 	.word	0x20000338

080044c8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b08a      	sub	sp, #40	; 0x28
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	60f8      	str	r0, [r7, #12]
 80044d0:	60b9      	str	r1, [r7, #8]
 80044d2:	603b      	str	r3, [r7, #0]
 80044d4:	4613      	mov	r3, r2
 80044d6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80044dc:	2300      	movs	r3, #0
 80044de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044e0:	f3ef 8305 	mrs	r3, IPSR
 80044e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80044e6:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10f      	bne.n	800450c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ec:	f3ef 8310 	mrs	r3, PRIMASK
 80044f0:	61bb      	str	r3, [r7, #24]
  return(result);
 80044f2:	69bb      	ldr	r3, [r7, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d109      	bne.n	800450c <osMessageQueuePut+0x44>
 80044f8:	4b2b      	ldr	r3, [pc, #172]	; (80045a8 <osMessageQueuePut+0xe0>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d12e      	bne.n	800455e <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004500:	f3ef 8311 	mrs	r3, BASEPRI
 8004504:	617b      	str	r3, [r7, #20]
  return(result);
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d028      	beq.n	800455e <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800450c:	6a3b      	ldr	r3, [r7, #32]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d005      	beq.n	800451e <osMessageQueuePut+0x56>
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <osMessageQueuePut+0x56>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800451e:	f06f 0303 	mvn.w	r3, #3
 8004522:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004524:	e039      	b.n	800459a <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004526:	2300      	movs	r3, #0
 8004528:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800452a:	f107 0210 	add.w	r2, r7, #16
 800452e:	2300      	movs	r3, #0
 8004530:	68b9      	ldr	r1, [r7, #8]
 8004532:	6a38      	ldr	r0, [r7, #32]
 8004534:	f000 fbce 	bl	8004cd4 <xQueueGenericSendFromISR>
 8004538:	4603      	mov	r3, r0
 800453a:	2b01      	cmp	r3, #1
 800453c:	d003      	beq.n	8004546 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800453e:	f06f 0302 	mvn.w	r3, #2
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004544:	e029      	b.n	800459a <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d026      	beq.n	800459a <osMessageQueuePut+0xd2>
 800454c:	4b17      	ldr	r3, [pc, #92]	; (80045ac <osMessageQueuePut+0xe4>)
 800454e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800455c:	e01d      	b.n	800459a <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800455e:	6a3b      	ldr	r3, [r7, #32]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <osMessageQueuePut+0xa2>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d103      	bne.n	8004572 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800456a:	f06f 0303 	mvn.w	r3, #3
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
 8004570:	e014      	b.n	800459c <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004572:	2300      	movs	r3, #0
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	6a38      	ldr	r0, [r7, #32]
 800457a:	f000 faad 	bl	8004ad8 <xQueueGenericSend>
 800457e:	4603      	mov	r3, r0
 8004580:	2b01      	cmp	r3, #1
 8004582:	d00b      	beq.n	800459c <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d003      	beq.n	8004592 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800458a:	f06f 0301 	mvn.w	r3, #1
 800458e:	627b      	str	r3, [r7, #36]	; 0x24
 8004590:	e004      	b.n	800459c <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8004592:	f06f 0302 	mvn.w	r3, #2
 8004596:	627b      	str	r3, [r7, #36]	; 0x24
 8004598:	e000      	b.n	800459c <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800459a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3728      	adds	r7, #40	; 0x28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000338 	.word	0x20000338
 80045ac:	e000ed04 	.word	0xe000ed04

080045b0 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b08a      	sub	sp, #40	; 0x28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045c6:	f3ef 8305 	mrs	r3, IPSR
 80045ca:	61fb      	str	r3, [r7, #28]
  return(result);
 80045cc:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045d2:	f3ef 8310 	mrs	r3, PRIMASK
 80045d6:	61bb      	str	r3, [r7, #24]
  return(result);
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <osMessageQueueGet+0x42>
 80045de:	4b2b      	ldr	r3, [pc, #172]	; (800468c <osMessageQueueGet+0xdc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d12e      	bne.n	8004644 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045e6:	f3ef 8311 	mrs	r3, BASEPRI
 80045ea:	617b      	str	r3, [r7, #20]
  return(result);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d028      	beq.n	8004644 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80045f2:	6a3b      	ldr	r3, [r7, #32]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d005      	beq.n	8004604 <osMessageQueueGet+0x54>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <osMessageQueueGet+0x54>
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d003      	beq.n	800460c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8004604:	f06f 0303 	mvn.w	r3, #3
 8004608:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800460a:	e038      	b.n	800467e <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004610:	f107 0310 	add.w	r3, r7, #16
 8004614:	461a      	mov	r2, r3
 8004616:	68b9      	ldr	r1, [r7, #8]
 8004618:	6a38      	ldr	r0, [r7, #32]
 800461a:	f000 fcd3 	bl	8004fc4 <xQueueReceiveFromISR>
 800461e:	4603      	mov	r3, r0
 8004620:	2b01      	cmp	r3, #1
 8004622:	d003      	beq.n	800462c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004624:	f06f 0302 	mvn.w	r3, #2
 8004628:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800462a:	e028      	b.n	800467e <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d025      	beq.n	800467e <osMessageQueueGet+0xce>
 8004632:	4b17      	ldr	r3, [pc, #92]	; (8004690 <osMessageQueueGet+0xe0>)
 8004634:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004638:	601a      	str	r2, [r3, #0]
 800463a:	f3bf 8f4f 	dsb	sy
 800463e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004642:	e01c      	b.n	800467e <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004644:	6a3b      	ldr	r3, [r7, #32]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d002      	beq.n	8004650 <osMessageQueueGet+0xa0>
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d103      	bne.n	8004658 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8004650:	f06f 0303 	mvn.w	r3, #3
 8004654:	627b      	str	r3, [r7, #36]	; 0x24
 8004656:	e013      	b.n	8004680 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004658:	683a      	ldr	r2, [r7, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	6a38      	ldr	r0, [r7, #32]
 800465e:	f000 fbd1 	bl	8004e04 <xQueueReceive>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d00b      	beq.n	8004680 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d003      	beq.n	8004676 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800466e:	f06f 0301 	mvn.w	r3, #1
 8004672:	627b      	str	r3, [r7, #36]	; 0x24
 8004674:	e004      	b.n	8004680 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004676:	f06f 0302 	mvn.w	r3, #2
 800467a:	627b      	str	r3, [r7, #36]	; 0x24
 800467c:	e000      	b.n	8004680 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800467e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004682:	4618      	mov	r0, r3
 8004684:	3728      	adds	r7, #40	; 0x28
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}
 800468a:	bf00      	nop
 800468c:	20000338 	.word	0x20000338
 8004690:	e000ed04 	.word	0xe000ed04

08004694 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	4a06      	ldr	r2, [pc, #24]	; (80046bc <vApplicationGetIdleTaskMemory+0x28>)
 80046a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4a05      	ldr	r2, [pc, #20]	; (80046c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80046aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2280      	movs	r2, #128	; 0x80
 80046b0:	601a      	str	r2, [r3, #0]
}
 80046b2:	bf00      	nop
 80046b4:	3714      	adds	r7, #20
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bc80      	pop	{r7}
 80046ba:	4770      	bx	lr
 80046bc:	2000033c 	.word	0x2000033c
 80046c0:	200003f8 	.word	0x200003f8

080046c4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80046c4:	b480      	push	{r7}
 80046c6:	b085      	sub	sp, #20
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	4a07      	ldr	r2, [pc, #28]	; (80046f0 <vApplicationGetTimerTaskMemory+0x2c>)
 80046d4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	4a06      	ldr	r2, [pc, #24]	; (80046f4 <vApplicationGetTimerTaskMemory+0x30>)
 80046da:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80046e2:	601a      	str	r2, [r3, #0]
}
 80046e4:	bf00      	nop
 80046e6:	3714      	adds	r7, #20
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bc80      	pop	{r7}
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	200005f8 	.word	0x200005f8
 80046f4:	200006b4 	.word	0x200006b4

080046f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 0208 	add.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f04f 32ff 	mov.w	r2, #4294967295
 8004710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0208 	add.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 0208 	add.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	bc80      	pop	{r7}
 8004734:	4770      	bx	lr

08004736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004736:	b480      	push	{r7}
 8004738:	b083      	sub	sp, #12
 800473a:	af00      	add	r7, sp, #0
 800473c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	bc80      	pop	{r7}
 800474c:	4770      	bx	lr

0800474e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b085      	sub	sp, #20
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
 8004756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	68fa      	ldr	r2, [r7, #12]
 8004762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	689a      	ldr	r2, [r3, #8]
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	683a      	ldr	r2, [r7, #0]
 8004772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr

08004794 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047aa:	d103      	bne.n	80047b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e00c      	b.n	80047ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	3308      	adds	r3, #8
 80047b8:	60fb      	str	r3, [r7, #12]
 80047ba:	e002      	b.n	80047c2 <vListInsert+0x2e>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	60fb      	str	r3, [r7, #12]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68ba      	ldr	r2, [r7, #8]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d2f6      	bcs.n	80047bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	685a      	ldr	r2, [r3, #4]
 80047d2:	683b      	ldr	r3, [r7, #0]
 80047d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	68fa      	ldr	r2, [r7, #12]
 80047e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	683a      	ldr	r2, [r7, #0]
 80047e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	601a      	str	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	3714      	adds	r7, #20
 80047fe:	46bd      	mov	sp, r7
 8004800:	bc80      	pop	{r7}
 8004802:	4770      	bx	lr

08004804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004804:	b480      	push	{r7}
 8004806:	b085      	sub	sp, #20
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	687a      	ldr	r2, [r7, #4]
 8004818:	6892      	ldr	r2, [r2, #8]
 800481a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6852      	ldr	r2, [r2, #4]
 8004824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	d103      	bne.n	8004838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	689a      	ldr	r2, [r3, #8]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	1e5a      	subs	r2, r3, #1
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
}
 800484c:	4618      	mov	r0, r3
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	bc80      	pop	{r7}
 8004854:	4770      	bx	lr
	...

08004858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b084      	sub	sp, #16
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d10a      	bne.n	8004882 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800487e:	bf00      	nop
 8004880:	e7fe      	b.n	8004880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004882:	f002 f8b3 	bl	80069ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488e:	68f9      	ldr	r1, [r7, #12]
 8004890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	441a      	add	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	3b01      	subs	r3, #1
 80048b4:	68f9      	ldr	r1, [r7, #12]
 80048b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b8:	fb01 f303 	mul.w	r3, r1, r3
 80048bc:	441a      	add	r2, r3
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	22ff      	movs	r2, #255	; 0xff
 80048c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	22ff      	movs	r2, #255	; 0xff
 80048ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d114      	bne.n	8004902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d01a      	beq.n	8004916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3310      	adds	r3, #16
 80048e4:	4618      	mov	r0, r3
 80048e6:	f001 f9d9 	bl	8005c9c <xTaskRemoveFromEventList>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d012      	beq.n	8004916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80048f0:	4b0c      	ldr	r3, [pc, #48]	; (8004924 <xQueueGenericReset+0xcc>)
 80048f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	f3bf 8f6f 	isb	sy
 8004900:	e009      	b.n	8004916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3310      	adds	r3, #16
 8004906:	4618      	mov	r0, r3
 8004908:	f7ff fef6 	bl	80046f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	3324      	adds	r3, #36	; 0x24
 8004910:	4618      	mov	r0, r3
 8004912:	f7ff fef1 	bl	80046f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004916:	f002 f899 	bl	8006a4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800491a:	2301      	movs	r3, #1
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08e      	sub	sp, #56	; 0x38
 800492c:	af02      	add	r7, sp, #8
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	607a      	str	r2, [r7, #4]
 8004934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d10a      	bne.n	8004952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800493c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004940:	f383 8811 	msr	BASEPRI, r3
 8004944:	f3bf 8f6f 	isb	sy
 8004948:	f3bf 8f4f 	dsb	sy
 800494c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800494e:	bf00      	nop
 8004950:	e7fe      	b.n	8004950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d10a      	bne.n	800496e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495c:	f383 8811 	msr	BASEPRI, r3
 8004960:	f3bf 8f6f 	isb	sy
 8004964:	f3bf 8f4f 	dsb	sy
 8004968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800496a:	bf00      	nop
 800496c:	e7fe      	b.n	800496c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <xQueueGenericCreateStatic+0x52>
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d001      	beq.n	800497e <xQueueGenericCreateStatic+0x56>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <xQueueGenericCreateStatic+0x58>
 800497e:	2300      	movs	r3, #0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d10a      	bne.n	800499a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	623b      	str	r3, [r7, #32]
}
 8004996:	bf00      	nop
 8004998:	e7fe      	b.n	8004998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d102      	bne.n	80049a6 <xQueueGenericCreateStatic+0x7e>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d101      	bne.n	80049aa <xQueueGenericCreateStatic+0x82>
 80049a6:	2301      	movs	r3, #1
 80049a8:	e000      	b.n	80049ac <xQueueGenericCreateStatic+0x84>
 80049aa:	2300      	movs	r3, #0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d10a      	bne.n	80049c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	61fb      	str	r3, [r7, #28]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80049c6:	2350      	movs	r3, #80	; 0x50
 80049c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	2b50      	cmp	r3, #80	; 0x50
 80049ce:	d00a      	beq.n	80049e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	61bb      	str	r3, [r7, #24]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80049ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d00d      	beq.n	8004a0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80049f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80049fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049fe:	9300      	str	r3, [sp, #0]
 8004a00:	4613      	mov	r3, r2
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 f843 	bl	8004a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3730      	adds	r7, #48	; 0x30
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b08a      	sub	sp, #40	; 0x28
 8004a1a:	af02      	add	r7, sp, #8
 8004a1c:	60f8      	str	r0, [r7, #12]
 8004a1e:	60b9      	str	r1, [r7, #8]
 8004a20:	4613      	mov	r3, r2
 8004a22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d10a      	bne.n	8004a40 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	613b      	str	r3, [r7, #16]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d102      	bne.n	8004a4c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e004      	b.n	8004a56 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	fb02 f303 	mul.w	r3, r2, r3
 8004a54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	3350      	adds	r3, #80	; 0x50
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	f002 f8c6 	bl	8006bec <pvPortMalloc>
 8004a60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004a62:	69bb      	ldr	r3, [r7, #24]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	3350      	adds	r3, #80	; 0x50
 8004a6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004a76:	79fa      	ldrb	r2, [r7, #7]
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	9300      	str	r3, [sp, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	68b9      	ldr	r1, [r7, #8]
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 f805 	bl	8004a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004a88:	69bb      	ldr	r3, [r7, #24]
	}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d103      	bne.n	8004aae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	69ba      	ldr	r2, [r7, #24]
 8004aaa:	601a      	str	r2, [r3, #0]
 8004aac:	e002      	b.n	8004ab4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	68ba      	ldr	r2, [r7, #8]
 8004abe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004ac0:	2101      	movs	r1, #1
 8004ac2:	69b8      	ldr	r0, [r7, #24]
 8004ac4:	f7ff fec8 	bl	8004858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	78fa      	ldrb	r2, [r7, #3]
 8004acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004ad0:	bf00      	nop
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b08e      	sub	sp, #56	; 0x38
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <xQueueGenericSend+0x32>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d103      	bne.n	8004b18 <xQueueGenericSend+0x40>
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d101      	bne.n	8004b1c <xQueueGenericSend+0x44>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e000      	b.n	8004b1e <xQueueGenericSend+0x46>
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <xQueueGenericSend+0x60>
	__asm volatile
 8004b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b26:	f383 8811 	msr	BASEPRI, r3
 8004b2a:	f3bf 8f6f 	isb	sy
 8004b2e:	f3bf 8f4f 	dsb	sy
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b34:	bf00      	nop
 8004b36:	e7fe      	b.n	8004b36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d103      	bne.n	8004b46 <xQueueGenericSend+0x6e>
 8004b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <xQueueGenericSend+0x72>
 8004b46:	2301      	movs	r3, #1
 8004b48:	e000      	b.n	8004b4c <xQueueGenericSend+0x74>
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10a      	bne.n	8004b66 <xQueueGenericSend+0x8e>
	__asm volatile
 8004b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	623b      	str	r3, [r7, #32]
}
 8004b62:	bf00      	nop
 8004b64:	e7fe      	b.n	8004b64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b66:	f001 fa5f 	bl	8006028 <xTaskGetSchedulerState>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d102      	bne.n	8004b76 <xQueueGenericSend+0x9e>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <xQueueGenericSend+0xa2>
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <xQueueGenericSend+0xa4>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d10a      	bne.n	8004b96 <xQueueGenericSend+0xbe>
	__asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	61fb      	str	r3, [r7, #28]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b96:	f001 ff29 	bl	80069ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d302      	bcc.n	8004bac <xQueueGenericSend+0xd4>
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d129      	bne.n	8004c00 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004bac:	683a      	ldr	r2, [r7, #0]
 8004bae:	68b9      	ldr	r1, [r7, #8]
 8004bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb2:	f000 fa87 	bl	80050c4 <prvCopyDataToQueue>
 8004bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d010      	beq.n	8004be2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	3324      	adds	r3, #36	; 0x24
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f001 f869 	bl	8005c9c <xTaskRemoveFromEventList>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d013      	beq.n	8004bf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004bd0:	4b3f      	ldr	r3, [pc, #252]	; (8004cd0 <xQueueGenericSend+0x1f8>)
 8004bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	e00a      	b.n	8004bf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d007      	beq.n	8004bf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <xQueueGenericSend+0x1f8>)
 8004bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004bf8:	f001 ff28 	bl	8006a4c <vPortExitCritical>
				return pdPASS;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e063      	b.n	8004cc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d103      	bne.n	8004c0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c06:	f001 ff21 	bl	8006a4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e05c      	b.n	8004cc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d106      	bne.n	8004c22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4618      	mov	r0, r3
 8004c1a:	f001 f8a3 	bl	8005d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c22:	f001 ff13 	bl	8006a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c26:	f000 fe0d 	bl	8005844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c2a:	f001 fedf 	bl	80069ec <vPortEnterCritical>
 8004c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c34:	b25b      	sxtb	r3, r3
 8004c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3a:	d103      	bne.n	8004c44 <xQueueGenericSend+0x16c>
 8004c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c4a:	b25b      	sxtb	r3, r3
 8004c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c50:	d103      	bne.n	8004c5a <xQueueGenericSend+0x182>
 8004c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c54:	2200      	movs	r2, #0
 8004c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5a:	f001 fef7 	bl	8006a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c5e:	1d3a      	adds	r2, r7, #4
 8004c60:	f107 0314 	add.w	r3, r7, #20
 8004c64:	4611      	mov	r1, r2
 8004c66:	4618      	mov	r0, r3
 8004c68:	f001 f892 	bl	8005d90 <xTaskCheckForTimeOut>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d124      	bne.n	8004cbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c74:	f000 fb1e 	bl	80052b4 <prvIsQueueFull>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d018      	beq.n	8004cb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c80:	3310      	adds	r3, #16
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4611      	mov	r1, r2
 8004c86:	4618      	mov	r0, r3
 8004c88:	f000 ffb8 	bl	8005bfc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c8e:	f000 faa9 	bl	80051e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004c92:	f000 fde5 	bl	8005860 <xTaskResumeAll>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	f47f af7c 	bne.w	8004b96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004c9e:	4b0c      	ldr	r3, [pc, #48]	; (8004cd0 <xQueueGenericSend+0x1f8>)
 8004ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ca4:	601a      	str	r2, [r3, #0]
 8004ca6:	f3bf 8f4f 	dsb	sy
 8004caa:	f3bf 8f6f 	isb	sy
 8004cae:	e772      	b.n	8004b96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cb2:	f000 fa97 	bl	80051e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004cb6:	f000 fdd3 	bl	8005860 <xTaskResumeAll>
 8004cba:	e76c      	b.n	8004b96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cbe:	f000 fa91 	bl	80051e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cc2:	f000 fdcd 	bl	8005860 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004cc6:	2300      	movs	r3, #0
		}
	}
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3738      	adds	r7, #56	; 0x38
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	e000ed04 	.word	0xe000ed04

08004cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08e      	sub	sp, #56	; 0x38
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
 8004ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004cfe:	bf00      	nop
 8004d00:	e7fe      	b.n	8004d00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d103      	bne.n	8004d10 <xQueueGenericSendFromISR+0x3c>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <xQueueGenericSendFromISR+0x40>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <xQueueGenericSendFromISR+0x42>
 8004d14:	2300      	movs	r3, #0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10a      	bne.n	8004d30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	623b      	str	r3, [r7, #32]
}
 8004d2c:	bf00      	nop
 8004d2e:	e7fe      	b.n	8004d2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <xQueueGenericSendFromISR+0x6a>
 8004d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d3a:	2b01      	cmp	r3, #1
 8004d3c:	d101      	bne.n	8004d42 <xQueueGenericSendFromISR+0x6e>
 8004d3e:	2301      	movs	r3, #1
 8004d40:	e000      	b.n	8004d44 <xQueueGenericSendFromISR+0x70>
 8004d42:	2300      	movs	r3, #0
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	61fb      	str	r3, [r7, #28]
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004d5e:	f001 ff07 	bl	8006b70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004d62:	f3ef 8211 	mrs	r2, BASEPRI
 8004d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f3bf 8f4f 	dsb	sy
 8004d76:	61ba      	str	r2, [r7, #24]
 8004d78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004d7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <xQueueGenericSendFromISR+0xbc>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d12c      	bne.n	8004dea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004da0:	f000 f990 	bl	80050c4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004da4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dac:	d112      	bne.n	8004dd4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d016      	beq.n	8004de4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db8:	3324      	adds	r3, #36	; 0x24
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 ff6e 	bl	8005c9c <xTaskRemoveFromEventList>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00e      	beq.n	8004de4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00b      	beq.n	8004de4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	e007      	b.n	8004de4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004dd8:	3301      	adds	r3, #1
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	b25a      	sxtb	r2, r3
 8004dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004de4:	2301      	movs	r3, #1
 8004de6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004de8:	e001      	b.n	8004dee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004df8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3738      	adds	r7, #56	; 0x38
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bd80      	pop	{r7, pc}

08004e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08c      	sub	sp, #48	; 0x30
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e10:	2300      	movs	r3, #0
 8004e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10a      	bne.n	8004e34 <xQueueReceive+0x30>
	__asm volatile
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	623b      	str	r3, [r7, #32]
}
 8004e30:	bf00      	nop
 8004e32:	e7fe      	b.n	8004e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d103      	bne.n	8004e42 <xQueueReceive+0x3e>
 8004e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d101      	bne.n	8004e46 <xQueueReceive+0x42>
 8004e42:	2301      	movs	r3, #1
 8004e44:	e000      	b.n	8004e48 <xQueueReceive+0x44>
 8004e46:	2300      	movs	r3, #0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d10a      	bne.n	8004e62 <xQueueReceive+0x5e>
	__asm volatile
 8004e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e50:	f383 8811 	msr	BASEPRI, r3
 8004e54:	f3bf 8f6f 	isb	sy
 8004e58:	f3bf 8f4f 	dsb	sy
 8004e5c:	61fb      	str	r3, [r7, #28]
}
 8004e5e:	bf00      	nop
 8004e60:	e7fe      	b.n	8004e60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e62:	f001 f8e1 	bl	8006028 <xTaskGetSchedulerState>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <xQueueReceive+0x6e>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <xQueueReceive+0x72>
 8004e72:	2301      	movs	r3, #1
 8004e74:	e000      	b.n	8004e78 <xQueueReceive+0x74>
 8004e76:	2300      	movs	r3, #0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <xQueueReceive+0x8e>
	__asm volatile
 8004e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e80:	f383 8811 	msr	BASEPRI, r3
 8004e84:	f3bf 8f6f 	isb	sy
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	61bb      	str	r3, [r7, #24]
}
 8004e8e:	bf00      	nop
 8004e90:	e7fe      	b.n	8004e90 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e92:	f001 fdab 	bl	80069ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d01f      	beq.n	8004ee2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004ea2:	68b9      	ldr	r1, [r7, #8]
 8004ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ea6:	f000 f977 	bl	8005198 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	1e5a      	subs	r2, r3, #1
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00f      	beq.n	8004eda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebc:	3310      	adds	r3, #16
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 feec 	bl	8005c9c <xTaskRemoveFromEventList>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004eca:	4b3d      	ldr	r3, [pc, #244]	; (8004fc0 <xQueueReceive+0x1bc>)
 8004ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ed0:	601a      	str	r2, [r3, #0]
 8004ed2:	f3bf 8f4f 	dsb	sy
 8004ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004eda:	f001 fdb7 	bl	8006a4c <vPortExitCritical>
				return pdPASS;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e069      	b.n	8004fb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d103      	bne.n	8004ef0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004ee8:	f001 fdb0 	bl	8006a4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e062      	b.n	8004fb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d106      	bne.n	8004f04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ef6:	f107 0310 	add.w	r3, r7, #16
 8004efa:	4618      	mov	r0, r3
 8004efc:	f000 ff32 	bl	8005d64 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f00:	2301      	movs	r3, #1
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f04:	f001 fda2 	bl	8006a4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f08:	f000 fc9c 	bl	8005844 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f0c:	f001 fd6e 	bl	80069ec <vPortEnterCritical>
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f16:	b25b      	sxtb	r3, r3
 8004f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f1c:	d103      	bne.n	8004f26 <xQueueReceive+0x122>
 8004f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f2c:	b25b      	sxtb	r3, r3
 8004f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f32:	d103      	bne.n	8004f3c <xQueueReceive+0x138>
 8004f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3c:	f001 fd86 	bl	8006a4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f40:	1d3a      	adds	r2, r7, #4
 8004f42:	f107 0310 	add.w	r3, r7, #16
 8004f46:	4611      	mov	r1, r2
 8004f48:	4618      	mov	r0, r3
 8004f4a:	f000 ff21 	bl	8005d90 <xTaskCheckForTimeOut>
 8004f4e:	4603      	mov	r3, r0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d123      	bne.n	8004f9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f56:	f000 f997 	bl	8005288 <prvIsQueueEmpty>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d017      	beq.n	8004f90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f62:	3324      	adds	r3, #36	; 0x24
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	4611      	mov	r1, r2
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 fe47 	bl	8005bfc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f70:	f000 f938 	bl	80051e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004f74:	f000 fc74 	bl	8005860 <xTaskResumeAll>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d189      	bne.n	8004e92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004f7e:	4b10      	ldr	r3, [pc, #64]	; (8004fc0 <xQueueReceive+0x1bc>)
 8004f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f84:	601a      	str	r2, [r3, #0]
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	f3bf 8f6f 	isb	sy
 8004f8e:	e780      	b.n	8004e92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f92:	f000 f927 	bl	80051e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f96:	f000 fc63 	bl	8005860 <xTaskResumeAll>
 8004f9a:	e77a      	b.n	8004e92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f9e:	f000 f921 	bl	80051e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fa2:	f000 fc5d 	bl	8005860 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fa8:	f000 f96e 	bl	8005288 <prvIsQueueEmpty>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f43f af6f 	beq.w	8004e92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	3730      	adds	r7, #48	; 0x30
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	bd80      	pop	{r7, pc}
 8004fbe:	bf00      	nop
 8004fc0:	e000ed04 	.word	0xe000ed04

08004fc4 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b08e      	sub	sp, #56	; 0x38
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d10a      	bne.n	8004ff0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fde:	f383 8811 	msr	BASEPRI, r3
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	f3bf 8f4f 	dsb	sy
 8004fea:	623b      	str	r3, [r7, #32]
}
 8004fec:	bf00      	nop
 8004fee:	e7fe      	b.n	8004fee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d103      	bne.n	8004ffe <xQueueReceiveFromISR+0x3a>
 8004ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <xQueueReceiveFromISR+0x3e>
 8004ffe:	2301      	movs	r3, #1
 8005000:	e000      	b.n	8005004 <xQueueReceiveFromISR+0x40>
 8005002:	2300      	movs	r3, #0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10a      	bne.n	800501e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	f383 8811 	msr	BASEPRI, r3
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	61fb      	str	r3, [r7, #28]
}
 800501a:	bf00      	nop
 800501c:	e7fe      	b.n	800501c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800501e:	f001 fda7 	bl	8006b70 <vPortValidateInterruptPriority>
	__asm volatile
 8005022:	f3ef 8211 	mrs	r2, BASEPRI
 8005026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502a:	f383 8811 	msr	BASEPRI, r3
 800502e:	f3bf 8f6f 	isb	sy
 8005032:	f3bf 8f4f 	dsb	sy
 8005036:	61ba      	str	r2, [r7, #24]
 8005038:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800503a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005046:	2b00      	cmp	r3, #0
 8005048:	d02f      	beq.n	80050aa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800504a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005050:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005058:	f000 f89e 	bl	8005198 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	1e5a      	subs	r2, r3, #1
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005064:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800506c:	d112      	bne.n	8005094 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800506e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d016      	beq.n	80050a4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	3310      	adds	r3, #16
 800507a:	4618      	mov	r0, r3
 800507c:	f000 fe0e 	bl	8005c9c <xTaskRemoveFromEventList>
 8005080:	4603      	mov	r3, r0
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00e      	beq.n	80050a4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00b      	beq.n	80050a4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	601a      	str	r2, [r3, #0]
 8005092:	e007      	b.n	80050a4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005098:	3301      	adds	r3, #1
 800509a:	b2db      	uxtb	r3, r3
 800509c:	b25a      	sxtb	r2, r3
 800509e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80050a4:	2301      	movs	r3, #1
 80050a6:	637b      	str	r3, [r7, #52]	; 0x34
 80050a8:	e001      	b.n	80050ae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	637b      	str	r3, [r7, #52]	; 0x34
 80050ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f383 8811 	msr	BASEPRI, r3
}
 80050b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3738      	adds	r7, #56	; 0x38
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80050c4:	b580      	push	{r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	60f8      	str	r0, [r7, #12]
 80050cc:	60b9      	str	r1, [r7, #8]
 80050ce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80050d0:	2300      	movs	r3, #0
 80050d2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050d8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d10d      	bne.n	80050fe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d14d      	bne.n	8005186 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ffb8 	bl	8006064 <xTaskPriorityDisinherit>
 80050f4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	2200      	movs	r2, #0
 80050fa:	605a      	str	r2, [r3, #4]
 80050fc:	e043      	b.n	8005186 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d119      	bne.n	8005138 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	6898      	ldr	r0, [r3, #8]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	461a      	mov	r2, r3
 800510e:	68b9      	ldr	r1, [r7, #8]
 8005110:	f002 f867 	bl	80071e2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	689a      	ldr	r2, [r3, #8]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	429a      	cmp	r2, r3
 800512c:	d32b      	bcc.n	8005186 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	609a      	str	r2, [r3, #8]
 8005136:	e026      	b.n	8005186 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	68d8      	ldr	r0, [r3, #12]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005140:	461a      	mov	r2, r3
 8005142:	68b9      	ldr	r1, [r7, #8]
 8005144:	f002 f84d 	bl	80071e2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	425b      	negs	r3, r3
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68da      	ldr	r2, [r3, #12]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d207      	bcs.n	8005174 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	685a      	ldr	r2, [r3, #4]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516c:	425b      	negs	r3, r3
 800516e:	441a      	add	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b02      	cmp	r3, #2
 8005178:	d105      	bne.n	8005186 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005180:	693b      	ldr	r3, [r7, #16]
 8005182:	3b01      	subs	r3, #1
 8005184:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	1c5a      	adds	r2, r3, #1
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800518e:	697b      	ldr	r3, [r7, #20]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3718      	adds	r7, #24
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d018      	beq.n	80051dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68da      	ldr	r2, [r3, #12]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b2:	441a      	add	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68da      	ldr	r2, [r3, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d303      	bcc.n	80051cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681a      	ldr	r2, [r3, #0]
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	68d9      	ldr	r1, [r3, #12]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	461a      	mov	r2, r3
 80051d6:	6838      	ldr	r0, [r7, #0]
 80051d8:	f002 f803 	bl	80071e2 <memcpy>
	}
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80051ec:	f001 fbfe 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051f8:	e011      	b.n	800521e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d012      	beq.n	8005228 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3324      	adds	r3, #36	; 0x24
 8005206:	4618      	mov	r0, r3
 8005208:	f000 fd48 	bl	8005c9c <xTaskRemoveFromEventList>
 800520c:	4603      	mov	r3, r0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d001      	beq.n	8005216 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005212:	f000 fe1f 	bl	8005e54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005216:	7bfb      	ldrb	r3, [r7, #15]
 8005218:	3b01      	subs	r3, #1
 800521a:	b2db      	uxtb	r3, r3
 800521c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800521e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005222:	2b00      	cmp	r3, #0
 8005224:	dce9      	bgt.n	80051fa <prvUnlockQueue+0x16>
 8005226:	e000      	b.n	800522a <prvUnlockQueue+0x46>
					break;
 8005228:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	22ff      	movs	r2, #255	; 0xff
 800522e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005232:	f001 fc0b 	bl	8006a4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005236:	f001 fbd9 	bl	80069ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005240:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005242:	e011      	b.n	8005268 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d012      	beq.n	8005272 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3310      	adds	r3, #16
 8005250:	4618      	mov	r0, r3
 8005252:	f000 fd23 	bl	8005c9c <xTaskRemoveFromEventList>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800525c:	f000 fdfa 	bl	8005e54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005260:	7bbb      	ldrb	r3, [r7, #14]
 8005262:	3b01      	subs	r3, #1
 8005264:	b2db      	uxtb	r3, r3
 8005266:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005268:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800526c:	2b00      	cmp	r3, #0
 800526e:	dce9      	bgt.n	8005244 <prvUnlockQueue+0x60>
 8005270:	e000      	b.n	8005274 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005272:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	22ff      	movs	r2, #255	; 0xff
 8005278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800527c:	f001 fbe6 	bl	8006a4c <vPortExitCritical>
}
 8005280:	bf00      	nop
 8005282:	3710      	adds	r7, #16
 8005284:	46bd      	mov	sp, r7
 8005286:	bd80      	pop	{r7, pc}

08005288 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b084      	sub	sp, #16
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005290:	f001 fbac 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005298:	2b00      	cmp	r3, #0
 800529a:	d102      	bne.n	80052a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800529c:	2301      	movs	r3, #1
 800529e:	60fb      	str	r3, [r7, #12]
 80052a0:	e001      	b.n	80052a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052a6:	f001 fbd1 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3710      	adds	r7, #16
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}

080052b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80052bc:	f001 fb96 	bl	80069ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d102      	bne.n	80052d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80052cc:	2301      	movs	r3, #1
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e001      	b.n	80052d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80052d2:	2300      	movs	r3, #0
 80052d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80052d6:	f001 fbb9 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 80052da:	68fb      	ldr	r3, [r7, #12]
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80052e4:	b480      	push	{r7}
 80052e6:	b085      	sub	sp, #20
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052ee:	2300      	movs	r3, #0
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	e014      	b.n	800531e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052f4:	4a0e      	ldr	r2, [pc, #56]	; (8005330 <vQueueAddToRegistry+0x4c>)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005300:	490b      	ldr	r1, [pc, #44]	; (8005330 <vQueueAddToRegistry+0x4c>)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800530a:	4a09      	ldr	r2, [pc, #36]	; (8005330 <vQueueAddToRegistry+0x4c>)
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	00db      	lsls	r3, r3, #3
 8005310:	4413      	add	r3, r2
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005316:	e006      	b.n	8005326 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	3301      	adds	r3, #1
 800531c:	60fb      	str	r3, [r7, #12]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2b07      	cmp	r3, #7
 8005322:	d9e7      	bls.n	80052f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005324:	bf00      	nop
 8005326:	bf00      	nop
 8005328:	3714      	adds	r7, #20
 800532a:	46bd      	mov	sp, r7
 800532c:	bc80      	pop	{r7}
 800532e:	4770      	bx	lr
 8005330:	20000ab4 	.word	0x20000ab4

08005334 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005344:	f001 fb52 	bl	80069ec <vPortEnterCritical>
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800534e:	b25b      	sxtb	r3, r3
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005354:	d103      	bne.n	800535e <vQueueWaitForMessageRestricted+0x2a>
 8005356:	697b      	ldr	r3, [r7, #20]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005364:	b25b      	sxtb	r3, r3
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295
 800536a:	d103      	bne.n	8005374 <vQueueWaitForMessageRestricted+0x40>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005374:	f001 fb6a 	bl	8006a4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d106      	bne.n	800538e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	3324      	adds	r3, #36	; 0x24
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	68b9      	ldr	r1, [r7, #8]
 8005388:	4618      	mov	r0, r3
 800538a:	f000 fc5b 	bl	8005c44 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800538e:	6978      	ldr	r0, [r7, #20]
 8005390:	f7ff ff28 	bl	80051e4 <prvUnlockQueue>
	}
 8005394:	bf00      	nop
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800539c:	b580      	push	{r7, lr}
 800539e:	b08e      	sub	sp, #56	; 0x38
 80053a0:	af04      	add	r7, sp, #16
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
 80053a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80053aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	623b      	str	r3, [r7, #32]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80053c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d10a      	bne.n	80053e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80053cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d0:	f383 8811 	msr	BASEPRI, r3
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	f3bf 8f4f 	dsb	sy
 80053dc:	61fb      	str	r3, [r7, #28]
}
 80053de:	bf00      	nop
 80053e0:	e7fe      	b.n	80053e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80053e2:	23bc      	movs	r3, #188	; 0xbc
 80053e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	2bbc      	cmp	r3, #188	; 0xbc
 80053ea:	d00a      	beq.n	8005402 <xTaskCreateStatic+0x66>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	61bb      	str	r3, [r7, #24]
}
 80053fe:	bf00      	nop
 8005400:	e7fe      	b.n	8005400 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01e      	beq.n	8005446 <xTaskCreateStatic+0xaa>
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d01b      	beq.n	8005446 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800540e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005410:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005416:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	2202      	movs	r2, #2
 800541c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005420:	2300      	movs	r3, #0
 8005422:	9303      	str	r3, [sp, #12]
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	9302      	str	r3, [sp, #8]
 8005428:	f107 0314 	add.w	r3, r7, #20
 800542c:	9301      	str	r3, [sp, #4]
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	9300      	str	r3, [sp, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f851 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800543e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005440:	f000 f8ec 	bl	800561c <prvAddNewTaskToReadyList>
 8005444:	e001      	b.n	800544a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8005446:	2300      	movs	r3, #0
 8005448:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800544a:	697b      	ldr	r3, [r7, #20]
	}
 800544c:	4618      	mov	r0, r3
 800544e:	3728      	adds	r7, #40	; 0x28
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005454:	b580      	push	{r7, lr}
 8005456:	b08c      	sub	sp, #48	; 0x30
 8005458:	af04      	add	r7, sp, #16
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	603b      	str	r3, [r7, #0]
 8005460:	4613      	mov	r3, r2
 8005462:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005464:	88fb      	ldrh	r3, [r7, #6]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	4618      	mov	r0, r3
 800546a:	f001 fbbf 	bl	8006bec <pvPortMalloc>
 800546e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00e      	beq.n	8005494 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005476:	20bc      	movs	r0, #188	; 0xbc
 8005478:	f001 fbb8 	bl	8006bec <pvPortMalloc>
 800547c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d003      	beq.n	800548c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	631a      	str	r2, [r3, #48]	; 0x30
 800548a:	e005      	b.n	8005498 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800548c:	6978      	ldr	r0, [r7, #20]
 800548e:	f001 fc71 	bl	8006d74 <vPortFree>
 8005492:	e001      	b.n	8005498 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005494:	2300      	movs	r3, #0
 8005496:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d017      	beq.n	80054ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80054a6:	88fa      	ldrh	r2, [r7, #6]
 80054a8:	2300      	movs	r3, #0
 80054aa:	9303      	str	r3, [sp, #12]
 80054ac:	69fb      	ldr	r3, [r7, #28]
 80054ae:	9302      	str	r3, [sp, #8]
 80054b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054b2:	9301      	str	r3, [sp, #4]
 80054b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054b6:	9300      	str	r3, [sp, #0]
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f80f 	bl	80054e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80054c2:	69f8      	ldr	r0, [r7, #28]
 80054c4:	f000 f8aa 	bl	800561c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80054c8:	2301      	movs	r3, #1
 80054ca:	61bb      	str	r3, [r7, #24]
 80054cc:	e002      	b.n	80054d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80054ce:	f04f 33ff 	mov.w	r3, #4294967295
 80054d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80054d4:	69bb      	ldr	r3, [r7, #24]
	}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3720      	adds	r7, #32
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
	...

080054e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b088      	sub	sp, #32
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
 80054ec:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	461a      	mov	r2, r3
 80054f8:	21a5      	movs	r1, #165	; 0xa5
 80054fa:	f001 fe80 	bl	80071fe <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005508:	3b01      	subs	r3, #1
 800550a:	009b      	lsls	r3, r3, #2
 800550c:	4413      	add	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f023 0307 	bic.w	r3, r3, #7
 8005516:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00a      	beq.n	8005538 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005526:	f383 8811 	msr	BASEPRI, r3
 800552a:	f3bf 8f6f 	isb	sy
 800552e:	f3bf 8f4f 	dsb	sy
 8005532:	617b      	str	r3, [r7, #20]
}
 8005534:	bf00      	nop
 8005536:	e7fe      	b.n	8005536 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005538:	2300      	movs	r3, #0
 800553a:	61fb      	str	r3, [r7, #28]
 800553c:	e012      	b.n	8005564 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800553e:	68ba      	ldr	r2, [r7, #8]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	4413      	add	r3, r2
 8005544:	7819      	ldrb	r1, [r3, #0]
 8005546:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005548:	69fb      	ldr	r3, [r7, #28]
 800554a:	4413      	add	r3, r2
 800554c:	3334      	adds	r3, #52	; 0x34
 800554e:	460a      	mov	r2, r1
 8005550:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d006      	beq.n	800556c <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800555e:	69fb      	ldr	r3, [r7, #28]
 8005560:	3301      	adds	r3, #1
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	2b0f      	cmp	r3, #15
 8005568:	d9e9      	bls.n	800553e <prvInitialiseNewTask+0x5e>
 800556a:	e000      	b.n	800556e <prvInitialiseNewTask+0x8e>
		{
			break;
 800556c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800556e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005570:	2200      	movs	r2, #0
 8005572:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005578:	2b37      	cmp	r3, #55	; 0x37
 800557a:	d901      	bls.n	8005580 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800557c:	2337      	movs	r3, #55	; 0x37
 800557e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	2200      	movs	r2, #0
 8005590:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005594:	3304      	adds	r3, #4
 8005596:	4618      	mov	r0, r3
 8005598:	f7ff f8cd 	bl	8004736 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	3318      	adds	r3, #24
 80055a0:	4618      	mov	r0, r3
 80055a2:	f7ff f8c8 	bl	8004736 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055aa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80055b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80055bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80055cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ce:	3354      	adds	r3, #84	; 0x54
 80055d0:	2260      	movs	r2, #96	; 0x60
 80055d2:	2100      	movs	r1, #0
 80055d4:	4618      	mov	r0, r3
 80055d6:	f001 fe12 	bl	80071fe <memset>
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	4a0c      	ldr	r2, [pc, #48]	; (8005610 <prvInitialiseNewTask+0x130>)
 80055de:	659a      	str	r2, [r3, #88]	; 0x58
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	4a0c      	ldr	r2, [pc, #48]	; (8005614 <prvInitialiseNewTask+0x134>)
 80055e4:	65da      	str	r2, [r3, #92]	; 0x5c
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	4a0b      	ldr	r2, [pc, #44]	; (8005618 <prvInitialiseNewTask+0x138>)
 80055ea:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055ec:	683a      	ldr	r2, [r7, #0]
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	69b8      	ldr	r0, [r7, #24]
 80055f2:	f001 f90b 	bl	800680c <pxPortInitialiseStack>
 80055f6:	4602      	mov	r2, r0
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d002      	beq.n	8005608 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005604:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005606:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005608:	bf00      	nop
 800560a:	3720      	adds	r7, #32
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	08009ce4 	.word	0x08009ce4
 8005614:	08009d04 	.word	0x08009d04
 8005618:	08009cc4 	.word	0x08009cc4

0800561c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b082      	sub	sp, #8
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005624:	f001 f9e2 	bl	80069ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005628:	4b2d      	ldr	r3, [pc, #180]	; (80056e0 <prvAddNewTaskToReadyList+0xc4>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	4a2c      	ldr	r2, [pc, #176]	; (80056e0 <prvAddNewTaskToReadyList+0xc4>)
 8005630:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005632:	4b2c      	ldr	r3, [pc, #176]	; (80056e4 <prvAddNewTaskToReadyList+0xc8>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d109      	bne.n	800564e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800563a:	4a2a      	ldr	r2, [pc, #168]	; (80056e4 <prvAddNewTaskToReadyList+0xc8>)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005640:	4b27      	ldr	r3, [pc, #156]	; (80056e0 <prvAddNewTaskToReadyList+0xc4>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b01      	cmp	r3, #1
 8005646:	d110      	bne.n	800566a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005648:	f000 fc28 	bl	8005e9c <prvInitialiseTaskLists>
 800564c:	e00d      	b.n	800566a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800564e:	4b26      	ldr	r3, [pc, #152]	; (80056e8 <prvAddNewTaskToReadyList+0xcc>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d109      	bne.n	800566a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005656:	4b23      	ldr	r3, [pc, #140]	; (80056e4 <prvAddNewTaskToReadyList+0xc8>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	429a      	cmp	r2, r3
 8005662:	d802      	bhi.n	800566a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005664:	4a1f      	ldr	r2, [pc, #124]	; (80056e4 <prvAddNewTaskToReadyList+0xc8>)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800566a:	4b20      	ldr	r3, [pc, #128]	; (80056ec <prvAddNewTaskToReadyList+0xd0>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	3301      	adds	r3, #1
 8005670:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <prvAddNewTaskToReadyList+0xd0>)
 8005672:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005674:	4b1d      	ldr	r3, [pc, #116]	; (80056ec <prvAddNewTaskToReadyList+0xd0>)
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <prvAddNewTaskToReadyList+0xd4>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	429a      	cmp	r2, r3
 8005686:	d903      	bls.n	8005690 <prvAddNewTaskToReadyList+0x74>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800568c:	4a18      	ldr	r2, [pc, #96]	; (80056f0 <prvAddNewTaskToReadyList+0xd4>)
 800568e:	6013      	str	r3, [r2, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4a15      	ldr	r2, [pc, #84]	; (80056f4 <prvAddNewTaskToReadyList+0xd8>)
 800569e:	441a      	add	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f7ff f851 	bl	800474e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80056ac:	f001 f9ce 	bl	8006a4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80056b0:	4b0d      	ldr	r3, [pc, #52]	; (80056e8 <prvAddNewTaskToReadyList+0xcc>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80056b8:	4b0a      	ldr	r3, [pc, #40]	; (80056e4 <prvAddNewTaskToReadyList+0xc8>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d207      	bcs.n	80056d6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80056c6:	4b0c      	ldr	r3, [pc, #48]	; (80056f8 <prvAddNewTaskToReadyList+0xdc>)
 80056c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	f3bf 8f4f 	dsb	sy
 80056d2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056d6:	bf00      	nop
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
 80056de:	bf00      	nop
 80056e0:	20000fc8 	.word	0x20000fc8
 80056e4:	20000af4 	.word	0x20000af4
 80056e8:	20000fd4 	.word	0x20000fd4
 80056ec:	20000fe4 	.word	0x20000fe4
 80056f0:	20000fd0 	.word	0x20000fd0
 80056f4:	20000af8 	.word	0x20000af8
 80056f8:	e000ed04 	.word	0xe000ed04

080056fc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005704:	2300      	movs	r3, #0
 8005706:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d017      	beq.n	800573e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <vTaskDelay+0x60>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d00a      	beq.n	800572c <vTaskDelay+0x30>
	__asm volatile
 8005716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800571a:	f383 8811 	msr	BASEPRI, r3
 800571e:	f3bf 8f6f 	isb	sy
 8005722:	f3bf 8f4f 	dsb	sy
 8005726:	60bb      	str	r3, [r7, #8]
}
 8005728:	bf00      	nop
 800572a:	e7fe      	b.n	800572a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800572c:	f000 f88a 	bl	8005844 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005730:	2100      	movs	r1, #0
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fd04 	bl	8006140 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005738:	f000 f892 	bl	8005860 <xTaskResumeAll>
 800573c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d107      	bne.n	8005754 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005744:	4b06      	ldr	r3, [pc, #24]	; (8005760 <vTaskDelay+0x64>)
 8005746:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	f3bf 8f4f 	dsb	sy
 8005750:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	20000ff0 	.word	0x20000ff0
 8005760:	e000ed04 	.word	0xe000ed04

08005764 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08a      	sub	sp, #40	; 0x28
 8005768:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800576e:	2300      	movs	r3, #0
 8005770:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005772:	463a      	mov	r2, r7
 8005774:	1d39      	adds	r1, r7, #4
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	4618      	mov	r0, r3
 800577c:	f7fe ff8a 	bl	8004694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005780:	6839      	ldr	r1, [r7, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	9202      	str	r2, [sp, #8]
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	2300      	movs	r3, #0
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	460a      	mov	r2, r1
 8005792:	4924      	ldr	r1, [pc, #144]	; (8005824 <vTaskStartScheduler+0xc0>)
 8005794:	4824      	ldr	r0, [pc, #144]	; (8005828 <vTaskStartScheduler+0xc4>)
 8005796:	f7ff fe01 	bl	800539c <xTaskCreateStatic>
 800579a:	4603      	mov	r3, r0
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <vTaskStartScheduler+0xc8>)
 800579e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80057a0:	4b22      	ldr	r3, [pc, #136]	; (800582c <vTaskStartScheduler+0xc8>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d002      	beq.n	80057ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80057a8:	2301      	movs	r3, #1
 80057aa:	617b      	str	r3, [r7, #20]
 80057ac:	e001      	b.n	80057b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80057ae:	2300      	movs	r3, #0
 80057b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d102      	bne.n	80057be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80057b8:	f000 fd16 	bl	80061e8 <xTimerCreateTimerTask>
 80057bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d11b      	bne.n	80057fc <vTaskStartScheduler+0x98>
	__asm volatile
 80057c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057c8:	f383 8811 	msr	BASEPRI, r3
 80057cc:	f3bf 8f6f 	isb	sy
 80057d0:	f3bf 8f4f 	dsb	sy
 80057d4:	613b      	str	r3, [r7, #16]
}
 80057d6:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80057d8:	4b15      	ldr	r3, [pc, #84]	; (8005830 <vTaskStartScheduler+0xcc>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	3354      	adds	r3, #84	; 0x54
 80057de:	4a15      	ldr	r2, [pc, #84]	; (8005834 <vTaskStartScheduler+0xd0>)
 80057e0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80057e2:	4b15      	ldr	r3, [pc, #84]	; (8005838 <vTaskStartScheduler+0xd4>)
 80057e4:	f04f 32ff 	mov.w	r2, #4294967295
 80057e8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80057ea:	4b14      	ldr	r3, [pc, #80]	; (800583c <vTaskStartScheduler+0xd8>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <vTaskStartScheduler+0xdc>)
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057f6:	f001 f887 	bl	8006908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057fa:	e00e      	b.n	800581a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005802:	d10a      	bne.n	800581a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005808:	f383 8811 	msr	BASEPRI, r3
 800580c:	f3bf 8f6f 	isb	sy
 8005810:	f3bf 8f4f 	dsb	sy
 8005814:	60fb      	str	r3, [r7, #12]
}
 8005816:	bf00      	nop
 8005818:	e7fe      	b.n	8005818 <vTaskStartScheduler+0xb4>
}
 800581a:	bf00      	nop
 800581c:	3718      	adds	r7, #24
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	08009c10 	.word	0x08009c10
 8005828:	08005e6d 	.word	0x08005e6d
 800582c:	20000fec 	.word	0x20000fec
 8005830:	20000af4 	.word	0x20000af4
 8005834:	20000010 	.word	0x20000010
 8005838:	20000fe8 	.word	0x20000fe8
 800583c:	20000fd4 	.word	0x20000fd4
 8005840:	20000fcc 	.word	0x20000fcc

08005844 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005844:	b480      	push	{r7}
 8005846:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005848:	4b04      	ldr	r3, [pc, #16]	; (800585c <vTaskSuspendAll+0x18>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	3301      	adds	r3, #1
 800584e:	4a03      	ldr	r2, [pc, #12]	; (800585c <vTaskSuspendAll+0x18>)
 8005850:	6013      	str	r3, [r2, #0]
}
 8005852:	bf00      	nop
 8005854:	46bd      	mov	sp, r7
 8005856:	bc80      	pop	{r7}
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	20000ff0 	.word	0x20000ff0

08005860 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800586a:	2300      	movs	r3, #0
 800586c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800586e:	4b42      	ldr	r3, [pc, #264]	; (8005978 <xTaskResumeAll+0x118>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d10a      	bne.n	800588c <xTaskResumeAll+0x2c>
	__asm volatile
 8005876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587a:	f383 8811 	msr	BASEPRI, r3
 800587e:	f3bf 8f6f 	isb	sy
 8005882:	f3bf 8f4f 	dsb	sy
 8005886:	603b      	str	r3, [r7, #0]
}
 8005888:	bf00      	nop
 800588a:	e7fe      	b.n	800588a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800588c:	f001 f8ae 	bl	80069ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005890:	4b39      	ldr	r3, [pc, #228]	; (8005978 <xTaskResumeAll+0x118>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	3b01      	subs	r3, #1
 8005896:	4a38      	ldr	r2, [pc, #224]	; (8005978 <xTaskResumeAll+0x118>)
 8005898:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800589a:	4b37      	ldr	r3, [pc, #220]	; (8005978 <xTaskResumeAll+0x118>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d162      	bne.n	8005968 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80058a2:	4b36      	ldr	r3, [pc, #216]	; (800597c <xTaskResumeAll+0x11c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d05e      	beq.n	8005968 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058aa:	e02f      	b.n	800590c <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80058ac:	4b34      	ldr	r3, [pc, #208]	; (8005980 <xTaskResumeAll+0x120>)
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	3318      	adds	r3, #24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f7fe ffa3 	bl	8004804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3304      	adds	r3, #4
 80058c2:	4618      	mov	r0, r3
 80058c4:	f7fe ff9e 	bl	8004804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058cc:	4b2d      	ldr	r3, [pc, #180]	; (8005984 <xTaskResumeAll+0x124>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d903      	bls.n	80058dc <xTaskResumeAll+0x7c>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058d8:	4a2a      	ldr	r2, [pc, #168]	; (8005984 <xTaskResumeAll+0x124>)
 80058da:	6013      	str	r3, [r2, #0]
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058e0:	4613      	mov	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	4413      	add	r3, r2
 80058e6:	009b      	lsls	r3, r3, #2
 80058e8:	4a27      	ldr	r2, [pc, #156]	; (8005988 <xTaskResumeAll+0x128>)
 80058ea:	441a      	add	r2, r3
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3304      	adds	r3, #4
 80058f0:	4619      	mov	r1, r3
 80058f2:	4610      	mov	r0, r2
 80058f4:	f7fe ff2b 	bl	800474e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058fc:	4b23      	ldr	r3, [pc, #140]	; (800598c <xTaskResumeAll+0x12c>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005902:	429a      	cmp	r2, r3
 8005904:	d302      	bcc.n	800590c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005906:	4b22      	ldr	r3, [pc, #136]	; (8005990 <xTaskResumeAll+0x130>)
 8005908:	2201      	movs	r2, #1
 800590a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800590c:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <xTaskResumeAll+0x120>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d1cb      	bne.n	80058ac <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800591a:	f000 fb61 	bl	8005fe0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800591e:	4b1d      	ldr	r3, [pc, #116]	; (8005994 <xTaskResumeAll+0x134>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d010      	beq.n	800594c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800592a:	f000 f845 	bl	80059b8 <xTaskIncrementTick>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005934:	4b16      	ldr	r3, [pc, #88]	; (8005990 <xTaskResumeAll+0x130>)
 8005936:	2201      	movs	r2, #1
 8005938:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	3b01      	subs	r3, #1
 800593e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f1      	bne.n	800592a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8005946:	4b13      	ldr	r3, [pc, #76]	; (8005994 <xTaskResumeAll+0x134>)
 8005948:	2200      	movs	r2, #0
 800594a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800594c:	4b10      	ldr	r3, [pc, #64]	; (8005990 <xTaskResumeAll+0x130>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d009      	beq.n	8005968 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005954:	2301      	movs	r3, #1
 8005956:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005958:	4b0f      	ldr	r3, [pc, #60]	; (8005998 <xTaskResumeAll+0x138>)
 800595a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005968:	f001 f870 	bl	8006a4c <vPortExitCritical>

	return xAlreadyYielded;
 800596c:	68bb      	ldr	r3, [r7, #8]
}
 800596e:	4618      	mov	r0, r3
 8005970:	3710      	adds	r7, #16
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	20000ff0 	.word	0x20000ff0
 800597c:	20000fc8 	.word	0x20000fc8
 8005980:	20000f88 	.word	0x20000f88
 8005984:	20000fd0 	.word	0x20000fd0
 8005988:	20000af8 	.word	0x20000af8
 800598c:	20000af4 	.word	0x20000af4
 8005990:	20000fdc 	.word	0x20000fdc
 8005994:	20000fd8 	.word	0x20000fd8
 8005998:	e000ed04 	.word	0xe000ed04

0800599c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80059a2:	4b04      	ldr	r3, [pc, #16]	; (80059b4 <xTaskGetTickCount+0x18>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80059a8:	687b      	ldr	r3, [r7, #4]
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bc80      	pop	{r7}
 80059b2:	4770      	bx	lr
 80059b4:	20000fcc 	.word	0x20000fcc

080059b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80059be:	2300      	movs	r3, #0
 80059c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80059c2:	4b51      	ldr	r3, [pc, #324]	; (8005b08 <xTaskIncrementTick+0x150>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f040 808e 	bne.w	8005ae8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80059cc:	4b4f      	ldr	r3, [pc, #316]	; (8005b0c <xTaskIncrementTick+0x154>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3301      	adds	r3, #1
 80059d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80059d4:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <xTaskIncrementTick+0x154>)
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d120      	bne.n	8005a22 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80059e0:	4b4b      	ldr	r3, [pc, #300]	; (8005b10 <xTaskIncrementTick+0x158>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00a      	beq.n	8005a00 <xTaskIncrementTick+0x48>
	__asm volatile
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	f383 8811 	msr	BASEPRI, r3
 80059f2:	f3bf 8f6f 	isb	sy
 80059f6:	f3bf 8f4f 	dsb	sy
 80059fa:	603b      	str	r3, [r7, #0]
}
 80059fc:	bf00      	nop
 80059fe:	e7fe      	b.n	80059fe <xTaskIncrementTick+0x46>
 8005a00:	4b43      	ldr	r3, [pc, #268]	; (8005b10 <xTaskIncrementTick+0x158>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	60fb      	str	r3, [r7, #12]
 8005a06:	4b43      	ldr	r3, [pc, #268]	; (8005b14 <xTaskIncrementTick+0x15c>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	4a41      	ldr	r2, [pc, #260]	; (8005b10 <xTaskIncrementTick+0x158>)
 8005a0c:	6013      	str	r3, [r2, #0]
 8005a0e:	4a41      	ldr	r2, [pc, #260]	; (8005b14 <xTaskIncrementTick+0x15c>)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	6013      	str	r3, [r2, #0]
 8005a14:	4b40      	ldr	r3, [pc, #256]	; (8005b18 <xTaskIncrementTick+0x160>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3301      	adds	r3, #1
 8005a1a:	4a3f      	ldr	r2, [pc, #252]	; (8005b18 <xTaskIncrementTick+0x160>)
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	f000 fadf 	bl	8005fe0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005a22:	4b3e      	ldr	r3, [pc, #248]	; (8005b1c <xTaskIncrementTick+0x164>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d34e      	bcc.n	8005aca <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a2c:	4b38      	ldr	r3, [pc, #224]	; (8005b10 <xTaskIncrementTick+0x158>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d101      	bne.n	8005a3a <xTaskIncrementTick+0x82>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xTaskIncrementTick+0x84>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d004      	beq.n	8005a4a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a40:	4b36      	ldr	r3, [pc, #216]	; (8005b1c <xTaskIncrementTick+0x164>)
 8005a42:	f04f 32ff 	mov.w	r2, #4294967295
 8005a46:	601a      	str	r2, [r3, #0]
					break;
 8005a48:	e03f      	b.n	8005aca <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005a4a:	4b31      	ldr	r3, [pc, #196]	; (8005b10 <xTaskIncrementTick+0x158>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a5a:	693a      	ldr	r2, [r7, #16]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d203      	bcs.n	8005a6a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a62:	4a2e      	ldr	r2, [pc, #184]	; (8005b1c <xTaskIncrementTick+0x164>)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6013      	str	r3, [r2, #0]
						break;
 8005a68:	e02f      	b.n	8005aca <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	3304      	adds	r3, #4
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7fe fec8 	bl	8004804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d004      	beq.n	8005a86 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	3318      	adds	r3, #24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fe febf 	bl	8004804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a8a:	4b25      	ldr	r3, [pc, #148]	; (8005b20 <xTaskIncrementTick+0x168>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d903      	bls.n	8005a9a <xTaskIncrementTick+0xe2>
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a96:	4a22      	ldr	r2, [pc, #136]	; (8005b20 <xTaskIncrementTick+0x168>)
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	4a1f      	ldr	r2, [pc, #124]	; (8005b24 <xTaskIncrementTick+0x16c>)
 8005aa8:	441a      	add	r2, r3
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	3304      	adds	r3, #4
 8005aae:	4619      	mov	r1, r3
 8005ab0:	4610      	mov	r0, r2
 8005ab2:	f7fe fe4c 	bl	800474e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aba:	4b1b      	ldr	r3, [pc, #108]	; (8005b28 <xTaskIncrementTick+0x170>)
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d3b3      	bcc.n	8005a2c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ac8:	e7b0      	b.n	8005a2c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005aca:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <xTaskIncrementTick+0x170>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad0:	4914      	ldr	r1, [pc, #80]	; (8005b24 <xTaskIncrementTick+0x16c>)
 8005ad2:	4613      	mov	r3, r2
 8005ad4:	009b      	lsls	r3, r3, #2
 8005ad6:	4413      	add	r3, r2
 8005ad8:	009b      	lsls	r3, r3, #2
 8005ada:	440b      	add	r3, r1
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	2b01      	cmp	r3, #1
 8005ae0:	d907      	bls.n	8005af2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	617b      	str	r3, [r7, #20]
 8005ae6:	e004      	b.n	8005af2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005ae8:	4b10      	ldr	r3, [pc, #64]	; (8005b2c <xTaskIncrementTick+0x174>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3301      	adds	r3, #1
 8005aee:	4a0f      	ldr	r2, [pc, #60]	; (8005b2c <xTaskIncrementTick+0x174>)
 8005af0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005af2:	4b0f      	ldr	r3, [pc, #60]	; (8005b30 <xTaskIncrementTick+0x178>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005afe:	697b      	ldr	r3, [r7, #20]
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20000ff0 	.word	0x20000ff0
 8005b0c:	20000fcc 	.word	0x20000fcc
 8005b10:	20000f80 	.word	0x20000f80
 8005b14:	20000f84 	.word	0x20000f84
 8005b18:	20000fe0 	.word	0x20000fe0
 8005b1c:	20000fe8 	.word	0x20000fe8
 8005b20:	20000fd0 	.word	0x20000fd0
 8005b24:	20000af8 	.word	0x20000af8
 8005b28:	20000af4 	.word	0x20000af4
 8005b2c:	20000fd8 	.word	0x20000fd8
 8005b30:	20000fdc 	.word	0x20000fdc

08005b34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005b34:	b480      	push	{r7}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005b3a:	4b2a      	ldr	r3, [pc, #168]	; (8005be4 <vTaskSwitchContext+0xb0>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d003      	beq.n	8005b4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005b42:	4b29      	ldr	r3, [pc, #164]	; (8005be8 <vTaskSwitchContext+0xb4>)
 8005b44:	2201      	movs	r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005b48:	e046      	b.n	8005bd8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005b4a:	4b27      	ldr	r3, [pc, #156]	; (8005be8 <vTaskSwitchContext+0xb4>)
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b50:	4b26      	ldr	r3, [pc, #152]	; (8005bec <vTaskSwitchContext+0xb8>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	60fb      	str	r3, [r7, #12]
 8005b56:	e010      	b.n	8005b7a <vTaskSwitchContext+0x46>
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	607b      	str	r3, [r7, #4]
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <vTaskSwitchContext+0x3e>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3b01      	subs	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]
 8005b7a:	491d      	ldr	r1, [pc, #116]	; (8005bf0 <vTaskSwitchContext+0xbc>)
 8005b7c:	68fa      	ldr	r2, [r7, #12]
 8005b7e:	4613      	mov	r3, r2
 8005b80:	009b      	lsls	r3, r3, #2
 8005b82:	4413      	add	r3, r2
 8005b84:	009b      	lsls	r3, r3, #2
 8005b86:	440b      	add	r3, r1
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d0e4      	beq.n	8005b58 <vTaskSwitchContext+0x24>
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <vTaskSwitchContext+0xbc>)
 8005b9a:	4413      	add	r3, r2
 8005b9c:	60bb      	str	r3, [r7, #8]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	685b      	ldr	r3, [r3, #4]
 8005ba2:	685a      	ldr	r2, [r3, #4]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	605a      	str	r2, [r3, #4]
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	685a      	ldr	r2, [r3, #4]
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	3308      	adds	r3, #8
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d104      	bne.n	8005bbe <vTaskSwitchContext+0x8a>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	605a      	str	r2, [r3, #4]
 8005bbe:	68bb      	ldr	r3, [r7, #8]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	4a0b      	ldr	r2, [pc, #44]	; (8005bf4 <vTaskSwitchContext+0xc0>)
 8005bc6:	6013      	str	r3, [r2, #0]
 8005bc8:	4a08      	ldr	r2, [pc, #32]	; (8005bec <vTaskSwitchContext+0xb8>)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005bce:	4b09      	ldr	r3, [pc, #36]	; (8005bf4 <vTaskSwitchContext+0xc0>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	3354      	adds	r3, #84	; 0x54
 8005bd4:	4a08      	ldr	r2, [pc, #32]	; (8005bf8 <vTaskSwitchContext+0xc4>)
 8005bd6:	6013      	str	r3, [r2, #0]
}
 8005bd8:	bf00      	nop
 8005bda:	3714      	adds	r7, #20
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bc80      	pop	{r7}
 8005be0:	4770      	bx	lr
 8005be2:	bf00      	nop
 8005be4:	20000ff0 	.word	0x20000ff0
 8005be8:	20000fdc 	.word	0x20000fdc
 8005bec:	20000fd0 	.word	0x20000fd0
 8005bf0:	20000af8 	.word	0x20000af8
 8005bf4:	20000af4 	.word	0x20000af4
 8005bf8:	20000010 	.word	0x20000010

08005bfc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d10a      	bne.n	8005c22 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005c0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c10:	f383 8811 	msr	BASEPRI, r3
 8005c14:	f3bf 8f6f 	isb	sy
 8005c18:	f3bf 8f4f 	dsb	sy
 8005c1c:	60fb      	str	r3, [r7, #12]
}
 8005c1e:	bf00      	nop
 8005c20:	e7fe      	b.n	8005c20 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c22:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <vTaskPlaceOnEventList+0x44>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3318      	adds	r3, #24
 8005c28:	4619      	mov	r1, r3
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fe fdb2 	bl	8004794 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005c30:	2101      	movs	r1, #1
 8005c32:	6838      	ldr	r0, [r7, #0]
 8005c34:	f000 fa84 	bl	8006140 <prvAddCurrentTaskToDelayedList>
}
 8005c38:	bf00      	nop
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000af4 	.word	0x20000af4

08005c44 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10a      	bne.n	8005c6c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	617b      	str	r3, [r7, #20]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <vTaskPlaceOnEventListRestricted+0x54>)
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3318      	adds	r3, #24
 8005c72:	4619      	mov	r1, r3
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7fe fd6a 	bl	800474e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d002      	beq.n	8005c86 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295
 8005c84:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c86:	6879      	ldr	r1, [r7, #4]
 8005c88:	68b8      	ldr	r0, [r7, #8]
 8005c8a:	f000 fa59 	bl	8006140 <prvAddCurrentTaskToDelayedList>
	}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	20000af4 	.word	0x20000af4

08005c9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	60fb      	str	r3, [r7, #12]
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	3318      	adds	r3, #24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f7fe fd99 	bl	8004804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cd2:	4b1e      	ldr	r3, [pc, #120]	; (8005d4c <xTaskRemoveFromEventList+0xb0>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d11d      	bne.n	8005d16 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe fd90 	bl	8004804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <xTaskRemoveFromEventList+0xb4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	429a      	cmp	r2, r3
 8005cee:	d903      	bls.n	8005cf8 <xTaskRemoveFromEventList+0x5c>
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	4a16      	ldr	r2, [pc, #88]	; (8005d50 <xTaskRemoveFromEventList+0xb4>)
 8005cf6:	6013      	str	r3, [r2, #0]
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	4a13      	ldr	r2, [pc, #76]	; (8005d54 <xTaskRemoveFromEventList+0xb8>)
 8005d06:	441a      	add	r2, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	4610      	mov	r0, r2
 8005d10:	f7fe fd1d 	bl	800474e <vListInsertEnd>
 8005d14:	e005      	b.n	8005d22 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	3318      	adds	r3, #24
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	480e      	ldr	r0, [pc, #56]	; (8005d58 <xTaskRemoveFromEventList+0xbc>)
 8005d1e:	f7fe fd16 	bl	800474e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d26:	4b0d      	ldr	r3, [pc, #52]	; (8005d5c <xTaskRemoveFromEventList+0xc0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d905      	bls.n	8005d3c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005d30:	2301      	movs	r3, #1
 8005d32:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005d34:	4b0a      	ldr	r3, [pc, #40]	; (8005d60 <xTaskRemoveFromEventList+0xc4>)
 8005d36:	2201      	movs	r2, #1
 8005d38:	601a      	str	r2, [r3, #0]
 8005d3a:	e001      	b.n	8005d40 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005d40:	697b      	ldr	r3, [r7, #20]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3718      	adds	r7, #24
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	20000ff0 	.word	0x20000ff0
 8005d50:	20000fd0 	.word	0x20000fd0
 8005d54:	20000af8 	.word	0x20000af8
 8005d58:	20000f88 	.word	0x20000f88
 8005d5c:	20000af4 	.word	0x20000af4
 8005d60:	20000fdc 	.word	0x20000fdc

08005d64 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d64:	b480      	push	{r7}
 8005d66:	b083      	sub	sp, #12
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <vTaskInternalSetTimeOutState+0x24>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d74:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <vTaskInternalSetTimeOutState+0x28>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	605a      	str	r2, [r3, #4]
}
 8005d7c:	bf00      	nop
 8005d7e:	370c      	adds	r7, #12
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bc80      	pop	{r7}
 8005d84:	4770      	bx	lr
 8005d86:	bf00      	nop
 8005d88:	20000fe0 	.word	0x20000fe0
 8005d8c:	20000fcc 	.word	0x20000fcc

08005d90 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d10a      	bne.n	8005db6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
 8005db4:	e7fe      	b.n	8005db4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10a      	bne.n	8005dd2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc0:	f383 8811 	msr	BASEPRI, r3
 8005dc4:	f3bf 8f6f 	isb	sy
 8005dc8:	f3bf 8f4f 	dsb	sy
 8005dcc:	60fb      	str	r3, [r7, #12]
}
 8005dce:	bf00      	nop
 8005dd0:	e7fe      	b.n	8005dd0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005dd2:	f000 fe0b 	bl	80069ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005dd6:	4b1d      	ldr	r3, [pc, #116]	; (8005e4c <xTaskCheckForTimeOut+0xbc>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	69ba      	ldr	r2, [r7, #24]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d102      	bne.n	8005df6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]
 8005df4:	e023      	b.n	8005e3e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4b15      	ldr	r3, [pc, #84]	; (8005e50 <xTaskCheckForTimeOut+0xc0>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d007      	beq.n	8005e12 <xTaskCheckForTimeOut+0x82>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d302      	bcc.n	8005e12 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005e0c:	2301      	movs	r3, #1
 8005e0e:	61fb      	str	r3, [r7, #28]
 8005e10:	e015      	b.n	8005e3e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d20b      	bcs.n	8005e34 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	1ad2      	subs	r2, r2, r3
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f7ff ff9b 	bl	8005d64 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	e004      	b.n	8005e3e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2200      	movs	r2, #0
 8005e38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005e3a:	2301      	movs	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005e3e:	f000 fe05 	bl	8006a4c <vPortExitCritical>

	return xReturn;
 8005e42:	69fb      	ldr	r3, [r7, #28]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3720      	adds	r7, #32
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	20000fcc 	.word	0x20000fcc
 8005e50:	20000fe0 	.word	0x20000fe0

08005e54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e54:	b480      	push	{r7}
 8005e56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e58:	4b03      	ldr	r3, [pc, #12]	; (8005e68 <vTaskMissedYield+0x14>)
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	601a      	str	r2, [r3, #0]
}
 8005e5e:	bf00      	nop
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr
 8005e66:	bf00      	nop
 8005e68:	20000fdc 	.word	0x20000fdc

08005e6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b082      	sub	sp, #8
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e74:	f000 f852 	bl	8005f1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <prvIdleTask+0x28>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d9f9      	bls.n	8005e74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e80:	4b05      	ldr	r3, [pc, #20]	; (8005e98 <prvIdleTask+0x2c>)
 8005e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e86:	601a      	str	r2, [r3, #0]
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e90:	e7f0      	b.n	8005e74 <prvIdleTask+0x8>
 8005e92:	bf00      	nop
 8005e94:	20000af8 	.word	0x20000af8
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b082      	sub	sp, #8
 8005ea0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	607b      	str	r3, [r7, #4]
 8005ea6:	e00c      	b.n	8005ec2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ea8:	687a      	ldr	r2, [r7, #4]
 8005eaa:	4613      	mov	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	4413      	add	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4a12      	ldr	r2, [pc, #72]	; (8005efc <prvInitialiseTaskLists+0x60>)
 8005eb4:	4413      	add	r3, r2
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7fe fc1e 	bl	80046f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	607b      	str	r3, [r7, #4]
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b37      	cmp	r3, #55	; 0x37
 8005ec6:	d9ef      	bls.n	8005ea8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005ec8:	480d      	ldr	r0, [pc, #52]	; (8005f00 <prvInitialiseTaskLists+0x64>)
 8005eca:	f7fe fc15 	bl	80046f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005ece:	480d      	ldr	r0, [pc, #52]	; (8005f04 <prvInitialiseTaskLists+0x68>)
 8005ed0:	f7fe fc12 	bl	80046f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005ed4:	480c      	ldr	r0, [pc, #48]	; (8005f08 <prvInitialiseTaskLists+0x6c>)
 8005ed6:	f7fe fc0f 	bl	80046f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005eda:	480c      	ldr	r0, [pc, #48]	; (8005f0c <prvInitialiseTaskLists+0x70>)
 8005edc:	f7fe fc0c 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005ee0:	480b      	ldr	r0, [pc, #44]	; (8005f10 <prvInitialiseTaskLists+0x74>)
 8005ee2:	f7fe fc09 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005ee6:	4b0b      	ldr	r3, [pc, #44]	; (8005f14 <prvInitialiseTaskLists+0x78>)
 8005ee8:	4a05      	ldr	r2, [pc, #20]	; (8005f00 <prvInitialiseTaskLists+0x64>)
 8005eea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <prvInitialiseTaskLists+0x7c>)
 8005eee:	4a05      	ldr	r2, [pc, #20]	; (8005f04 <prvInitialiseTaskLists+0x68>)
 8005ef0:	601a      	str	r2, [r3, #0]
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}
 8005efa:	bf00      	nop
 8005efc:	20000af8 	.word	0x20000af8
 8005f00:	20000f58 	.word	0x20000f58
 8005f04:	20000f6c 	.word	0x20000f6c
 8005f08:	20000f88 	.word	0x20000f88
 8005f0c:	20000f9c 	.word	0x20000f9c
 8005f10:	20000fb4 	.word	0x20000fb4
 8005f14:	20000f80 	.word	0x20000f80
 8005f18:	20000f84 	.word	0x20000f84

08005f1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f22:	e019      	b.n	8005f58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005f24:	f000 fd62 	bl	80069ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <prvCheckTasksWaitingTermination+0x50>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	68db      	ldr	r3, [r3, #12]
 8005f2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fe fc65 	bl	8004804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005f3a:	4b0d      	ldr	r3, [pc, #52]	; (8005f70 <prvCheckTasksWaitingTermination+0x54>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	3b01      	subs	r3, #1
 8005f40:	4a0b      	ldr	r2, [pc, #44]	; (8005f70 <prvCheckTasksWaitingTermination+0x54>)
 8005f42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005f44:	4b0b      	ldr	r3, [pc, #44]	; (8005f74 <prvCheckTasksWaitingTermination+0x58>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	3b01      	subs	r3, #1
 8005f4a:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <prvCheckTasksWaitingTermination+0x58>)
 8005f4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f4e:	f000 fd7d 	bl	8006a4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f810 	bl	8005f78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f58:	4b06      	ldr	r3, [pc, #24]	; (8005f74 <prvCheckTasksWaitingTermination+0x58>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e1      	bne.n	8005f24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f60:	bf00      	nop
 8005f62:	bf00      	nop
 8005f64:	3708      	adds	r7, #8
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000f9c 	.word	0x20000f9c
 8005f70:	20000fc8 	.word	0x20000fc8
 8005f74:	20000fb0 	.word	0x20000fb0

08005f78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	3354      	adds	r3, #84	; 0x54
 8005f84:	4618      	mov	r0, r3
 8005f86:	f001 fe5d 	bl	8007c44 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d108      	bne.n	8005fa6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f000 feeb 	bl	8006d74 <vPortFree>
				vPortFree( pxTCB );
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fee8 	bl	8006d74 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005fa4:	e018      	b.n	8005fd8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d103      	bne.n	8005fb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fedf 	bl	8006d74 <vPortFree>
	}
 8005fb6:	e00f      	b.n	8005fd8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d00a      	beq.n	8005fd8 <prvDeleteTCB+0x60>
	__asm volatile
 8005fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc6:	f383 8811 	msr	BASEPRI, r3
 8005fca:	f3bf 8f6f 	isb	sy
 8005fce:	f3bf 8f4f 	dsb	sy
 8005fd2:	60fb      	str	r3, [r7, #12]
}
 8005fd4:	bf00      	nop
 8005fd6:	e7fe      	b.n	8005fd6 <prvDeleteTCB+0x5e>
	}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <prvResetNextTaskUnblockTime+0x40>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <prvResetNextTaskUnblockTime+0x14>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e000      	b.n	8005ff6 <prvResetNextTaskUnblockTime+0x16>
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d004      	beq.n	8006004 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ffa:	4b0a      	ldr	r3, [pc, #40]	; (8006024 <prvResetNextTaskUnblockTime+0x44>)
 8005ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8006000:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006002:	e008      	b.n	8006016 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <prvResetNextTaskUnblockTime+0x40>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4a04      	ldr	r2, [pc, #16]	; (8006024 <prvResetNextTaskUnblockTime+0x44>)
 8006014:	6013      	str	r3, [r2, #0]
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	bc80      	pop	{r7}
 800601e:	4770      	bx	lr
 8006020:	20000f80 	.word	0x20000f80
 8006024:	20000fe8 	.word	0x20000fe8

08006028 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006028:	b480      	push	{r7}
 800602a:	b083      	sub	sp, #12
 800602c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800602e:	4b0b      	ldr	r3, [pc, #44]	; (800605c <xTaskGetSchedulerState+0x34>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d102      	bne.n	800603c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006036:	2301      	movs	r3, #1
 8006038:	607b      	str	r3, [r7, #4]
 800603a:	e008      	b.n	800604e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603c:	4b08      	ldr	r3, [pc, #32]	; (8006060 <xTaskGetSchedulerState+0x38>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d102      	bne.n	800604a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006044:	2302      	movs	r3, #2
 8006046:	607b      	str	r3, [r7, #4]
 8006048:	e001      	b.n	800604e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800604a:	2300      	movs	r3, #0
 800604c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800604e:	687b      	ldr	r3, [r7, #4]
	}
 8006050:	4618      	mov	r0, r3
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	bc80      	pop	{r7}
 8006058:	4770      	bx	lr
 800605a:	bf00      	nop
 800605c:	20000fd4 	.word	0x20000fd4
 8006060:	20000ff0 	.word	0x20000ff0

08006064 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d056      	beq.n	8006128 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800607a:	4b2e      	ldr	r3, [pc, #184]	; (8006134 <xTaskPriorityDisinherit+0xd0>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	693a      	ldr	r2, [r7, #16]
 8006080:	429a      	cmp	r2, r3
 8006082:	d00a      	beq.n	800609a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60fb      	str	r3, [r7, #12]
}
 8006096:	bf00      	nop
 8006098:	e7fe      	b.n	8006098 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	60bb      	str	r3, [r7, #8]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060bc:	1e5a      	subs	r2, r3, #1
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d02c      	beq.n	8006128 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d128      	bne.n	8006128 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	3304      	adds	r3, #4
 80060da:	4618      	mov	r0, r3
 80060dc:	f7fe fb92 	bl	8004804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060f0:	693b      	ldr	r3, [r7, #16]
 80060f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060f8:	4b0f      	ldr	r3, [pc, #60]	; (8006138 <xTaskPriorityDisinherit+0xd4>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	429a      	cmp	r2, r3
 80060fe:	d903      	bls.n	8006108 <xTaskPriorityDisinherit+0xa4>
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006104:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <xTaskPriorityDisinherit+0xd4>)
 8006106:	6013      	str	r3, [r2, #0]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800610c:	4613      	mov	r3, r2
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4a09      	ldr	r2, [pc, #36]	; (800613c <xTaskPriorityDisinherit+0xd8>)
 8006116:	441a      	add	r2, r3
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	3304      	adds	r3, #4
 800611c:	4619      	mov	r1, r3
 800611e:	4610      	mov	r0, r2
 8006120:	f7fe fb15 	bl	800474e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006124:	2301      	movs	r3, #1
 8006126:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006128:	697b      	ldr	r3, [r7, #20]
	}
 800612a:	4618      	mov	r0, r3
 800612c:	3718      	adds	r7, #24
 800612e:	46bd      	mov	sp, r7
 8006130:	bd80      	pop	{r7, pc}
 8006132:	bf00      	nop
 8006134:	20000af4 	.word	0x20000af4
 8006138:	20000fd0 	.word	0x20000fd0
 800613c:	20000af8 	.word	0x20000af8

08006140 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800614a:	4b21      	ldr	r3, [pc, #132]	; (80061d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006150:	4b20      	ldr	r3, [pc, #128]	; (80061d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3304      	adds	r3, #4
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe fb54 	bl	8004804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006162:	d10a      	bne.n	800617a <prvAddCurrentTaskToDelayedList+0x3a>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d007      	beq.n	800617a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800616a:	4b1a      	ldr	r3, [pc, #104]	; (80061d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4819      	ldr	r0, [pc, #100]	; (80061d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006174:	f7fe faeb 	bl	800474e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006178:	e026      	b.n	80061c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4413      	add	r3, r2
 8006180:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006182:	4b14      	ldr	r3, [pc, #80]	; (80061d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	429a      	cmp	r2, r3
 8006190:	d209      	bcs.n	80061a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006192:	4b12      	ldr	r3, [pc, #72]	; (80061dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	4b0f      	ldr	r3, [pc, #60]	; (80061d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	3304      	adds	r3, #4
 800619c:	4619      	mov	r1, r3
 800619e:	4610      	mov	r0, r2
 80061a0:	f7fe faf8 	bl	8004794 <vListInsert>
}
 80061a4:	e010      	b.n	80061c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80061a6:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	4b0a      	ldr	r3, [pc, #40]	; (80061d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4619      	mov	r1, r3
 80061b2:	4610      	mov	r0, r2
 80061b4:	f7fe faee 	bl	8004794 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d202      	bcs.n	80061c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	6013      	str	r3, [r2, #0]
}
 80061c8:	bf00      	nop
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	20000fcc 	.word	0x20000fcc
 80061d4:	20000af4 	.word	0x20000af4
 80061d8:	20000fb4 	.word	0x20000fb4
 80061dc:	20000f84 	.word	0x20000f84
 80061e0:	20000f80 	.word	0x20000f80
 80061e4:	20000fe8 	.word	0x20000fe8

080061e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b08a      	sub	sp, #40	; 0x28
 80061ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061ee:	2300      	movs	r3, #0
 80061f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061f2:	f000 facb 	bl	800678c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061f6:	4b1c      	ldr	r3, [pc, #112]	; (8006268 <xTimerCreateTimerTask+0x80>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d021      	beq.n	8006242 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006202:	2300      	movs	r3, #0
 8006204:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006206:	1d3a      	adds	r2, r7, #4
 8006208:	f107 0108 	add.w	r1, r7, #8
 800620c:	f107 030c 	add.w	r3, r7, #12
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fa57 	bl	80046c4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006216:	6879      	ldr	r1, [r7, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	9202      	str	r2, [sp, #8]
 800621e:	9301      	str	r3, [sp, #4]
 8006220:	2302      	movs	r3, #2
 8006222:	9300      	str	r3, [sp, #0]
 8006224:	2300      	movs	r3, #0
 8006226:	460a      	mov	r2, r1
 8006228:	4910      	ldr	r1, [pc, #64]	; (800626c <xTimerCreateTimerTask+0x84>)
 800622a:	4811      	ldr	r0, [pc, #68]	; (8006270 <xTimerCreateTimerTask+0x88>)
 800622c:	f7ff f8b6 	bl	800539c <xTaskCreateStatic>
 8006230:	4603      	mov	r3, r0
 8006232:	4a10      	ldr	r2, [pc, #64]	; (8006274 <xTimerCreateTimerTask+0x8c>)
 8006234:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006236:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <xTimerCreateTimerTask+0x8c>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d001      	beq.n	8006242 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800623e:	2301      	movs	r3, #1
 8006240:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10a      	bne.n	800625e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624c:	f383 8811 	msr	BASEPRI, r3
 8006250:	f3bf 8f6f 	isb	sy
 8006254:	f3bf 8f4f 	dsb	sy
 8006258:	613b      	str	r3, [r7, #16]
}
 800625a:	bf00      	nop
 800625c:	e7fe      	b.n	800625c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800625e:	697b      	ldr	r3, [r7, #20]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	20001024 	.word	0x20001024
 800626c:	08009c18 	.word	0x08009c18
 8006270:	08006395 	.word	0x08006395
 8006274:	20001028 	.word	0x20001028

08006278 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b08a      	sub	sp, #40	; 0x28
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
 8006284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	623b      	str	r3, [r7, #32]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80062a6:	4b1a      	ldr	r3, [pc, #104]	; (8006310 <xTimerGenericCommand+0x98>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d02a      	beq.n	8006304 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	2b05      	cmp	r3, #5
 80062be:	dc18      	bgt.n	80062f2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80062c0:	f7ff feb2 	bl	8006028 <xTaskGetSchedulerState>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d109      	bne.n	80062de <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80062ca:	4b11      	ldr	r3, [pc, #68]	; (8006310 <xTimerGenericCommand+0x98>)
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	f107 0110 	add.w	r1, r7, #16
 80062d2:	2300      	movs	r3, #0
 80062d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062d6:	f7fe fbff 	bl	8004ad8 <xQueueGenericSend>
 80062da:	6278      	str	r0, [r7, #36]	; 0x24
 80062dc:	e012      	b.n	8006304 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80062de:	4b0c      	ldr	r3, [pc, #48]	; (8006310 <xTimerGenericCommand+0x98>)
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	f107 0110 	add.w	r1, r7, #16
 80062e6:	2300      	movs	r3, #0
 80062e8:	2200      	movs	r2, #0
 80062ea:	f7fe fbf5 	bl	8004ad8 <xQueueGenericSend>
 80062ee:	6278      	str	r0, [r7, #36]	; 0x24
 80062f0:	e008      	b.n	8006304 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <xTimerGenericCommand+0x98>)
 80062f4:	6818      	ldr	r0, [r3, #0]
 80062f6:	f107 0110 	add.w	r1, r7, #16
 80062fa:	2300      	movs	r3, #0
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f7fe fce9 	bl	8004cd4 <xQueueGenericSendFromISR>
 8006302:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006306:	4618      	mov	r0, r3
 8006308:	3728      	adds	r7, #40	; 0x28
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	20001024 	.word	0x20001024

08006314 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b088      	sub	sp, #32
 8006318:	af02      	add	r7, sp, #8
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800631e:	4b1c      	ldr	r3, [pc, #112]	; (8006390 <prvProcessExpiredTimer+0x7c>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	3304      	adds	r3, #4
 800632c:	4618      	mov	r0, r3
 800632e:	f7fe fa69 	bl	8004804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d122      	bne.n	8006380 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	699a      	ldr	r2, [r3, #24]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	18d1      	adds	r1, r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f000 f8c8 	bl	80064dc <prvInsertTimerInActiveList>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d016      	beq.n	8006380 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006352:	2300      	movs	r3, #0
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	2300      	movs	r3, #0
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	2100      	movs	r1, #0
 800635c:	6978      	ldr	r0, [r7, #20]
 800635e:	f7ff ff8b 	bl	8006278 <xTimerGenericCommand>
 8006362:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800636a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800636e:	f383 8811 	msr	BASEPRI, r3
 8006372:	f3bf 8f6f 	isb	sy
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	60fb      	str	r3, [r7, #12]
}
 800637c:	bf00      	nop
 800637e:	e7fe      	b.n	800637e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006384:	6978      	ldr	r0, [r7, #20]
 8006386:	4798      	blx	r3
}
 8006388:	bf00      	nop
 800638a:	3718      	adds	r7, #24
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}
 8006390:	2000101c 	.word	0x2000101c

08006394 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800639c:	f107 0308 	add.w	r3, r7, #8
 80063a0:	4618      	mov	r0, r3
 80063a2:	f000 f857 	bl	8006454 <prvGetNextExpireTime>
 80063a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4619      	mov	r1, r3
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 f803 	bl	80063b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80063b2:	f000 f8d5 	bl	8006560 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80063b6:	e7f1      	b.n	800639c <prvTimerTask+0x8>

080063b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80063c2:	f7ff fa3f 	bl	8005844 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80063c6:	f107 0308 	add.w	r3, r7, #8
 80063ca:	4618      	mov	r0, r3
 80063cc:	f000 f866 	bl	800649c <prvSampleTimeNow>
 80063d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d130      	bne.n	800643a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d10a      	bne.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
 80063de:	687a      	ldr	r2, [r7, #4]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d806      	bhi.n	80063f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80063e6:	f7ff fa3b 	bl	8005860 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80063ea:	68f9      	ldr	r1, [r7, #12]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f7ff ff91 	bl	8006314 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063f2:	e024      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d008      	beq.n	800640c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063fa:	4b13      	ldr	r3, [pc, #76]	; (8006448 <prvProcessTimerOrBlockTask+0x90>)
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	2b00      	cmp	r3, #0
 8006402:	bf0c      	ite	eq
 8006404:	2301      	moveq	r3, #1
 8006406:	2300      	movne	r3, #0
 8006408:	b2db      	uxtb	r3, r3
 800640a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <prvProcessTimerOrBlockTask+0x94>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	1ad3      	subs	r3, r2, r3
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	4619      	mov	r1, r3
 800641a:	f7fe ff8b 	bl	8005334 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800641e:	f7ff fa1f 	bl	8005860 <xTaskResumeAll>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10a      	bne.n	800643e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006428:	4b09      	ldr	r3, [pc, #36]	; (8006450 <prvProcessTimerOrBlockTask+0x98>)
 800642a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	f3bf 8f6f 	isb	sy
}
 8006438:	e001      	b.n	800643e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800643a:	f7ff fa11 	bl	8005860 <xTaskResumeAll>
}
 800643e:	bf00      	nop
 8006440:	3710      	adds	r7, #16
 8006442:	46bd      	mov	sp, r7
 8006444:	bd80      	pop	{r7, pc}
 8006446:	bf00      	nop
 8006448:	20001020 	.word	0x20001020
 800644c:	20001024 	.word	0x20001024
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800645c:	4b0e      	ldr	r3, [pc, #56]	; (8006498 <prvGetNextExpireTime+0x44>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	bf0c      	ite	eq
 8006466:	2301      	moveq	r3, #1
 8006468:	2300      	movne	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d105      	bne.n	8006486 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <prvGetNextExpireTime+0x44>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]
 8006484:	e001      	b.n	800648a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800648a:	68fb      	ldr	r3, [r7, #12]
}
 800648c:	4618      	mov	r0, r3
 800648e:	3714      	adds	r7, #20
 8006490:	46bd      	mov	sp, r7
 8006492:	bc80      	pop	{r7}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	2000101c 	.word	0x2000101c

0800649c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b084      	sub	sp, #16
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80064a4:	f7ff fa7a 	bl	800599c <xTaskGetTickCount>
 80064a8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80064aa:	4b0b      	ldr	r3, [pc, #44]	; (80064d8 <prvSampleTimeNow+0x3c>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d205      	bcs.n	80064c0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80064b4:	f000 f908 	bl	80066c8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	601a      	str	r2, [r3, #0]
 80064be:	e002      	b.n	80064c6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2200      	movs	r2, #0
 80064c4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80064c6:	4a04      	ldr	r2, [pc, #16]	; (80064d8 <prvSampleTimeNow+0x3c>)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80064cc:	68fb      	ldr	r3, [r7, #12]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	2000102c 	.word	0x2000102c

080064dc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	68ba      	ldr	r2, [r7, #8]
 80064f2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	429a      	cmp	r2, r3
 8006500:	d812      	bhi.n	8006528 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006502:	687a      	ldr	r2, [r7, #4]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	1ad2      	subs	r2, r2, r3
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	429a      	cmp	r2, r3
 800650e:	d302      	bcc.n	8006516 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	617b      	str	r3, [r7, #20]
 8006514:	e01b      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006516:	4b10      	ldr	r3, [pc, #64]	; (8006558 <prvInsertTimerInActiveList+0x7c>)
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	3304      	adds	r3, #4
 800651e:	4619      	mov	r1, r3
 8006520:	4610      	mov	r0, r2
 8006522:	f7fe f937 	bl	8004794 <vListInsert>
 8006526:	e012      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d206      	bcs.n	800653e <prvInsertTimerInActiveList+0x62>
 8006530:	68ba      	ldr	r2, [r7, #8]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d302      	bcc.n	800653e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006538:	2301      	movs	r3, #1
 800653a:	617b      	str	r3, [r7, #20]
 800653c:	e007      	b.n	800654e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800653e:	4b07      	ldr	r3, [pc, #28]	; (800655c <prvInsertTimerInActiveList+0x80>)
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	3304      	adds	r3, #4
 8006546:	4619      	mov	r1, r3
 8006548:	4610      	mov	r0, r2
 800654a:	f7fe f923 	bl	8004794 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800654e:	697b      	ldr	r3, [r7, #20]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}
 8006558:	20001020 	.word	0x20001020
 800655c:	2000101c 	.word	0x2000101c

08006560 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	; 0x38
 8006564:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006566:	e09d      	b.n	80066a4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2b00      	cmp	r3, #0
 800656c:	da18      	bge.n	80065a0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800656e:	1d3b      	adds	r3, r7, #4
 8006570:	3304      	adds	r3, #4
 8006572:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10a      	bne.n	8006590 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800657a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800657e:	f383 8811 	msr	BASEPRI, r3
 8006582:	f3bf 8f6f 	isb	sy
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	61fb      	str	r3, [r7, #28]
}
 800658c:	bf00      	nop
 800658e:	e7fe      	b.n	800658e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006596:	6850      	ldr	r0, [r2, #4]
 8006598:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800659a:	6892      	ldr	r2, [r2, #8]
 800659c:	4611      	mov	r1, r2
 800659e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	db7d      	blt.n	80066a2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80065aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d004      	beq.n	80065bc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	3304      	adds	r3, #4
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fe f924 	bl	8004804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80065bc:	463b      	mov	r3, r7
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff ff6c 	bl	800649c <prvSampleTimeNow>
 80065c4:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2b09      	cmp	r3, #9
 80065ca:	d86b      	bhi.n	80066a4 <prvProcessReceivedCommands+0x144>
 80065cc:	a201      	add	r2, pc, #4	; (adr r2, 80065d4 <prvProcessReceivedCommands+0x74>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	080065fd 	.word	0x080065fd
 80065dc:	080065fd 	.word	0x080065fd
 80065e0:	080066a5 	.word	0x080066a5
 80065e4:	08006659 	.word	0x08006659
 80065e8:	08006691 	.word	0x08006691
 80065ec:	080065fd 	.word	0x080065fd
 80065f0:	080065fd 	.word	0x080065fd
 80065f4:	080066a5 	.word	0x080066a5
 80065f8:	08006659 	.word	0x08006659
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006600:	699b      	ldr	r3, [r3, #24]
 8006602:	18d1      	adds	r1, r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800660a:	f7ff ff67 	bl	80064dc <prvInsertTimerInActiveList>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d047      	beq.n	80066a4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006618:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800661a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	69db      	ldr	r3, [r3, #28]
 8006620:	2b01      	cmp	r3, #1
 8006622:	d13f      	bne.n	80066a4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	441a      	add	r2, r3
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	2100      	movs	r1, #0
 8006634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006636:	f7ff fe1f 	bl	8006278 <xTimerGenericCommand>
 800663a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800663c:	6a3b      	ldr	r3, [r7, #32]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d130      	bne.n	80066a4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8006642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006646:	f383 8811 	msr	BASEPRI, r3
 800664a:	f3bf 8f6f 	isb	sy
 800664e:	f3bf 8f4f 	dsb	sy
 8006652:	61bb      	str	r3, [r7, #24]
}
 8006654:	bf00      	nop
 8006656:	e7fe      	b.n	8006656 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006658:	68ba      	ldr	r2, [r7, #8]
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d10a      	bne.n	800667c <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8006666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800666a:	f383 8811 	msr	BASEPRI, r3
 800666e:	f3bf 8f6f 	isb	sy
 8006672:	f3bf 8f4f 	dsb	sy
 8006676:	617b      	str	r3, [r7, #20]
}
 8006678:	bf00      	nop
 800667a:	e7fe      	b.n	800667a <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	699a      	ldr	r2, [r3, #24]
 8006680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006682:	18d1      	adds	r1, r2, r3
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006688:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800668a:	f7ff ff27 	bl	80064dc <prvInsertTimerInActiveList>
					break;
 800668e:	e009      	b.n	80066a4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8006696:	2b00      	cmp	r3, #0
 8006698:	d104      	bne.n	80066a4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800669a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800669c:	f000 fb6a 	bl	8006d74 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80066a0:	e000      	b.n	80066a4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80066a2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80066a4:	4b07      	ldr	r3, [pc, #28]	; (80066c4 <prvProcessReceivedCommands+0x164>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	1d39      	adds	r1, r7, #4
 80066aa:	2200      	movs	r2, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f7fe fba9 	bl	8004e04 <xQueueReceive>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f47f af57 	bne.w	8006568 <prvProcessReceivedCommands+0x8>
	}
}
 80066ba:	bf00      	nop
 80066bc:	bf00      	nop
 80066be:	3730      	adds	r7, #48	; 0x30
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20001024 	.word	0x20001024

080066c8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b088      	sub	sp, #32
 80066cc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ce:	e045      	b.n	800675c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066d0:	4b2c      	ldr	r3, [pc, #176]	; (8006784 <prvSwitchTimerLists+0xbc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68db      	ldr	r3, [r3, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80066da:	4b2a      	ldr	r3, [pc, #168]	; (8006784 <prvSwitchTimerLists+0xbc>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	68db      	ldr	r3, [r3, #12]
 80066e2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	3304      	adds	r3, #4
 80066e8:	4618      	mov	r0, r3
 80066ea:	f7fe f88b 	bl	8004804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d12e      	bne.n	800675c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	4413      	add	r3, r2
 8006706:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	429a      	cmp	r2, r3
 800670e:	d90e      	bls.n	800672e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	68fa      	ldr	r2, [r7, #12]
 800671a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800671c:	4b19      	ldr	r3, [pc, #100]	; (8006784 <prvSwitchTimerLists+0xbc>)
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	3304      	adds	r3, #4
 8006724:	4619      	mov	r1, r3
 8006726:	4610      	mov	r0, r2
 8006728:	f7fe f834 	bl	8004794 <vListInsert>
 800672c:	e016      	b.n	800675c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800672e:	2300      	movs	r3, #0
 8006730:	9300      	str	r3, [sp, #0]
 8006732:	2300      	movs	r3, #0
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	2100      	movs	r1, #0
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7ff fd9d 	bl	8006278 <xTimerGenericCommand>
 800673e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d10a      	bne.n	800675c <prvSwitchTimerLists+0x94>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	603b      	str	r3, [r7, #0]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800675c:	4b09      	ldr	r3, [pc, #36]	; (8006784 <prvSwitchTimerLists+0xbc>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d1b4      	bne.n	80066d0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006766:	4b07      	ldr	r3, [pc, #28]	; (8006784 <prvSwitchTimerLists+0xbc>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <prvSwitchTimerLists+0xc0>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a04      	ldr	r2, [pc, #16]	; (8006784 <prvSwitchTimerLists+0xbc>)
 8006772:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006774:	4a04      	ldr	r2, [pc, #16]	; (8006788 <prvSwitchTimerLists+0xc0>)
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	6013      	str	r3, [r2, #0]
}
 800677a:	bf00      	nop
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	2000101c 	.word	0x2000101c
 8006788:	20001020 	.word	0x20001020

0800678c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006792:	f000 f92b 	bl	80069ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006796:	4b15      	ldr	r3, [pc, #84]	; (80067ec <prvCheckForValidListAndQueue+0x60>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d120      	bne.n	80067e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800679e:	4814      	ldr	r0, [pc, #80]	; (80067f0 <prvCheckForValidListAndQueue+0x64>)
 80067a0:	f7fd ffaa 	bl	80046f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80067a4:	4813      	ldr	r0, [pc, #76]	; (80067f4 <prvCheckForValidListAndQueue+0x68>)
 80067a6:	f7fd ffa7 	bl	80046f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80067aa:	4b13      	ldr	r3, [pc, #76]	; (80067f8 <prvCheckForValidListAndQueue+0x6c>)
 80067ac:	4a10      	ldr	r2, [pc, #64]	; (80067f0 <prvCheckForValidListAndQueue+0x64>)
 80067ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80067b0:	4b12      	ldr	r3, [pc, #72]	; (80067fc <prvCheckForValidListAndQueue+0x70>)
 80067b2:	4a10      	ldr	r2, [pc, #64]	; (80067f4 <prvCheckForValidListAndQueue+0x68>)
 80067b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80067b6:	2300      	movs	r3, #0
 80067b8:	9300      	str	r3, [sp, #0]
 80067ba:	4b11      	ldr	r3, [pc, #68]	; (8006800 <prvCheckForValidListAndQueue+0x74>)
 80067bc:	4a11      	ldr	r2, [pc, #68]	; (8006804 <prvCheckForValidListAndQueue+0x78>)
 80067be:	2110      	movs	r1, #16
 80067c0:	200a      	movs	r0, #10
 80067c2:	f7fe f8b1 	bl	8004928 <xQueueGenericCreateStatic>
 80067c6:	4603      	mov	r3, r0
 80067c8:	4a08      	ldr	r2, [pc, #32]	; (80067ec <prvCheckForValidListAndQueue+0x60>)
 80067ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80067cc:	4b07      	ldr	r3, [pc, #28]	; (80067ec <prvCheckForValidListAndQueue+0x60>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <prvCheckForValidListAndQueue+0x60>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	490b      	ldr	r1, [pc, #44]	; (8006808 <prvCheckForValidListAndQueue+0x7c>)
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe fd82 	bl	80052e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80067e0:	f000 f934 	bl	8006a4c <vPortExitCritical>
}
 80067e4:	bf00      	nop
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	20001024 	.word	0x20001024
 80067f0:	20000ff4 	.word	0x20000ff4
 80067f4:	20001008 	.word	0x20001008
 80067f8:	2000101c 	.word	0x2000101c
 80067fc:	20001020 	.word	0x20001020
 8006800:	200010d0 	.word	0x200010d0
 8006804:	20001030 	.word	0x20001030
 8006808:	08009c20 	.word	0x08009c20

0800680c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	60f8      	str	r0, [r7, #12]
 8006814:	60b9      	str	r1, [r7, #8]
 8006816:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	3b04      	subs	r3, #4
 800681c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006824:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	3b04      	subs	r3, #4
 800682a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	f023 0201 	bic.w	r2, r3, #1
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	3b04      	subs	r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800683c:	4a08      	ldr	r2, [pc, #32]	; (8006860 <pxPortInitialiseStack+0x54>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	3b14      	subs	r3, #20
 8006846:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006848:	687a      	ldr	r2, [r7, #4]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	3b20      	subs	r3, #32
 8006852:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006854:	68fb      	ldr	r3, [r7, #12]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr
 8006860:	08006865 	.word	0x08006865

08006864 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800686a:	2300      	movs	r3, #0
 800686c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800686e:	4b12      	ldr	r3, [pc, #72]	; (80068b8 <prvTaskExitError+0x54>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006876:	d00a      	beq.n	800688e <prvTaskExitError+0x2a>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	60fb      	str	r3, [r7, #12]
}
 800688a:	bf00      	nop
 800688c:	e7fe      	b.n	800688c <prvTaskExitError+0x28>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	60bb      	str	r3, [r7, #8]
}
 80068a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80068a2:	bf00      	nop
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d0fc      	beq.n	80068a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bc80      	pop	{r7}
 80068b4:	4770      	bx	lr
 80068b6:	bf00      	nop
 80068b8:	2000000c 	.word	0x2000000c
 80068bc:	00000000 	.word	0x00000000

080068c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <pxCurrentTCBConst2>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	6808      	ldr	r0, [r1, #0]
 80068c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80068ca:	f380 8809 	msr	PSP, r0
 80068ce:	f3bf 8f6f 	isb	sy
 80068d2:	f04f 0000 	mov.w	r0, #0
 80068d6:	f380 8811 	msr	BASEPRI, r0
 80068da:	f04e 0e0d 	orr.w	lr, lr, #13
 80068de:	4770      	bx	lr

080068e0 <pxCurrentTCBConst2>:
 80068e0:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80068e4:	bf00      	nop
 80068e6:	bf00      	nop

080068e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80068e8:	4806      	ldr	r0, [pc, #24]	; (8006904 <prvPortStartFirstTask+0x1c>)
 80068ea:	6800      	ldr	r0, [r0, #0]
 80068ec:	6800      	ldr	r0, [r0, #0]
 80068ee:	f380 8808 	msr	MSP, r0
 80068f2:	b662      	cpsie	i
 80068f4:	b661      	cpsie	f
 80068f6:	f3bf 8f4f 	dsb	sy
 80068fa:	f3bf 8f6f 	isb	sy
 80068fe:	df00      	svc	0
 8006900:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006902:	bf00      	nop
 8006904:	e000ed08 	.word	0xe000ed08

08006908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800690e:	4b32      	ldr	r3, [pc, #200]	; (80069d8 <xPortStartScheduler+0xd0>)
 8006910:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	b2db      	uxtb	r3, r3
 8006918:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	22ff      	movs	r2, #255	; 0xff
 800691e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	781b      	ldrb	r3, [r3, #0]
 8006924:	b2db      	uxtb	r3, r3
 8006926:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006928:	78fb      	ldrb	r3, [r7, #3]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006930:	b2da      	uxtb	r2, r3
 8006932:	4b2a      	ldr	r3, [pc, #168]	; (80069dc <xPortStartScheduler+0xd4>)
 8006934:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006936:	4b2a      	ldr	r3, [pc, #168]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006938:	2207      	movs	r2, #7
 800693a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800693c:	e009      	b.n	8006952 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800693e:	4b28      	ldr	r3, [pc, #160]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3b01      	subs	r3, #1
 8006944:	4a26      	ldr	r2, [pc, #152]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006946:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006948:	78fb      	ldrb	r3, [r7, #3]
 800694a:	b2db      	uxtb	r3, r3
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006952:	78fb      	ldrb	r3, [r7, #3]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800695a:	2b80      	cmp	r3, #128	; 0x80
 800695c:	d0ef      	beq.n	800693e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800695e:	4b20      	ldr	r3, [pc, #128]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f1c3 0307 	rsb	r3, r3, #7
 8006966:	2b04      	cmp	r3, #4
 8006968:	d00a      	beq.n	8006980 <xPortStartScheduler+0x78>
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	60bb      	str	r3, [r7, #8]
}
 800697c:	bf00      	nop
 800697e:	e7fe      	b.n	800697e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006980:	4b17      	ldr	r3, [pc, #92]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	4a16      	ldr	r2, [pc, #88]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006988:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800698a:	4b15      	ldr	r3, [pc, #84]	; (80069e0 <xPortStartScheduler+0xd8>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006992:	4a13      	ldr	r2, [pc, #76]	; (80069e0 <xPortStartScheduler+0xd8>)
 8006994:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	b2da      	uxtb	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800699e:	4b11      	ldr	r3, [pc, #68]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a10      	ldr	r2, [pc, #64]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069a8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a0d      	ldr	r2, [pc, #52]	; (80069e4 <xPortStartScheduler+0xdc>)
 80069b0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80069b4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80069b6:	f000 f8b9 	bl	8006b2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80069ba:	4b0b      	ldr	r3, [pc, #44]	; (80069e8 <xPortStartScheduler+0xe0>)
 80069bc:	2200      	movs	r2, #0
 80069be:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80069c0:	f7ff ff92 	bl	80068e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80069c4:	f7ff f8b6 	bl	8005b34 <vTaskSwitchContext>
	prvTaskExitError();
 80069c8:	f7ff ff4c 	bl	8006864 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	3710      	adds	r7, #16
 80069d2:	46bd      	mov	sp, r7
 80069d4:	bd80      	pop	{r7, pc}
 80069d6:	bf00      	nop
 80069d8:	e000e400 	.word	0xe000e400
 80069dc:	20001120 	.word	0x20001120
 80069e0:	20001124 	.word	0x20001124
 80069e4:	e000ed20 	.word	0xe000ed20
 80069e8:	2000000c 	.word	0x2000000c

080069ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	607b      	str	r3, [r7, #4]
}
 8006a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	4a0d      	ldr	r2, [pc, #52]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006a10:	4b0c      	ldr	r3, [pc, #48]	; (8006a44 <vPortEnterCritical+0x58>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d10f      	bne.n	8006a38 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006a18:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <vPortEnterCritical+0x5c>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00a      	beq.n	8006a38 <vPortEnterCritical+0x4c>
	__asm volatile
 8006a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a26:	f383 8811 	msr	BASEPRI, r3
 8006a2a:	f3bf 8f6f 	isb	sy
 8006a2e:	f3bf 8f4f 	dsb	sy
 8006a32:	603b      	str	r3, [r7, #0]
}
 8006a34:	bf00      	nop
 8006a36:	e7fe      	b.n	8006a36 <vPortEnterCritical+0x4a>
	}
}
 8006a38:	bf00      	nop
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bc80      	pop	{r7}
 8006a40:	4770      	bx	lr
 8006a42:	bf00      	nop
 8006a44:	2000000c 	.word	0x2000000c
 8006a48:	e000ed04 	.word	0xe000ed04

08006a4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a4c:	b480      	push	{r7}
 8006a4e:	b083      	sub	sp, #12
 8006a50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a52:	4b11      	ldr	r3, [pc, #68]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d10a      	bne.n	8006a70 <vPortExitCritical+0x24>
	__asm volatile
 8006a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a5e:	f383 8811 	msr	BASEPRI, r3
 8006a62:	f3bf 8f6f 	isb	sy
 8006a66:	f3bf 8f4f 	dsb	sy
 8006a6a:	607b      	str	r3, [r7, #4]
}
 8006a6c:	bf00      	nop
 8006a6e:	e7fe      	b.n	8006a6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a70:	4b09      	ldr	r3, [pc, #36]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4a08      	ldr	r2, [pc, #32]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a78:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <vPortExitCritical+0x4c>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d105      	bne.n	8006a8e <vPortExitCritical+0x42>
 8006a82:	2300      	movs	r3, #0
 8006a84:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	f383 8811 	msr	BASEPRI, r3
}
 8006a8c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a8e:	bf00      	nop
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bc80      	pop	{r7}
 8006a96:	4770      	bx	lr
 8006a98:	2000000c 	.word	0x2000000c
 8006a9c:	00000000 	.word	0x00000000

08006aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006aa0:	f3ef 8009 	mrs	r0, PSP
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <pxCurrentTCBConst>)
 8006aaa:	681a      	ldr	r2, [r3, #0]
 8006aac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ab0:	6010      	str	r0, [r2, #0]
 8006ab2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006ab6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006aba:	f380 8811 	msr	BASEPRI, r0
 8006abe:	f7ff f839 	bl	8005b34 <vTaskSwitchContext>
 8006ac2:	f04f 0000 	mov.w	r0, #0
 8006ac6:	f380 8811 	msr	BASEPRI, r0
 8006aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006ace:	6819      	ldr	r1, [r3, #0]
 8006ad0:	6808      	ldr	r0, [r1, #0]
 8006ad2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006ad6:	f380 8809 	msr	PSP, r0
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	4770      	bx	lr

08006ae0 <pxCurrentTCBConst>:
 8006ae0:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ae4:	bf00      	nop
 8006ae6:	bf00      	nop

08006ae8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	607b      	str	r3, [r7, #4]
}
 8006b00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006b02:	f7fe ff59 	bl	80059b8 <xTaskIncrementTick>
 8006b06:	4603      	mov	r3, r0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d003      	beq.n	8006b14 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006b0c:	4b06      	ldr	r3, [pc, #24]	; (8006b28 <SysTick_Handler+0x40>)
 8006b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b12:	601a      	str	r2, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	f383 8811 	msr	BASEPRI, r3
}
 8006b1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	e000ed04 	.word	0xe000ed04

08006b2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b30:	4b0a      	ldr	r3, [pc, #40]	; (8006b5c <vPortSetupTimerInterrupt+0x30>)
 8006b32:	2200      	movs	r2, #0
 8006b34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b36:	4b0a      	ldr	r3, [pc, #40]	; (8006b60 <vPortSetupTimerInterrupt+0x34>)
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b3c:	4b09      	ldr	r3, [pc, #36]	; (8006b64 <vPortSetupTimerInterrupt+0x38>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a09      	ldr	r2, [pc, #36]	; (8006b68 <vPortSetupTimerInterrupt+0x3c>)
 8006b42:	fba2 2303 	umull	r2, r3, r2, r3
 8006b46:	099b      	lsrs	r3, r3, #6
 8006b48:	4a08      	ldr	r2, [pc, #32]	; (8006b6c <vPortSetupTimerInterrupt+0x40>)
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b4e:	4b03      	ldr	r3, [pc, #12]	; (8006b5c <vPortSetupTimerInterrupt+0x30>)
 8006b50:	2207      	movs	r2, #7
 8006b52:	601a      	str	r2, [r3, #0]
}
 8006b54:	bf00      	nop
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bc80      	pop	{r7}
 8006b5a:	4770      	bx	lr
 8006b5c:	e000e010 	.word	0xe000e010
 8006b60:	e000e018 	.word	0xe000e018
 8006b64:	20000000 	.word	0x20000000
 8006b68:	10624dd3 	.word	0x10624dd3
 8006b6c:	e000e014 	.word	0xe000e014

08006b70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b76:	f3ef 8305 	mrs	r3, IPSR
 8006b7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b0f      	cmp	r3, #15
 8006b80:	d914      	bls.n	8006bac <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b82:	4a16      	ldr	r2, [pc, #88]	; (8006bdc <vPortValidateInterruptPriority+0x6c>)
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	4413      	add	r3, r2
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b8c:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <vPortValidateInterruptPriority+0x70>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	7afa      	ldrb	r2, [r7, #11]
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d20a      	bcs.n	8006bac <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	f383 8811 	msr	BASEPRI, r3
 8006b9e:	f3bf 8f6f 	isb	sy
 8006ba2:	f3bf 8f4f 	dsb	sy
 8006ba6:	607b      	str	r3, [r7, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	e7fe      	b.n	8006baa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006bac:	4b0d      	ldr	r3, [pc, #52]	; (8006be4 <vPortValidateInterruptPriority+0x74>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006bb4:	4b0c      	ldr	r3, [pc, #48]	; (8006be8 <vPortValidateInterruptPriority+0x78>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d90a      	bls.n	8006bd2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc0:	f383 8811 	msr	BASEPRI, r3
 8006bc4:	f3bf 8f6f 	isb	sy
 8006bc8:	f3bf 8f4f 	dsb	sy
 8006bcc:	603b      	str	r3, [r7, #0]
}
 8006bce:	bf00      	nop
 8006bd0:	e7fe      	b.n	8006bd0 <vPortValidateInterruptPriority+0x60>
	}
 8006bd2:	bf00      	nop
 8006bd4:	3714      	adds	r7, #20
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bc80      	pop	{r7}
 8006bda:	4770      	bx	lr
 8006bdc:	e000e3f0 	.word	0xe000e3f0
 8006be0:	20001120 	.word	0x20001120
 8006be4:	e000ed0c 	.word	0xe000ed0c
 8006be8:	20001124 	.word	0x20001124

08006bec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b08a      	sub	sp, #40	; 0x28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bf8:	f7fe fe24 	bl	8005844 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bfc:	4b58      	ldr	r3, [pc, #352]	; (8006d60 <pvPortMalloc+0x174>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d101      	bne.n	8006c08 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006c04:	f000 f910 	bl	8006e28 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006c08:	4b56      	ldr	r3, [pc, #344]	; (8006d64 <pvPortMalloc+0x178>)
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	f040 808e 	bne.w	8006d32 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d01d      	beq.n	8006c58 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006c1c:	2208      	movs	r2, #8
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4413      	add	r3, r2
 8006c22:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f003 0307 	and.w	r3, r3, #7
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d014      	beq.n	8006c58 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f023 0307 	bic.w	r3, r3, #7
 8006c34:	3308      	adds	r3, #8
 8006c36:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f003 0307 	and.w	r3, r3, #7
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00a      	beq.n	8006c58 <pvPortMalloc+0x6c>
	__asm volatile
 8006c42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c46:	f383 8811 	msr	BASEPRI, r3
 8006c4a:	f3bf 8f6f 	isb	sy
 8006c4e:	f3bf 8f4f 	dsb	sy
 8006c52:	617b      	str	r3, [r7, #20]
}
 8006c54:	bf00      	nop
 8006c56:	e7fe      	b.n	8006c56 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d069      	beq.n	8006d32 <pvPortMalloc+0x146>
 8006c5e:	4b42      	ldr	r3, [pc, #264]	; (8006d68 <pvPortMalloc+0x17c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	687a      	ldr	r2, [r7, #4]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	d864      	bhi.n	8006d32 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c68:	4b40      	ldr	r3, [pc, #256]	; (8006d6c <pvPortMalloc+0x180>)
 8006c6a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c6c:	4b3f      	ldr	r3, [pc, #252]	; (8006d6c <pvPortMalloc+0x180>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c72:	e004      	b.n	8006c7e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c76:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d903      	bls.n	8006c90 <pvPortMalloc+0xa4>
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d1f1      	bne.n	8006c74 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c90:	4b33      	ldr	r3, [pc, #204]	; (8006d60 <pvPortMalloc+0x174>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d04b      	beq.n	8006d32 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2208      	movs	r2, #8
 8006ca0:	4413      	add	r3, r2
 8006ca2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	685a      	ldr	r2, [r3, #4]
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	1ad2      	subs	r2, r2, r3
 8006cb4:	2308      	movs	r3, #8
 8006cb6:	005b      	lsls	r3, r3, #1
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d91f      	bls.n	8006cfc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4413      	add	r3, r2
 8006cc2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cc4:	69bb      	ldr	r3, [r7, #24]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <pvPortMalloc+0xf8>
	__asm volatile
 8006cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd2:	f383 8811 	msr	BASEPRI, r3
 8006cd6:	f3bf 8f6f 	isb	sy
 8006cda:	f3bf 8f4f 	dsb	sy
 8006cde:	613b      	str	r3, [r7, #16]
}
 8006ce0:	bf00      	nop
 8006ce2:	e7fe      	b.n	8006ce2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	685a      	ldr	r2, [r3, #4]
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	1ad2      	subs	r2, r2, r3
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cf6:	69b8      	ldr	r0, [r7, #24]
 8006cf8:	f000 f8f8 	bl	8006eec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cfc:	4b1a      	ldr	r3, [pc, #104]	; (8006d68 <pvPortMalloc+0x17c>)
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d02:	685b      	ldr	r3, [r3, #4]
 8006d04:	1ad3      	subs	r3, r2, r3
 8006d06:	4a18      	ldr	r2, [pc, #96]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d08:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006d0a:	4b17      	ldr	r3, [pc, #92]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	4b18      	ldr	r3, [pc, #96]	; (8006d70 <pvPortMalloc+0x184>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d203      	bcs.n	8006d1e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <pvPortMalloc+0x17c>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a15      	ldr	r2, [pc, #84]	; (8006d70 <pvPortMalloc+0x184>)
 8006d1c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	685a      	ldr	r2, [r3, #4]
 8006d22:	4b10      	ldr	r3, [pc, #64]	; (8006d64 <pvPortMalloc+0x178>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	431a      	orrs	r2, r3
 8006d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d2e:	2200      	movs	r2, #0
 8006d30:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d32:	f7fe fd95 	bl	8005860 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	f003 0307 	and.w	r3, r3, #7
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00a      	beq.n	8006d56 <pvPortMalloc+0x16a>
	__asm volatile
 8006d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d44:	f383 8811 	msr	BASEPRI, r3
 8006d48:	f3bf 8f6f 	isb	sy
 8006d4c:	f3bf 8f4f 	dsb	sy
 8006d50:	60fb      	str	r3, [r7, #12]
}
 8006d52:	bf00      	nop
 8006d54:	e7fe      	b.n	8006d54 <pvPortMalloc+0x168>
	return pvReturn;
 8006d56:	69fb      	ldr	r3, [r7, #28]
}
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3728      	adds	r7, #40	; 0x28
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	20001d30 	.word	0x20001d30
 8006d64:	20001d3c 	.word	0x20001d3c
 8006d68:	20001d34 	.word	0x20001d34
 8006d6c:	20001d28 	.word	0x20001d28
 8006d70:	20001d38 	.word	0x20001d38

08006d74 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b086      	sub	sp, #24
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d048      	beq.n	8006e18 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d86:	2308      	movs	r3, #8
 8006d88:	425b      	negs	r3, r3
 8006d8a:	697a      	ldr	r2, [r7, #20]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	685a      	ldr	r2, [r3, #4]
 8006d98:	4b21      	ldr	r3, [pc, #132]	; (8006e20 <vPortFree+0xac>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4013      	ands	r3, r2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10a      	bne.n	8006db8 <vPortFree+0x44>
	__asm volatile
 8006da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da6:	f383 8811 	msr	BASEPRI, r3
 8006daa:	f3bf 8f6f 	isb	sy
 8006dae:	f3bf 8f4f 	dsb	sy
 8006db2:	60fb      	str	r3, [r7, #12]
}
 8006db4:	bf00      	nop
 8006db6:	e7fe      	b.n	8006db6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d00a      	beq.n	8006dd6 <vPortFree+0x62>
	__asm volatile
 8006dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc4:	f383 8811 	msr	BASEPRI, r3
 8006dc8:	f3bf 8f6f 	isb	sy
 8006dcc:	f3bf 8f4f 	dsb	sy
 8006dd0:	60bb      	str	r3, [r7, #8]
}
 8006dd2:	bf00      	nop
 8006dd4:	e7fe      	b.n	8006dd4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	685a      	ldr	r2, [r3, #4]
 8006dda:	4b11      	ldr	r3, [pc, #68]	; (8006e20 <vPortFree+0xac>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4013      	ands	r3, r2
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d019      	beq.n	8006e18 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d115      	bne.n	8006e18 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b0b      	ldr	r3, [pc, #44]	; (8006e20 <vPortFree+0xac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	43db      	mvns	r3, r3
 8006df6:	401a      	ands	r2, r3
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dfc:	f7fe fd22 	bl	8005844 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	685a      	ldr	r2, [r3, #4]
 8006e04:	4b07      	ldr	r3, [pc, #28]	; (8006e24 <vPortFree+0xb0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4413      	add	r3, r2
 8006e0a:	4a06      	ldr	r2, [pc, #24]	; (8006e24 <vPortFree+0xb0>)
 8006e0c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006e0e:	6938      	ldr	r0, [r7, #16]
 8006e10:	f000 f86c 	bl	8006eec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e14:	f7fe fd24 	bl	8005860 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20001d3c 	.word	0x20001d3c
 8006e24:	20001d34 	.word	0x20001d34

08006e28 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006e32:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e34:	4b27      	ldr	r3, [pc, #156]	; (8006ed4 <prvHeapInit+0xac>)
 8006e36:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d00c      	beq.n	8006e5c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	3307      	adds	r3, #7
 8006e46:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f023 0307 	bic.w	r3, r3, #7
 8006e4e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e50:	68ba      	ldr	r2, [r7, #8]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1ad3      	subs	r3, r2, r3
 8006e56:	4a1f      	ldr	r2, [pc, #124]	; (8006ed4 <prvHeapInit+0xac>)
 8006e58:	4413      	add	r3, r2
 8006e5a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e60:	4a1d      	ldr	r2, [pc, #116]	; (8006ed8 <prvHeapInit+0xb0>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e66:	4b1c      	ldr	r3, [pc, #112]	; (8006ed8 <prvHeapInit+0xb0>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	68ba      	ldr	r2, [r7, #8]
 8006e70:	4413      	add	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e74:	2208      	movs	r2, #8
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	1a9b      	subs	r3, r3, r2
 8006e7a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f023 0307 	bic.w	r3, r3, #7
 8006e82:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	4a15      	ldr	r2, [pc, #84]	; (8006edc <prvHeapInit+0xb4>)
 8006e88:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e8a:	4b14      	ldr	r3, [pc, #80]	; (8006edc <prvHeapInit+0xb4>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e92:	4b12      	ldr	r3, [pc, #72]	; (8006edc <prvHeapInit+0xb4>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	2200      	movs	r2, #0
 8006e98:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	1ad2      	subs	r2, r2, r3
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ea8:	4b0c      	ldr	r3, [pc, #48]	; (8006edc <prvHeapInit+0xb4>)
 8006eaa:	681a      	ldr	r2, [r3, #0]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	; (8006ee0 <prvHeapInit+0xb8>)
 8006eb6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685b      	ldr	r3, [r3, #4]
 8006ebc:	4a09      	ldr	r2, [pc, #36]	; (8006ee4 <prvHeapInit+0xbc>)
 8006ebe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ec0:	4b09      	ldr	r3, [pc, #36]	; (8006ee8 <prvHeapInit+0xc0>)
 8006ec2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ec6:	601a      	str	r2, [r3, #0]
}
 8006ec8:	bf00      	nop
 8006eca:	3714      	adds	r7, #20
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bc80      	pop	{r7}
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	20001128 	.word	0x20001128
 8006ed8:	20001d28 	.word	0x20001d28
 8006edc:	20001d30 	.word	0x20001d30
 8006ee0:	20001d38 	.word	0x20001d38
 8006ee4:	20001d34 	.word	0x20001d34
 8006ee8:	20001d3c 	.word	0x20001d3c

08006eec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ef4:	4b27      	ldr	r3, [pc, #156]	; (8006f94 <prvInsertBlockIntoFreeList+0xa8>)
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	e002      	b.n	8006f00 <prvInsertBlockIntoFreeList+0x14>
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	60fb      	str	r3, [r7, #12]
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d8f7      	bhi.n	8006efa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	4413      	add	r3, r2
 8006f16:	687a      	ldr	r2, [r7, #4]
 8006f18:	429a      	cmp	r2, r3
 8006f1a:	d108      	bne.n	8006f2e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	685a      	ldr	r2, [r3, #4]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	68ba      	ldr	r2, [r7, #8]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d118      	bne.n	8006f74 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	4b14      	ldr	r3, [pc, #80]	; (8006f98 <prvInsertBlockIntoFreeList+0xac>)
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d00d      	beq.n	8006f6a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	441a      	add	r2, r3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e008      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <prvInsertBlockIntoFreeList+0xac>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	601a      	str	r2, [r3, #0]
 8006f72:	e003      	b.n	8006f7c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681a      	ldr	r2, [r3, #0]
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d002      	beq.n	8006f8a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f8a:	bf00      	nop
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bc80      	pop	{r7}
 8006f92:	4770      	bx	lr
 8006f94:	20001d28 	.word	0x20001d28
 8006f98:	20001d30 	.word	0x20001d30

08006f9c <__errno>:
 8006f9c:	4b01      	ldr	r3, [pc, #4]	; (8006fa4 <__errno+0x8>)
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000010 	.word	0x20000010

08006fa8 <std>:
 8006fa8:	2300      	movs	r3, #0
 8006faa:	b510      	push	{r4, lr}
 8006fac:	4604      	mov	r4, r0
 8006fae:	e9c0 3300 	strd	r3, r3, [r0]
 8006fb2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fb6:	6083      	str	r3, [r0, #8]
 8006fb8:	8181      	strh	r1, [r0, #12]
 8006fba:	6643      	str	r3, [r0, #100]	; 0x64
 8006fbc:	81c2      	strh	r2, [r0, #14]
 8006fbe:	6183      	str	r3, [r0, #24]
 8006fc0:	4619      	mov	r1, r3
 8006fc2:	2208      	movs	r2, #8
 8006fc4:	305c      	adds	r0, #92	; 0x5c
 8006fc6:	f000 f91a 	bl	80071fe <memset>
 8006fca:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <std+0x38>)
 8006fcc:	6224      	str	r4, [r4, #32]
 8006fce:	6263      	str	r3, [r4, #36]	; 0x24
 8006fd0:	4b04      	ldr	r3, [pc, #16]	; (8006fe4 <std+0x3c>)
 8006fd2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fd4:	4b04      	ldr	r3, [pc, #16]	; (8006fe8 <std+0x40>)
 8006fd6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fd8:	4b04      	ldr	r3, [pc, #16]	; (8006fec <std+0x44>)
 8006fda:	6323      	str	r3, [r4, #48]	; 0x30
 8006fdc:	bd10      	pop	{r4, pc}
 8006fde:	bf00      	nop
 8006fe0:	08007d1d 	.word	0x08007d1d
 8006fe4:	08007d3f 	.word	0x08007d3f
 8006fe8:	08007d77 	.word	0x08007d77
 8006fec:	08007d9b 	.word	0x08007d9b

08006ff0 <_cleanup_r>:
 8006ff0:	4901      	ldr	r1, [pc, #4]	; (8006ff8 <_cleanup_r+0x8>)
 8006ff2:	f000 b8af 	b.w	8007154 <_fwalk_reent>
 8006ff6:	bf00      	nop
 8006ff8:	08008be1 	.word	0x08008be1

08006ffc <__sfmoreglue>:
 8006ffc:	2268      	movs	r2, #104	; 0x68
 8006ffe:	b570      	push	{r4, r5, r6, lr}
 8007000:	1e4d      	subs	r5, r1, #1
 8007002:	4355      	muls	r5, r2
 8007004:	460e      	mov	r6, r1
 8007006:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800700a:	f000 f921 	bl	8007250 <_malloc_r>
 800700e:	4604      	mov	r4, r0
 8007010:	b140      	cbz	r0, 8007024 <__sfmoreglue+0x28>
 8007012:	2100      	movs	r1, #0
 8007014:	e9c0 1600 	strd	r1, r6, [r0]
 8007018:	300c      	adds	r0, #12
 800701a:	60a0      	str	r0, [r4, #8]
 800701c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007020:	f000 f8ed 	bl	80071fe <memset>
 8007024:	4620      	mov	r0, r4
 8007026:	bd70      	pop	{r4, r5, r6, pc}

08007028 <__sfp_lock_acquire>:
 8007028:	4801      	ldr	r0, [pc, #4]	; (8007030 <__sfp_lock_acquire+0x8>)
 800702a:	f000 b8d8 	b.w	80071de <__retarget_lock_acquire_recursive>
 800702e:	bf00      	nop
 8007030:	20001d41 	.word	0x20001d41

08007034 <__sfp_lock_release>:
 8007034:	4801      	ldr	r0, [pc, #4]	; (800703c <__sfp_lock_release+0x8>)
 8007036:	f000 b8d3 	b.w	80071e0 <__retarget_lock_release_recursive>
 800703a:	bf00      	nop
 800703c:	20001d41 	.word	0x20001d41

08007040 <__sinit_lock_acquire>:
 8007040:	4801      	ldr	r0, [pc, #4]	; (8007048 <__sinit_lock_acquire+0x8>)
 8007042:	f000 b8cc 	b.w	80071de <__retarget_lock_acquire_recursive>
 8007046:	bf00      	nop
 8007048:	20001d42 	.word	0x20001d42

0800704c <__sinit_lock_release>:
 800704c:	4801      	ldr	r0, [pc, #4]	; (8007054 <__sinit_lock_release+0x8>)
 800704e:	f000 b8c7 	b.w	80071e0 <__retarget_lock_release_recursive>
 8007052:	bf00      	nop
 8007054:	20001d42 	.word	0x20001d42

08007058 <__sinit>:
 8007058:	b510      	push	{r4, lr}
 800705a:	4604      	mov	r4, r0
 800705c:	f7ff fff0 	bl	8007040 <__sinit_lock_acquire>
 8007060:	69a3      	ldr	r3, [r4, #24]
 8007062:	b11b      	cbz	r3, 800706c <__sinit+0x14>
 8007064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007068:	f7ff bff0 	b.w	800704c <__sinit_lock_release>
 800706c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007070:	6523      	str	r3, [r4, #80]	; 0x50
 8007072:	4b13      	ldr	r3, [pc, #76]	; (80070c0 <__sinit+0x68>)
 8007074:	4a13      	ldr	r2, [pc, #76]	; (80070c4 <__sinit+0x6c>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	62a2      	str	r2, [r4, #40]	; 0x28
 800707a:	42a3      	cmp	r3, r4
 800707c:	bf08      	it	eq
 800707e:	2301      	moveq	r3, #1
 8007080:	4620      	mov	r0, r4
 8007082:	bf08      	it	eq
 8007084:	61a3      	streq	r3, [r4, #24]
 8007086:	f000 f81f 	bl	80070c8 <__sfp>
 800708a:	6060      	str	r0, [r4, #4]
 800708c:	4620      	mov	r0, r4
 800708e:	f000 f81b 	bl	80070c8 <__sfp>
 8007092:	60a0      	str	r0, [r4, #8]
 8007094:	4620      	mov	r0, r4
 8007096:	f000 f817 	bl	80070c8 <__sfp>
 800709a:	2200      	movs	r2, #0
 800709c:	2104      	movs	r1, #4
 800709e:	60e0      	str	r0, [r4, #12]
 80070a0:	6860      	ldr	r0, [r4, #4]
 80070a2:	f7ff ff81 	bl	8006fa8 <std>
 80070a6:	2201      	movs	r2, #1
 80070a8:	2109      	movs	r1, #9
 80070aa:	68a0      	ldr	r0, [r4, #8]
 80070ac:	f7ff ff7c 	bl	8006fa8 <std>
 80070b0:	2202      	movs	r2, #2
 80070b2:	2112      	movs	r1, #18
 80070b4:	68e0      	ldr	r0, [r4, #12]
 80070b6:	f7ff ff77 	bl	8006fa8 <std>
 80070ba:	2301      	movs	r3, #1
 80070bc:	61a3      	str	r3, [r4, #24]
 80070be:	e7d1      	b.n	8007064 <__sinit+0xc>
 80070c0:	08009d24 	.word	0x08009d24
 80070c4:	08006ff1 	.word	0x08006ff1

080070c8 <__sfp>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	4607      	mov	r7, r0
 80070cc:	f7ff ffac 	bl	8007028 <__sfp_lock_acquire>
 80070d0:	4b1e      	ldr	r3, [pc, #120]	; (800714c <__sfp+0x84>)
 80070d2:	681e      	ldr	r6, [r3, #0]
 80070d4:	69b3      	ldr	r3, [r6, #24]
 80070d6:	b913      	cbnz	r3, 80070de <__sfp+0x16>
 80070d8:	4630      	mov	r0, r6
 80070da:	f7ff ffbd 	bl	8007058 <__sinit>
 80070de:	3648      	adds	r6, #72	; 0x48
 80070e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	d503      	bpl.n	80070f0 <__sfp+0x28>
 80070e8:	6833      	ldr	r3, [r6, #0]
 80070ea:	b30b      	cbz	r3, 8007130 <__sfp+0x68>
 80070ec:	6836      	ldr	r6, [r6, #0]
 80070ee:	e7f7      	b.n	80070e0 <__sfp+0x18>
 80070f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070f4:	b9d5      	cbnz	r5, 800712c <__sfp+0x64>
 80070f6:	4b16      	ldr	r3, [pc, #88]	; (8007150 <__sfp+0x88>)
 80070f8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070fc:	60e3      	str	r3, [r4, #12]
 80070fe:	6665      	str	r5, [r4, #100]	; 0x64
 8007100:	f000 f86c 	bl	80071dc <__retarget_lock_init_recursive>
 8007104:	f7ff ff96 	bl	8007034 <__sfp_lock_release>
 8007108:	2208      	movs	r2, #8
 800710a:	4629      	mov	r1, r5
 800710c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007110:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007114:	6025      	str	r5, [r4, #0]
 8007116:	61a5      	str	r5, [r4, #24]
 8007118:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800711c:	f000 f86f 	bl	80071fe <memset>
 8007120:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007124:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007128:	4620      	mov	r0, r4
 800712a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800712c:	3468      	adds	r4, #104	; 0x68
 800712e:	e7d9      	b.n	80070e4 <__sfp+0x1c>
 8007130:	2104      	movs	r1, #4
 8007132:	4638      	mov	r0, r7
 8007134:	f7ff ff62 	bl	8006ffc <__sfmoreglue>
 8007138:	4604      	mov	r4, r0
 800713a:	6030      	str	r0, [r6, #0]
 800713c:	2800      	cmp	r0, #0
 800713e:	d1d5      	bne.n	80070ec <__sfp+0x24>
 8007140:	f7ff ff78 	bl	8007034 <__sfp_lock_release>
 8007144:	230c      	movs	r3, #12
 8007146:	603b      	str	r3, [r7, #0]
 8007148:	e7ee      	b.n	8007128 <__sfp+0x60>
 800714a:	bf00      	nop
 800714c:	08009d24 	.word	0x08009d24
 8007150:	ffff0001 	.word	0xffff0001

08007154 <_fwalk_reent>:
 8007154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007158:	4606      	mov	r6, r0
 800715a:	4688      	mov	r8, r1
 800715c:	2700      	movs	r7, #0
 800715e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007162:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007166:	f1b9 0901 	subs.w	r9, r9, #1
 800716a:	d505      	bpl.n	8007178 <_fwalk_reent+0x24>
 800716c:	6824      	ldr	r4, [r4, #0]
 800716e:	2c00      	cmp	r4, #0
 8007170:	d1f7      	bne.n	8007162 <_fwalk_reent+0xe>
 8007172:	4638      	mov	r0, r7
 8007174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007178:	89ab      	ldrh	r3, [r5, #12]
 800717a:	2b01      	cmp	r3, #1
 800717c:	d907      	bls.n	800718e <_fwalk_reent+0x3a>
 800717e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007182:	3301      	adds	r3, #1
 8007184:	d003      	beq.n	800718e <_fwalk_reent+0x3a>
 8007186:	4629      	mov	r1, r5
 8007188:	4630      	mov	r0, r6
 800718a:	47c0      	blx	r8
 800718c:	4307      	orrs	r7, r0
 800718e:	3568      	adds	r5, #104	; 0x68
 8007190:	e7e9      	b.n	8007166 <_fwalk_reent+0x12>
	...

08007194 <__libc_init_array>:
 8007194:	b570      	push	{r4, r5, r6, lr}
 8007196:	2600      	movs	r6, #0
 8007198:	4d0c      	ldr	r5, [pc, #48]	; (80071cc <__libc_init_array+0x38>)
 800719a:	4c0d      	ldr	r4, [pc, #52]	; (80071d0 <__libc_init_array+0x3c>)
 800719c:	1b64      	subs	r4, r4, r5
 800719e:	10a4      	asrs	r4, r4, #2
 80071a0:	42a6      	cmp	r6, r4
 80071a2:	d109      	bne.n	80071b8 <__libc_init_array+0x24>
 80071a4:	f002 fcba 	bl	8009b1c <_init>
 80071a8:	2600      	movs	r6, #0
 80071aa:	4d0a      	ldr	r5, [pc, #40]	; (80071d4 <__libc_init_array+0x40>)
 80071ac:	4c0a      	ldr	r4, [pc, #40]	; (80071d8 <__libc_init_array+0x44>)
 80071ae:	1b64      	subs	r4, r4, r5
 80071b0:	10a4      	asrs	r4, r4, #2
 80071b2:	42a6      	cmp	r6, r4
 80071b4:	d105      	bne.n	80071c2 <__libc_init_array+0x2e>
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
 80071b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071bc:	4798      	blx	r3
 80071be:	3601      	adds	r6, #1
 80071c0:	e7ee      	b.n	80071a0 <__libc_init_array+0xc>
 80071c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071c6:	4798      	blx	r3
 80071c8:	3601      	adds	r6, #1
 80071ca:	e7f2      	b.n	80071b2 <__libc_init_array+0x1e>
 80071cc:	0800a09c 	.word	0x0800a09c
 80071d0:	0800a09c 	.word	0x0800a09c
 80071d4:	0800a09c 	.word	0x0800a09c
 80071d8:	0800a0a0 	.word	0x0800a0a0

080071dc <__retarget_lock_init_recursive>:
 80071dc:	4770      	bx	lr

080071de <__retarget_lock_acquire_recursive>:
 80071de:	4770      	bx	lr

080071e0 <__retarget_lock_release_recursive>:
 80071e0:	4770      	bx	lr

080071e2 <memcpy>:
 80071e2:	440a      	add	r2, r1
 80071e4:	4291      	cmp	r1, r2
 80071e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80071ea:	d100      	bne.n	80071ee <memcpy+0xc>
 80071ec:	4770      	bx	lr
 80071ee:	b510      	push	{r4, lr}
 80071f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071f4:	4291      	cmp	r1, r2
 80071f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071fa:	d1f9      	bne.n	80071f0 <memcpy+0xe>
 80071fc:	bd10      	pop	{r4, pc}

080071fe <memset>:
 80071fe:	4603      	mov	r3, r0
 8007200:	4402      	add	r2, r0
 8007202:	4293      	cmp	r3, r2
 8007204:	d100      	bne.n	8007208 <memset+0xa>
 8007206:	4770      	bx	lr
 8007208:	f803 1b01 	strb.w	r1, [r3], #1
 800720c:	e7f9      	b.n	8007202 <memset+0x4>
	...

08007210 <sbrk_aligned>:
 8007210:	b570      	push	{r4, r5, r6, lr}
 8007212:	4e0e      	ldr	r6, [pc, #56]	; (800724c <sbrk_aligned+0x3c>)
 8007214:	460c      	mov	r4, r1
 8007216:	6831      	ldr	r1, [r6, #0]
 8007218:	4605      	mov	r5, r0
 800721a:	b911      	cbnz	r1, 8007222 <sbrk_aligned+0x12>
 800721c:	f000 fd6e 	bl	8007cfc <_sbrk_r>
 8007220:	6030      	str	r0, [r6, #0]
 8007222:	4621      	mov	r1, r4
 8007224:	4628      	mov	r0, r5
 8007226:	f000 fd69 	bl	8007cfc <_sbrk_r>
 800722a:	1c43      	adds	r3, r0, #1
 800722c:	d00a      	beq.n	8007244 <sbrk_aligned+0x34>
 800722e:	1cc4      	adds	r4, r0, #3
 8007230:	f024 0403 	bic.w	r4, r4, #3
 8007234:	42a0      	cmp	r0, r4
 8007236:	d007      	beq.n	8007248 <sbrk_aligned+0x38>
 8007238:	1a21      	subs	r1, r4, r0
 800723a:	4628      	mov	r0, r5
 800723c:	f000 fd5e 	bl	8007cfc <_sbrk_r>
 8007240:	3001      	adds	r0, #1
 8007242:	d101      	bne.n	8007248 <sbrk_aligned+0x38>
 8007244:	f04f 34ff 	mov.w	r4, #4294967295
 8007248:	4620      	mov	r0, r4
 800724a:	bd70      	pop	{r4, r5, r6, pc}
 800724c:	20001d48 	.word	0x20001d48

08007250 <_malloc_r>:
 8007250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007254:	1ccd      	adds	r5, r1, #3
 8007256:	f025 0503 	bic.w	r5, r5, #3
 800725a:	3508      	adds	r5, #8
 800725c:	2d0c      	cmp	r5, #12
 800725e:	bf38      	it	cc
 8007260:	250c      	movcc	r5, #12
 8007262:	2d00      	cmp	r5, #0
 8007264:	4607      	mov	r7, r0
 8007266:	db01      	blt.n	800726c <_malloc_r+0x1c>
 8007268:	42a9      	cmp	r1, r5
 800726a:	d905      	bls.n	8007278 <_malloc_r+0x28>
 800726c:	230c      	movs	r3, #12
 800726e:	2600      	movs	r6, #0
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4630      	mov	r0, r6
 8007274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007278:	4e2e      	ldr	r6, [pc, #184]	; (8007334 <_malloc_r+0xe4>)
 800727a:	f001 fd19 	bl	8008cb0 <__malloc_lock>
 800727e:	6833      	ldr	r3, [r6, #0]
 8007280:	461c      	mov	r4, r3
 8007282:	bb34      	cbnz	r4, 80072d2 <_malloc_r+0x82>
 8007284:	4629      	mov	r1, r5
 8007286:	4638      	mov	r0, r7
 8007288:	f7ff ffc2 	bl	8007210 <sbrk_aligned>
 800728c:	1c43      	adds	r3, r0, #1
 800728e:	4604      	mov	r4, r0
 8007290:	d14d      	bne.n	800732e <_malloc_r+0xde>
 8007292:	6834      	ldr	r4, [r6, #0]
 8007294:	4626      	mov	r6, r4
 8007296:	2e00      	cmp	r6, #0
 8007298:	d140      	bne.n	800731c <_malloc_r+0xcc>
 800729a:	6823      	ldr	r3, [r4, #0]
 800729c:	4631      	mov	r1, r6
 800729e:	4638      	mov	r0, r7
 80072a0:	eb04 0803 	add.w	r8, r4, r3
 80072a4:	f000 fd2a 	bl	8007cfc <_sbrk_r>
 80072a8:	4580      	cmp	r8, r0
 80072aa:	d13a      	bne.n	8007322 <_malloc_r+0xd2>
 80072ac:	6821      	ldr	r1, [r4, #0]
 80072ae:	3503      	adds	r5, #3
 80072b0:	1a6d      	subs	r5, r5, r1
 80072b2:	f025 0503 	bic.w	r5, r5, #3
 80072b6:	3508      	adds	r5, #8
 80072b8:	2d0c      	cmp	r5, #12
 80072ba:	bf38      	it	cc
 80072bc:	250c      	movcc	r5, #12
 80072be:	4638      	mov	r0, r7
 80072c0:	4629      	mov	r1, r5
 80072c2:	f7ff ffa5 	bl	8007210 <sbrk_aligned>
 80072c6:	3001      	adds	r0, #1
 80072c8:	d02b      	beq.n	8007322 <_malloc_r+0xd2>
 80072ca:	6823      	ldr	r3, [r4, #0]
 80072cc:	442b      	add	r3, r5
 80072ce:	6023      	str	r3, [r4, #0]
 80072d0:	e00e      	b.n	80072f0 <_malloc_r+0xa0>
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	1b52      	subs	r2, r2, r5
 80072d6:	d41e      	bmi.n	8007316 <_malloc_r+0xc6>
 80072d8:	2a0b      	cmp	r2, #11
 80072da:	d916      	bls.n	800730a <_malloc_r+0xba>
 80072dc:	1961      	adds	r1, r4, r5
 80072de:	42a3      	cmp	r3, r4
 80072e0:	6025      	str	r5, [r4, #0]
 80072e2:	bf18      	it	ne
 80072e4:	6059      	strne	r1, [r3, #4]
 80072e6:	6863      	ldr	r3, [r4, #4]
 80072e8:	bf08      	it	eq
 80072ea:	6031      	streq	r1, [r6, #0]
 80072ec:	5162      	str	r2, [r4, r5]
 80072ee:	604b      	str	r3, [r1, #4]
 80072f0:	4638      	mov	r0, r7
 80072f2:	f104 060b 	add.w	r6, r4, #11
 80072f6:	f001 fce1 	bl	8008cbc <__malloc_unlock>
 80072fa:	f026 0607 	bic.w	r6, r6, #7
 80072fe:	1d23      	adds	r3, r4, #4
 8007300:	1af2      	subs	r2, r6, r3
 8007302:	d0b6      	beq.n	8007272 <_malloc_r+0x22>
 8007304:	1b9b      	subs	r3, r3, r6
 8007306:	50a3      	str	r3, [r4, r2]
 8007308:	e7b3      	b.n	8007272 <_malloc_r+0x22>
 800730a:	6862      	ldr	r2, [r4, #4]
 800730c:	42a3      	cmp	r3, r4
 800730e:	bf0c      	ite	eq
 8007310:	6032      	streq	r2, [r6, #0]
 8007312:	605a      	strne	r2, [r3, #4]
 8007314:	e7ec      	b.n	80072f0 <_malloc_r+0xa0>
 8007316:	4623      	mov	r3, r4
 8007318:	6864      	ldr	r4, [r4, #4]
 800731a:	e7b2      	b.n	8007282 <_malloc_r+0x32>
 800731c:	4634      	mov	r4, r6
 800731e:	6876      	ldr	r6, [r6, #4]
 8007320:	e7b9      	b.n	8007296 <_malloc_r+0x46>
 8007322:	230c      	movs	r3, #12
 8007324:	4638      	mov	r0, r7
 8007326:	603b      	str	r3, [r7, #0]
 8007328:	f001 fcc8 	bl	8008cbc <__malloc_unlock>
 800732c:	e7a1      	b.n	8007272 <_malloc_r+0x22>
 800732e:	6025      	str	r5, [r4, #0]
 8007330:	e7de      	b.n	80072f0 <_malloc_r+0xa0>
 8007332:	bf00      	nop
 8007334:	20001d44 	.word	0x20001d44

08007338 <__cvt>:
 8007338:	2b00      	cmp	r3, #0
 800733a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800733e:	461f      	mov	r7, r3
 8007340:	bfbb      	ittet	lt
 8007342:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8007346:	461f      	movlt	r7, r3
 8007348:	2300      	movge	r3, #0
 800734a:	232d      	movlt	r3, #45	; 0x2d
 800734c:	b088      	sub	sp, #32
 800734e:	4614      	mov	r4, r2
 8007350:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007352:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007354:	7013      	strb	r3, [r2, #0]
 8007356:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007358:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800735c:	f023 0820 	bic.w	r8, r3, #32
 8007360:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007364:	d005      	beq.n	8007372 <__cvt+0x3a>
 8007366:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800736a:	d100      	bne.n	800736e <__cvt+0x36>
 800736c:	3501      	adds	r5, #1
 800736e:	2302      	movs	r3, #2
 8007370:	e000      	b.n	8007374 <__cvt+0x3c>
 8007372:	2303      	movs	r3, #3
 8007374:	aa07      	add	r2, sp, #28
 8007376:	9204      	str	r2, [sp, #16]
 8007378:	aa06      	add	r2, sp, #24
 800737a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800737e:	e9cd 3500 	strd	r3, r5, [sp]
 8007382:	4622      	mov	r2, r4
 8007384:	463b      	mov	r3, r7
 8007386:	f000 fdbb 	bl	8007f00 <_dtoa_r>
 800738a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800738e:	4606      	mov	r6, r0
 8007390:	d102      	bne.n	8007398 <__cvt+0x60>
 8007392:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007394:	07db      	lsls	r3, r3, #31
 8007396:	d522      	bpl.n	80073de <__cvt+0xa6>
 8007398:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800739c:	eb06 0905 	add.w	r9, r6, r5
 80073a0:	d110      	bne.n	80073c4 <__cvt+0x8c>
 80073a2:	7833      	ldrb	r3, [r6, #0]
 80073a4:	2b30      	cmp	r3, #48	; 0x30
 80073a6:	d10a      	bne.n	80073be <__cvt+0x86>
 80073a8:	2200      	movs	r2, #0
 80073aa:	2300      	movs	r3, #0
 80073ac:	4620      	mov	r0, r4
 80073ae:	4639      	mov	r1, r7
 80073b0:	f7f9 fafa 	bl	80009a8 <__aeabi_dcmpeq>
 80073b4:	b918      	cbnz	r0, 80073be <__cvt+0x86>
 80073b6:	f1c5 0501 	rsb	r5, r5, #1
 80073ba:	f8ca 5000 	str.w	r5, [sl]
 80073be:	f8da 3000 	ldr.w	r3, [sl]
 80073c2:	4499      	add	r9, r3
 80073c4:	2200      	movs	r2, #0
 80073c6:	2300      	movs	r3, #0
 80073c8:	4620      	mov	r0, r4
 80073ca:	4639      	mov	r1, r7
 80073cc:	f7f9 faec 	bl	80009a8 <__aeabi_dcmpeq>
 80073d0:	b108      	cbz	r0, 80073d6 <__cvt+0x9e>
 80073d2:	f8cd 901c 	str.w	r9, [sp, #28]
 80073d6:	2230      	movs	r2, #48	; 0x30
 80073d8:	9b07      	ldr	r3, [sp, #28]
 80073da:	454b      	cmp	r3, r9
 80073dc:	d307      	bcc.n	80073ee <__cvt+0xb6>
 80073de:	4630      	mov	r0, r6
 80073e0:	9b07      	ldr	r3, [sp, #28]
 80073e2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073e4:	1b9b      	subs	r3, r3, r6
 80073e6:	6013      	str	r3, [r2, #0]
 80073e8:	b008      	add	sp, #32
 80073ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ee:	1c59      	adds	r1, r3, #1
 80073f0:	9107      	str	r1, [sp, #28]
 80073f2:	701a      	strb	r2, [r3, #0]
 80073f4:	e7f0      	b.n	80073d8 <__cvt+0xa0>

080073f6 <__exponent>:
 80073f6:	4603      	mov	r3, r0
 80073f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073fa:	2900      	cmp	r1, #0
 80073fc:	f803 2b02 	strb.w	r2, [r3], #2
 8007400:	bfb6      	itet	lt
 8007402:	222d      	movlt	r2, #45	; 0x2d
 8007404:	222b      	movge	r2, #43	; 0x2b
 8007406:	4249      	neglt	r1, r1
 8007408:	2909      	cmp	r1, #9
 800740a:	7042      	strb	r2, [r0, #1]
 800740c:	dd2b      	ble.n	8007466 <__exponent+0x70>
 800740e:	f10d 0407 	add.w	r4, sp, #7
 8007412:	46a4      	mov	ip, r4
 8007414:	270a      	movs	r7, #10
 8007416:	fb91 f6f7 	sdiv	r6, r1, r7
 800741a:	460a      	mov	r2, r1
 800741c:	46a6      	mov	lr, r4
 800741e:	fb07 1516 	mls	r5, r7, r6, r1
 8007422:	2a63      	cmp	r2, #99	; 0x63
 8007424:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8007428:	4631      	mov	r1, r6
 800742a:	f104 34ff 	add.w	r4, r4, #4294967295
 800742e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007432:	dcf0      	bgt.n	8007416 <__exponent+0x20>
 8007434:	3130      	adds	r1, #48	; 0x30
 8007436:	f1ae 0502 	sub.w	r5, lr, #2
 800743a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800743e:	4629      	mov	r1, r5
 8007440:	1c44      	adds	r4, r0, #1
 8007442:	4561      	cmp	r1, ip
 8007444:	d30a      	bcc.n	800745c <__exponent+0x66>
 8007446:	f10d 0209 	add.w	r2, sp, #9
 800744a:	eba2 020e 	sub.w	r2, r2, lr
 800744e:	4565      	cmp	r5, ip
 8007450:	bf88      	it	hi
 8007452:	2200      	movhi	r2, #0
 8007454:	4413      	add	r3, r2
 8007456:	1a18      	subs	r0, r3, r0
 8007458:	b003      	add	sp, #12
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800745c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007460:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007464:	e7ed      	b.n	8007442 <__exponent+0x4c>
 8007466:	2330      	movs	r3, #48	; 0x30
 8007468:	3130      	adds	r1, #48	; 0x30
 800746a:	7083      	strb	r3, [r0, #2]
 800746c:	70c1      	strb	r1, [r0, #3]
 800746e:	1d03      	adds	r3, r0, #4
 8007470:	e7f1      	b.n	8007456 <__exponent+0x60>
	...

08007474 <_printf_float>:
 8007474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007478:	b091      	sub	sp, #68	; 0x44
 800747a:	460c      	mov	r4, r1
 800747c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007480:	4616      	mov	r6, r2
 8007482:	461f      	mov	r7, r3
 8007484:	4605      	mov	r5, r0
 8007486:	f001 fbe7 	bl	8008c58 <_localeconv_r>
 800748a:	6803      	ldr	r3, [r0, #0]
 800748c:	4618      	mov	r0, r3
 800748e:	9309      	str	r3, [sp, #36]	; 0x24
 8007490:	f7f8 fe5e 	bl	8000150 <strlen>
 8007494:	2300      	movs	r3, #0
 8007496:	930e      	str	r3, [sp, #56]	; 0x38
 8007498:	f8d8 3000 	ldr.w	r3, [r8]
 800749c:	900a      	str	r0, [sp, #40]	; 0x28
 800749e:	3307      	adds	r3, #7
 80074a0:	f023 0307 	bic.w	r3, r3, #7
 80074a4:	f103 0208 	add.w	r2, r3, #8
 80074a8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80074ac:	f8d4 b000 	ldr.w	fp, [r4]
 80074b0:	f8c8 2000 	str.w	r2, [r8]
 80074b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80074bc:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80074c0:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80074c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80074c6:	f04f 32ff 	mov.w	r2, #4294967295
 80074ca:	4640      	mov	r0, r8
 80074cc:	4b9c      	ldr	r3, [pc, #624]	; (8007740 <_printf_float+0x2cc>)
 80074ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074d0:	f7f9 fa9c 	bl	8000a0c <__aeabi_dcmpun>
 80074d4:	bb70      	cbnz	r0, 8007534 <_printf_float+0xc0>
 80074d6:	f04f 32ff 	mov.w	r2, #4294967295
 80074da:	4640      	mov	r0, r8
 80074dc:	4b98      	ldr	r3, [pc, #608]	; (8007740 <_printf_float+0x2cc>)
 80074de:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074e0:	f7f9 fa76 	bl	80009d0 <__aeabi_dcmple>
 80074e4:	bb30      	cbnz	r0, 8007534 <_printf_float+0xc0>
 80074e6:	2200      	movs	r2, #0
 80074e8:	2300      	movs	r3, #0
 80074ea:	4640      	mov	r0, r8
 80074ec:	4651      	mov	r1, sl
 80074ee:	f7f9 fa65 	bl	80009bc <__aeabi_dcmplt>
 80074f2:	b110      	cbz	r0, 80074fa <_printf_float+0x86>
 80074f4:	232d      	movs	r3, #45	; 0x2d
 80074f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074fa:	4b92      	ldr	r3, [pc, #584]	; (8007744 <_printf_float+0x2d0>)
 80074fc:	4892      	ldr	r0, [pc, #584]	; (8007748 <_printf_float+0x2d4>)
 80074fe:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007502:	bf94      	ite	ls
 8007504:	4698      	movls	r8, r3
 8007506:	4680      	movhi	r8, r0
 8007508:	2303      	movs	r3, #3
 800750a:	f04f 0a00 	mov.w	sl, #0
 800750e:	6123      	str	r3, [r4, #16]
 8007510:	f02b 0304 	bic.w	r3, fp, #4
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	4633      	mov	r3, r6
 8007518:	4621      	mov	r1, r4
 800751a:	4628      	mov	r0, r5
 800751c:	9700      	str	r7, [sp, #0]
 800751e:	aa0f      	add	r2, sp, #60	; 0x3c
 8007520:	f000 f9d4 	bl	80078cc <_printf_common>
 8007524:	3001      	adds	r0, #1
 8007526:	f040 8090 	bne.w	800764a <_printf_float+0x1d6>
 800752a:	f04f 30ff 	mov.w	r0, #4294967295
 800752e:	b011      	add	sp, #68	; 0x44
 8007530:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007534:	4642      	mov	r2, r8
 8007536:	4653      	mov	r3, sl
 8007538:	4640      	mov	r0, r8
 800753a:	4651      	mov	r1, sl
 800753c:	f7f9 fa66 	bl	8000a0c <__aeabi_dcmpun>
 8007540:	b148      	cbz	r0, 8007556 <_printf_float+0xe2>
 8007542:	f1ba 0f00 	cmp.w	sl, #0
 8007546:	bfb8      	it	lt
 8007548:	232d      	movlt	r3, #45	; 0x2d
 800754a:	4880      	ldr	r0, [pc, #512]	; (800774c <_printf_float+0x2d8>)
 800754c:	bfb8      	it	lt
 800754e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007552:	4b7f      	ldr	r3, [pc, #508]	; (8007750 <_printf_float+0x2dc>)
 8007554:	e7d3      	b.n	80074fe <_printf_float+0x8a>
 8007556:	6863      	ldr	r3, [r4, #4]
 8007558:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800755c:	1c5a      	adds	r2, r3, #1
 800755e:	d142      	bne.n	80075e6 <_printf_float+0x172>
 8007560:	2306      	movs	r3, #6
 8007562:	6063      	str	r3, [r4, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	9206      	str	r2, [sp, #24]
 8007568:	aa0e      	add	r2, sp, #56	; 0x38
 800756a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800756e:	aa0d      	add	r2, sp, #52	; 0x34
 8007570:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007574:	9203      	str	r2, [sp, #12]
 8007576:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800757a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800757e:	6023      	str	r3, [r4, #0]
 8007580:	6863      	ldr	r3, [r4, #4]
 8007582:	4642      	mov	r2, r8
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	4628      	mov	r0, r5
 8007588:	4653      	mov	r3, sl
 800758a:	910b      	str	r1, [sp, #44]	; 0x2c
 800758c:	f7ff fed4 	bl	8007338 <__cvt>
 8007590:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007592:	4680      	mov	r8, r0
 8007594:	2947      	cmp	r1, #71	; 0x47
 8007596:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007598:	d108      	bne.n	80075ac <_printf_float+0x138>
 800759a:	1cc8      	adds	r0, r1, #3
 800759c:	db02      	blt.n	80075a4 <_printf_float+0x130>
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	4299      	cmp	r1, r3
 80075a2:	dd40      	ble.n	8007626 <_printf_float+0x1b2>
 80075a4:	f1a9 0902 	sub.w	r9, r9, #2
 80075a8:	fa5f f989 	uxtb.w	r9, r9
 80075ac:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80075b0:	d81f      	bhi.n	80075f2 <_printf_float+0x17e>
 80075b2:	464a      	mov	r2, r9
 80075b4:	3901      	subs	r1, #1
 80075b6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80075ba:	910d      	str	r1, [sp, #52]	; 0x34
 80075bc:	f7ff ff1b 	bl	80073f6 <__exponent>
 80075c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80075c2:	4682      	mov	sl, r0
 80075c4:	1813      	adds	r3, r2, r0
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	6123      	str	r3, [r4, #16]
 80075ca:	dc02      	bgt.n	80075d2 <_printf_float+0x15e>
 80075cc:	6822      	ldr	r2, [r4, #0]
 80075ce:	07d2      	lsls	r2, r2, #31
 80075d0:	d501      	bpl.n	80075d6 <_printf_float+0x162>
 80075d2:	3301      	adds	r3, #1
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d09b      	beq.n	8007516 <_printf_float+0xa2>
 80075de:	232d      	movs	r3, #45	; 0x2d
 80075e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e4:	e797      	b.n	8007516 <_printf_float+0xa2>
 80075e6:	2947      	cmp	r1, #71	; 0x47
 80075e8:	d1bc      	bne.n	8007564 <_printf_float+0xf0>
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d1ba      	bne.n	8007564 <_printf_float+0xf0>
 80075ee:	2301      	movs	r3, #1
 80075f0:	e7b7      	b.n	8007562 <_printf_float+0xee>
 80075f2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075f6:	d118      	bne.n	800762a <_printf_float+0x1b6>
 80075f8:	2900      	cmp	r1, #0
 80075fa:	6863      	ldr	r3, [r4, #4]
 80075fc:	dd0b      	ble.n	8007616 <_printf_float+0x1a2>
 80075fe:	6121      	str	r1, [r4, #16]
 8007600:	b913      	cbnz	r3, 8007608 <_printf_float+0x194>
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	07d0      	lsls	r0, r2, #31
 8007606:	d502      	bpl.n	800760e <_printf_float+0x19a>
 8007608:	3301      	adds	r3, #1
 800760a:	440b      	add	r3, r1
 800760c:	6123      	str	r3, [r4, #16]
 800760e:	f04f 0a00 	mov.w	sl, #0
 8007612:	65a1      	str	r1, [r4, #88]	; 0x58
 8007614:	e7df      	b.n	80075d6 <_printf_float+0x162>
 8007616:	b913      	cbnz	r3, 800761e <_printf_float+0x1aa>
 8007618:	6822      	ldr	r2, [r4, #0]
 800761a:	07d2      	lsls	r2, r2, #31
 800761c:	d501      	bpl.n	8007622 <_printf_float+0x1ae>
 800761e:	3302      	adds	r3, #2
 8007620:	e7f4      	b.n	800760c <_printf_float+0x198>
 8007622:	2301      	movs	r3, #1
 8007624:	e7f2      	b.n	800760c <_printf_float+0x198>
 8007626:	f04f 0967 	mov.w	r9, #103	; 0x67
 800762a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800762c:	4299      	cmp	r1, r3
 800762e:	db05      	blt.n	800763c <_printf_float+0x1c8>
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	6121      	str	r1, [r4, #16]
 8007634:	07d8      	lsls	r0, r3, #31
 8007636:	d5ea      	bpl.n	800760e <_printf_float+0x19a>
 8007638:	1c4b      	adds	r3, r1, #1
 800763a:	e7e7      	b.n	800760c <_printf_float+0x198>
 800763c:	2900      	cmp	r1, #0
 800763e:	bfcc      	ite	gt
 8007640:	2201      	movgt	r2, #1
 8007642:	f1c1 0202 	rsble	r2, r1, #2
 8007646:	4413      	add	r3, r2
 8007648:	e7e0      	b.n	800760c <_printf_float+0x198>
 800764a:	6823      	ldr	r3, [r4, #0]
 800764c:	055a      	lsls	r2, r3, #21
 800764e:	d407      	bmi.n	8007660 <_printf_float+0x1ec>
 8007650:	6923      	ldr	r3, [r4, #16]
 8007652:	4642      	mov	r2, r8
 8007654:	4631      	mov	r1, r6
 8007656:	4628      	mov	r0, r5
 8007658:	47b8      	blx	r7
 800765a:	3001      	adds	r0, #1
 800765c:	d12b      	bne.n	80076b6 <_printf_float+0x242>
 800765e:	e764      	b.n	800752a <_printf_float+0xb6>
 8007660:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007664:	f240 80dd 	bls.w	8007822 <_printf_float+0x3ae>
 8007668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 f99a 	bl	80009a8 <__aeabi_dcmpeq>
 8007674:	2800      	cmp	r0, #0
 8007676:	d033      	beq.n	80076e0 <_printf_float+0x26c>
 8007678:	2301      	movs	r3, #1
 800767a:	4631      	mov	r1, r6
 800767c:	4628      	mov	r0, r5
 800767e:	4a35      	ldr	r2, [pc, #212]	; (8007754 <_printf_float+0x2e0>)
 8007680:	47b8      	blx	r7
 8007682:	3001      	adds	r0, #1
 8007684:	f43f af51 	beq.w	800752a <_printf_float+0xb6>
 8007688:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800768c:	429a      	cmp	r2, r3
 800768e:	db02      	blt.n	8007696 <_printf_float+0x222>
 8007690:	6823      	ldr	r3, [r4, #0]
 8007692:	07d8      	lsls	r0, r3, #31
 8007694:	d50f      	bpl.n	80076b6 <_printf_float+0x242>
 8007696:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800769a:	4631      	mov	r1, r6
 800769c:	4628      	mov	r0, r5
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f af42 	beq.w	800752a <_printf_float+0xb6>
 80076a6:	f04f 0800 	mov.w	r8, #0
 80076aa:	f104 091a 	add.w	r9, r4, #26
 80076ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076b0:	3b01      	subs	r3, #1
 80076b2:	4543      	cmp	r3, r8
 80076b4:	dc09      	bgt.n	80076ca <_printf_float+0x256>
 80076b6:	6823      	ldr	r3, [r4, #0]
 80076b8:	079b      	lsls	r3, r3, #30
 80076ba:	f100 8102 	bmi.w	80078c2 <_printf_float+0x44e>
 80076be:	68e0      	ldr	r0, [r4, #12]
 80076c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80076c2:	4298      	cmp	r0, r3
 80076c4:	bfb8      	it	lt
 80076c6:	4618      	movlt	r0, r3
 80076c8:	e731      	b.n	800752e <_printf_float+0xba>
 80076ca:	2301      	movs	r3, #1
 80076cc:	464a      	mov	r2, r9
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	f43f af28 	beq.w	800752a <_printf_float+0xb6>
 80076da:	f108 0801 	add.w	r8, r8, #1
 80076de:	e7e6      	b.n	80076ae <_printf_float+0x23a>
 80076e0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	dc38      	bgt.n	8007758 <_printf_float+0x2e4>
 80076e6:	2301      	movs	r3, #1
 80076e8:	4631      	mov	r1, r6
 80076ea:	4628      	mov	r0, r5
 80076ec:	4a19      	ldr	r2, [pc, #100]	; (8007754 <_printf_float+0x2e0>)
 80076ee:	47b8      	blx	r7
 80076f0:	3001      	adds	r0, #1
 80076f2:	f43f af1a 	beq.w	800752a <_printf_float+0xb6>
 80076f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076fa:	4313      	orrs	r3, r2
 80076fc:	d102      	bne.n	8007704 <_printf_float+0x290>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	07d9      	lsls	r1, r3, #31
 8007702:	d5d8      	bpl.n	80076b6 <_printf_float+0x242>
 8007704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007708:	4631      	mov	r1, r6
 800770a:	4628      	mov	r0, r5
 800770c:	47b8      	blx	r7
 800770e:	3001      	adds	r0, #1
 8007710:	f43f af0b 	beq.w	800752a <_printf_float+0xb6>
 8007714:	f04f 0900 	mov.w	r9, #0
 8007718:	f104 0a1a 	add.w	sl, r4, #26
 800771c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800771e:	425b      	negs	r3, r3
 8007720:	454b      	cmp	r3, r9
 8007722:	dc01      	bgt.n	8007728 <_printf_float+0x2b4>
 8007724:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007726:	e794      	b.n	8007652 <_printf_float+0x1de>
 8007728:	2301      	movs	r3, #1
 800772a:	4652      	mov	r2, sl
 800772c:	4631      	mov	r1, r6
 800772e:	4628      	mov	r0, r5
 8007730:	47b8      	blx	r7
 8007732:	3001      	adds	r0, #1
 8007734:	f43f aef9 	beq.w	800752a <_printf_float+0xb6>
 8007738:	f109 0901 	add.w	r9, r9, #1
 800773c:	e7ee      	b.n	800771c <_printf_float+0x2a8>
 800773e:	bf00      	nop
 8007740:	7fefffff 	.word	0x7fefffff
 8007744:	08009d28 	.word	0x08009d28
 8007748:	08009d2c 	.word	0x08009d2c
 800774c:	08009d34 	.word	0x08009d34
 8007750:	08009d30 	.word	0x08009d30
 8007754:	08009d38 	.word	0x08009d38
 8007758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800775a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800775c:	429a      	cmp	r2, r3
 800775e:	bfa8      	it	ge
 8007760:	461a      	movge	r2, r3
 8007762:	2a00      	cmp	r2, #0
 8007764:	4691      	mov	r9, r2
 8007766:	dc37      	bgt.n	80077d8 <_printf_float+0x364>
 8007768:	f04f 0b00 	mov.w	fp, #0
 800776c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007770:	f104 021a 	add.w	r2, r4, #26
 8007774:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007778:	ebaa 0309 	sub.w	r3, sl, r9
 800777c:	455b      	cmp	r3, fp
 800777e:	dc33      	bgt.n	80077e8 <_printf_float+0x374>
 8007780:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007784:	429a      	cmp	r2, r3
 8007786:	db3b      	blt.n	8007800 <_printf_float+0x38c>
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	07da      	lsls	r2, r3, #31
 800778c:	d438      	bmi.n	8007800 <_printf_float+0x38c>
 800778e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007790:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007792:	eba3 020a 	sub.w	r2, r3, sl
 8007796:	eba3 0901 	sub.w	r9, r3, r1
 800779a:	4591      	cmp	r9, r2
 800779c:	bfa8      	it	ge
 800779e:	4691      	movge	r9, r2
 80077a0:	f1b9 0f00 	cmp.w	r9, #0
 80077a4:	dc34      	bgt.n	8007810 <_printf_float+0x39c>
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ae:	f104 0a1a 	add.w	sl, r4, #26
 80077b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80077b6:	1a9b      	subs	r3, r3, r2
 80077b8:	eba3 0309 	sub.w	r3, r3, r9
 80077bc:	4543      	cmp	r3, r8
 80077be:	f77f af7a 	ble.w	80076b6 <_printf_float+0x242>
 80077c2:	2301      	movs	r3, #1
 80077c4:	4652      	mov	r2, sl
 80077c6:	4631      	mov	r1, r6
 80077c8:	4628      	mov	r0, r5
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	f43f aeac 	beq.w	800752a <_printf_float+0xb6>
 80077d2:	f108 0801 	add.w	r8, r8, #1
 80077d6:	e7ec      	b.n	80077b2 <_printf_float+0x33e>
 80077d8:	4613      	mov	r3, r2
 80077da:	4631      	mov	r1, r6
 80077dc:	4642      	mov	r2, r8
 80077de:	4628      	mov	r0, r5
 80077e0:	47b8      	blx	r7
 80077e2:	3001      	adds	r0, #1
 80077e4:	d1c0      	bne.n	8007768 <_printf_float+0x2f4>
 80077e6:	e6a0      	b.n	800752a <_printf_float+0xb6>
 80077e8:	2301      	movs	r3, #1
 80077ea:	4631      	mov	r1, r6
 80077ec:	4628      	mov	r0, r5
 80077ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80077f0:	47b8      	blx	r7
 80077f2:	3001      	adds	r0, #1
 80077f4:	f43f ae99 	beq.w	800752a <_printf_float+0xb6>
 80077f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077fa:	f10b 0b01 	add.w	fp, fp, #1
 80077fe:	e7b9      	b.n	8007774 <_printf_float+0x300>
 8007800:	4631      	mov	r1, r6
 8007802:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007806:	4628      	mov	r0, r5
 8007808:	47b8      	blx	r7
 800780a:	3001      	adds	r0, #1
 800780c:	d1bf      	bne.n	800778e <_printf_float+0x31a>
 800780e:	e68c      	b.n	800752a <_printf_float+0xb6>
 8007810:	464b      	mov	r3, r9
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	eb08 020a 	add.w	r2, r8, sl
 800781a:	47b8      	blx	r7
 800781c:	3001      	adds	r0, #1
 800781e:	d1c2      	bne.n	80077a6 <_printf_float+0x332>
 8007820:	e683      	b.n	800752a <_printf_float+0xb6>
 8007822:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007824:	2a01      	cmp	r2, #1
 8007826:	dc01      	bgt.n	800782c <_printf_float+0x3b8>
 8007828:	07db      	lsls	r3, r3, #31
 800782a:	d537      	bpl.n	800789c <_printf_float+0x428>
 800782c:	2301      	movs	r3, #1
 800782e:	4642      	mov	r2, r8
 8007830:	4631      	mov	r1, r6
 8007832:	4628      	mov	r0, r5
 8007834:	47b8      	blx	r7
 8007836:	3001      	adds	r0, #1
 8007838:	f43f ae77 	beq.w	800752a <_printf_float+0xb6>
 800783c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007840:	4631      	mov	r1, r6
 8007842:	4628      	mov	r0, r5
 8007844:	47b8      	blx	r7
 8007846:	3001      	adds	r0, #1
 8007848:	f43f ae6f 	beq.w	800752a <_printf_float+0xb6>
 800784c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007850:	2200      	movs	r2, #0
 8007852:	2300      	movs	r3, #0
 8007854:	f7f9 f8a8 	bl	80009a8 <__aeabi_dcmpeq>
 8007858:	b9d8      	cbnz	r0, 8007892 <_printf_float+0x41e>
 800785a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800785c:	f108 0201 	add.w	r2, r8, #1
 8007860:	3b01      	subs	r3, #1
 8007862:	4631      	mov	r1, r6
 8007864:	4628      	mov	r0, r5
 8007866:	47b8      	blx	r7
 8007868:	3001      	adds	r0, #1
 800786a:	d10e      	bne.n	800788a <_printf_float+0x416>
 800786c:	e65d      	b.n	800752a <_printf_float+0xb6>
 800786e:	2301      	movs	r3, #1
 8007870:	464a      	mov	r2, r9
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	f43f ae56 	beq.w	800752a <_printf_float+0xb6>
 800787e:	f108 0801 	add.w	r8, r8, #1
 8007882:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007884:	3b01      	subs	r3, #1
 8007886:	4543      	cmp	r3, r8
 8007888:	dcf1      	bgt.n	800786e <_printf_float+0x3fa>
 800788a:	4653      	mov	r3, sl
 800788c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007890:	e6e0      	b.n	8007654 <_printf_float+0x1e0>
 8007892:	f04f 0800 	mov.w	r8, #0
 8007896:	f104 091a 	add.w	r9, r4, #26
 800789a:	e7f2      	b.n	8007882 <_printf_float+0x40e>
 800789c:	2301      	movs	r3, #1
 800789e:	4642      	mov	r2, r8
 80078a0:	e7df      	b.n	8007862 <_printf_float+0x3ee>
 80078a2:	2301      	movs	r3, #1
 80078a4:	464a      	mov	r2, r9
 80078a6:	4631      	mov	r1, r6
 80078a8:	4628      	mov	r0, r5
 80078aa:	47b8      	blx	r7
 80078ac:	3001      	adds	r0, #1
 80078ae:	f43f ae3c 	beq.w	800752a <_printf_float+0xb6>
 80078b2:	f108 0801 	add.w	r8, r8, #1
 80078b6:	68e3      	ldr	r3, [r4, #12]
 80078b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80078ba:	1a5b      	subs	r3, r3, r1
 80078bc:	4543      	cmp	r3, r8
 80078be:	dcf0      	bgt.n	80078a2 <_printf_float+0x42e>
 80078c0:	e6fd      	b.n	80076be <_printf_float+0x24a>
 80078c2:	f04f 0800 	mov.w	r8, #0
 80078c6:	f104 0919 	add.w	r9, r4, #25
 80078ca:	e7f4      	b.n	80078b6 <_printf_float+0x442>

080078cc <_printf_common>:
 80078cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d0:	4616      	mov	r6, r2
 80078d2:	4699      	mov	r9, r3
 80078d4:	688a      	ldr	r2, [r1, #8]
 80078d6:	690b      	ldr	r3, [r1, #16]
 80078d8:	4607      	mov	r7, r0
 80078da:	4293      	cmp	r3, r2
 80078dc:	bfb8      	it	lt
 80078de:	4613      	movlt	r3, r2
 80078e0:	6033      	str	r3, [r6, #0]
 80078e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80078e6:	460c      	mov	r4, r1
 80078e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80078ec:	b10a      	cbz	r2, 80078f2 <_printf_common+0x26>
 80078ee:	3301      	adds	r3, #1
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	6823      	ldr	r3, [r4, #0]
 80078f4:	0699      	lsls	r1, r3, #26
 80078f6:	bf42      	ittt	mi
 80078f8:	6833      	ldrmi	r3, [r6, #0]
 80078fa:	3302      	addmi	r3, #2
 80078fc:	6033      	strmi	r3, [r6, #0]
 80078fe:	6825      	ldr	r5, [r4, #0]
 8007900:	f015 0506 	ands.w	r5, r5, #6
 8007904:	d106      	bne.n	8007914 <_printf_common+0x48>
 8007906:	f104 0a19 	add.w	sl, r4, #25
 800790a:	68e3      	ldr	r3, [r4, #12]
 800790c:	6832      	ldr	r2, [r6, #0]
 800790e:	1a9b      	subs	r3, r3, r2
 8007910:	42ab      	cmp	r3, r5
 8007912:	dc28      	bgt.n	8007966 <_printf_common+0x9a>
 8007914:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007918:	1e13      	subs	r3, r2, #0
 800791a:	6822      	ldr	r2, [r4, #0]
 800791c:	bf18      	it	ne
 800791e:	2301      	movne	r3, #1
 8007920:	0692      	lsls	r2, r2, #26
 8007922:	d42d      	bmi.n	8007980 <_printf_common+0xb4>
 8007924:	4649      	mov	r1, r9
 8007926:	4638      	mov	r0, r7
 8007928:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800792c:	47c0      	blx	r8
 800792e:	3001      	adds	r0, #1
 8007930:	d020      	beq.n	8007974 <_printf_common+0xa8>
 8007932:	6823      	ldr	r3, [r4, #0]
 8007934:	68e5      	ldr	r5, [r4, #12]
 8007936:	f003 0306 	and.w	r3, r3, #6
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf18      	it	ne
 800793e:	2500      	movne	r5, #0
 8007940:	6832      	ldr	r2, [r6, #0]
 8007942:	f04f 0600 	mov.w	r6, #0
 8007946:	68a3      	ldr	r3, [r4, #8]
 8007948:	bf08      	it	eq
 800794a:	1aad      	subeq	r5, r5, r2
 800794c:	6922      	ldr	r2, [r4, #16]
 800794e:	bf08      	it	eq
 8007950:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007954:	4293      	cmp	r3, r2
 8007956:	bfc4      	itt	gt
 8007958:	1a9b      	subgt	r3, r3, r2
 800795a:	18ed      	addgt	r5, r5, r3
 800795c:	341a      	adds	r4, #26
 800795e:	42b5      	cmp	r5, r6
 8007960:	d11a      	bne.n	8007998 <_printf_common+0xcc>
 8007962:	2000      	movs	r0, #0
 8007964:	e008      	b.n	8007978 <_printf_common+0xac>
 8007966:	2301      	movs	r3, #1
 8007968:	4652      	mov	r2, sl
 800796a:	4649      	mov	r1, r9
 800796c:	4638      	mov	r0, r7
 800796e:	47c0      	blx	r8
 8007970:	3001      	adds	r0, #1
 8007972:	d103      	bne.n	800797c <_printf_common+0xb0>
 8007974:	f04f 30ff 	mov.w	r0, #4294967295
 8007978:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800797c:	3501      	adds	r5, #1
 800797e:	e7c4      	b.n	800790a <_printf_common+0x3e>
 8007980:	2030      	movs	r0, #48	; 0x30
 8007982:	18e1      	adds	r1, r4, r3
 8007984:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007988:	1c5a      	adds	r2, r3, #1
 800798a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800798e:	4422      	add	r2, r4
 8007990:	3302      	adds	r3, #2
 8007992:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007996:	e7c5      	b.n	8007924 <_printf_common+0x58>
 8007998:	2301      	movs	r3, #1
 800799a:	4622      	mov	r2, r4
 800799c:	4649      	mov	r1, r9
 800799e:	4638      	mov	r0, r7
 80079a0:	47c0      	blx	r8
 80079a2:	3001      	adds	r0, #1
 80079a4:	d0e6      	beq.n	8007974 <_printf_common+0xa8>
 80079a6:	3601      	adds	r6, #1
 80079a8:	e7d9      	b.n	800795e <_printf_common+0x92>
	...

080079ac <_printf_i>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	7e0f      	ldrb	r7, [r1, #24]
 80079b2:	4691      	mov	r9, r2
 80079b4:	2f78      	cmp	r7, #120	; 0x78
 80079b6:	4680      	mov	r8, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	469a      	mov	sl, r3
 80079bc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80079be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80079c2:	d807      	bhi.n	80079d4 <_printf_i+0x28>
 80079c4:	2f62      	cmp	r7, #98	; 0x62
 80079c6:	d80a      	bhi.n	80079de <_printf_i+0x32>
 80079c8:	2f00      	cmp	r7, #0
 80079ca:	f000 80d9 	beq.w	8007b80 <_printf_i+0x1d4>
 80079ce:	2f58      	cmp	r7, #88	; 0x58
 80079d0:	f000 80a4 	beq.w	8007b1c <_printf_i+0x170>
 80079d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80079d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80079dc:	e03a      	b.n	8007a54 <_printf_i+0xa8>
 80079de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80079e2:	2b15      	cmp	r3, #21
 80079e4:	d8f6      	bhi.n	80079d4 <_printf_i+0x28>
 80079e6:	a101      	add	r1, pc, #4	; (adr r1, 80079ec <_printf_i+0x40>)
 80079e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80079ec:	08007a45 	.word	0x08007a45
 80079f0:	08007a59 	.word	0x08007a59
 80079f4:	080079d5 	.word	0x080079d5
 80079f8:	080079d5 	.word	0x080079d5
 80079fc:	080079d5 	.word	0x080079d5
 8007a00:	080079d5 	.word	0x080079d5
 8007a04:	08007a59 	.word	0x08007a59
 8007a08:	080079d5 	.word	0x080079d5
 8007a0c:	080079d5 	.word	0x080079d5
 8007a10:	080079d5 	.word	0x080079d5
 8007a14:	080079d5 	.word	0x080079d5
 8007a18:	08007b67 	.word	0x08007b67
 8007a1c:	08007a89 	.word	0x08007a89
 8007a20:	08007b49 	.word	0x08007b49
 8007a24:	080079d5 	.word	0x080079d5
 8007a28:	080079d5 	.word	0x080079d5
 8007a2c:	08007b89 	.word	0x08007b89
 8007a30:	080079d5 	.word	0x080079d5
 8007a34:	08007a89 	.word	0x08007a89
 8007a38:	080079d5 	.word	0x080079d5
 8007a3c:	080079d5 	.word	0x080079d5
 8007a40:	08007b51 	.word	0x08007b51
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	1d1a      	adds	r2, r3, #4
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	602a      	str	r2, [r5, #0]
 8007a4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a54:	2301      	movs	r3, #1
 8007a56:	e0a4      	b.n	8007ba2 <_printf_i+0x1f6>
 8007a58:	6820      	ldr	r0, [r4, #0]
 8007a5a:	6829      	ldr	r1, [r5, #0]
 8007a5c:	0606      	lsls	r6, r0, #24
 8007a5e:	f101 0304 	add.w	r3, r1, #4
 8007a62:	d50a      	bpl.n	8007a7a <_printf_i+0xce>
 8007a64:	680e      	ldr	r6, [r1, #0]
 8007a66:	602b      	str	r3, [r5, #0]
 8007a68:	2e00      	cmp	r6, #0
 8007a6a:	da03      	bge.n	8007a74 <_printf_i+0xc8>
 8007a6c:	232d      	movs	r3, #45	; 0x2d
 8007a6e:	4276      	negs	r6, r6
 8007a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a74:	230a      	movs	r3, #10
 8007a76:	485e      	ldr	r0, [pc, #376]	; (8007bf0 <_printf_i+0x244>)
 8007a78:	e019      	b.n	8007aae <_printf_i+0x102>
 8007a7a:	680e      	ldr	r6, [r1, #0]
 8007a7c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a80:	602b      	str	r3, [r5, #0]
 8007a82:	bf18      	it	ne
 8007a84:	b236      	sxthne	r6, r6
 8007a86:	e7ef      	b.n	8007a68 <_printf_i+0xbc>
 8007a88:	682b      	ldr	r3, [r5, #0]
 8007a8a:	6820      	ldr	r0, [r4, #0]
 8007a8c:	1d19      	adds	r1, r3, #4
 8007a8e:	6029      	str	r1, [r5, #0]
 8007a90:	0601      	lsls	r1, r0, #24
 8007a92:	d501      	bpl.n	8007a98 <_printf_i+0xec>
 8007a94:	681e      	ldr	r6, [r3, #0]
 8007a96:	e002      	b.n	8007a9e <_printf_i+0xf2>
 8007a98:	0646      	lsls	r6, r0, #25
 8007a9a:	d5fb      	bpl.n	8007a94 <_printf_i+0xe8>
 8007a9c:	881e      	ldrh	r6, [r3, #0]
 8007a9e:	2f6f      	cmp	r7, #111	; 0x6f
 8007aa0:	bf0c      	ite	eq
 8007aa2:	2308      	moveq	r3, #8
 8007aa4:	230a      	movne	r3, #10
 8007aa6:	4852      	ldr	r0, [pc, #328]	; (8007bf0 <_printf_i+0x244>)
 8007aa8:	2100      	movs	r1, #0
 8007aaa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007aae:	6865      	ldr	r5, [r4, #4]
 8007ab0:	2d00      	cmp	r5, #0
 8007ab2:	bfa8      	it	ge
 8007ab4:	6821      	ldrge	r1, [r4, #0]
 8007ab6:	60a5      	str	r5, [r4, #8]
 8007ab8:	bfa4      	itt	ge
 8007aba:	f021 0104 	bicge.w	r1, r1, #4
 8007abe:	6021      	strge	r1, [r4, #0]
 8007ac0:	b90e      	cbnz	r6, 8007ac6 <_printf_i+0x11a>
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	d04d      	beq.n	8007b62 <_printf_i+0x1b6>
 8007ac6:	4615      	mov	r5, r2
 8007ac8:	fbb6 f1f3 	udiv	r1, r6, r3
 8007acc:	fb03 6711 	mls	r7, r3, r1, r6
 8007ad0:	5dc7      	ldrb	r7, [r0, r7]
 8007ad2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ad6:	4637      	mov	r7, r6
 8007ad8:	42bb      	cmp	r3, r7
 8007ada:	460e      	mov	r6, r1
 8007adc:	d9f4      	bls.n	8007ac8 <_printf_i+0x11c>
 8007ade:	2b08      	cmp	r3, #8
 8007ae0:	d10b      	bne.n	8007afa <_printf_i+0x14e>
 8007ae2:	6823      	ldr	r3, [r4, #0]
 8007ae4:	07de      	lsls	r6, r3, #31
 8007ae6:	d508      	bpl.n	8007afa <_printf_i+0x14e>
 8007ae8:	6923      	ldr	r3, [r4, #16]
 8007aea:	6861      	ldr	r1, [r4, #4]
 8007aec:	4299      	cmp	r1, r3
 8007aee:	bfde      	ittt	le
 8007af0:	2330      	movle	r3, #48	; 0x30
 8007af2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007af6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007afa:	1b52      	subs	r2, r2, r5
 8007afc:	6122      	str	r2, [r4, #16]
 8007afe:	464b      	mov	r3, r9
 8007b00:	4621      	mov	r1, r4
 8007b02:	4640      	mov	r0, r8
 8007b04:	f8cd a000 	str.w	sl, [sp]
 8007b08:	aa03      	add	r2, sp, #12
 8007b0a:	f7ff fedf 	bl	80078cc <_printf_common>
 8007b0e:	3001      	adds	r0, #1
 8007b10:	d14c      	bne.n	8007bac <_printf_i+0x200>
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	b004      	add	sp, #16
 8007b18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b1c:	4834      	ldr	r0, [pc, #208]	; (8007bf0 <_printf_i+0x244>)
 8007b1e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007b22:	6829      	ldr	r1, [r5, #0]
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	f851 6b04 	ldr.w	r6, [r1], #4
 8007b2a:	6029      	str	r1, [r5, #0]
 8007b2c:	061d      	lsls	r5, r3, #24
 8007b2e:	d514      	bpl.n	8007b5a <_printf_i+0x1ae>
 8007b30:	07df      	lsls	r7, r3, #31
 8007b32:	bf44      	itt	mi
 8007b34:	f043 0320 	orrmi.w	r3, r3, #32
 8007b38:	6023      	strmi	r3, [r4, #0]
 8007b3a:	b91e      	cbnz	r6, 8007b44 <_printf_i+0x198>
 8007b3c:	6823      	ldr	r3, [r4, #0]
 8007b3e:	f023 0320 	bic.w	r3, r3, #32
 8007b42:	6023      	str	r3, [r4, #0]
 8007b44:	2310      	movs	r3, #16
 8007b46:	e7af      	b.n	8007aa8 <_printf_i+0xfc>
 8007b48:	6823      	ldr	r3, [r4, #0]
 8007b4a:	f043 0320 	orr.w	r3, r3, #32
 8007b4e:	6023      	str	r3, [r4, #0]
 8007b50:	2378      	movs	r3, #120	; 0x78
 8007b52:	4828      	ldr	r0, [pc, #160]	; (8007bf4 <_printf_i+0x248>)
 8007b54:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b58:	e7e3      	b.n	8007b22 <_printf_i+0x176>
 8007b5a:	0659      	lsls	r1, r3, #25
 8007b5c:	bf48      	it	mi
 8007b5e:	b2b6      	uxthmi	r6, r6
 8007b60:	e7e6      	b.n	8007b30 <_printf_i+0x184>
 8007b62:	4615      	mov	r5, r2
 8007b64:	e7bb      	b.n	8007ade <_printf_i+0x132>
 8007b66:	682b      	ldr	r3, [r5, #0]
 8007b68:	6826      	ldr	r6, [r4, #0]
 8007b6a:	1d18      	adds	r0, r3, #4
 8007b6c:	6961      	ldr	r1, [r4, #20]
 8007b6e:	6028      	str	r0, [r5, #0]
 8007b70:	0635      	lsls	r5, r6, #24
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	d501      	bpl.n	8007b7a <_printf_i+0x1ce>
 8007b76:	6019      	str	r1, [r3, #0]
 8007b78:	e002      	b.n	8007b80 <_printf_i+0x1d4>
 8007b7a:	0670      	lsls	r0, r6, #25
 8007b7c:	d5fb      	bpl.n	8007b76 <_printf_i+0x1ca>
 8007b7e:	8019      	strh	r1, [r3, #0]
 8007b80:	2300      	movs	r3, #0
 8007b82:	4615      	mov	r5, r2
 8007b84:	6123      	str	r3, [r4, #16]
 8007b86:	e7ba      	b.n	8007afe <_printf_i+0x152>
 8007b88:	682b      	ldr	r3, [r5, #0]
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	1d1a      	adds	r2, r3, #4
 8007b8e:	602a      	str	r2, [r5, #0]
 8007b90:	681d      	ldr	r5, [r3, #0]
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	4628      	mov	r0, r5
 8007b96:	f001 f87d 	bl	8008c94 <memchr>
 8007b9a:	b108      	cbz	r0, 8007ba0 <_printf_i+0x1f4>
 8007b9c:	1b40      	subs	r0, r0, r5
 8007b9e:	6060      	str	r0, [r4, #4]
 8007ba0:	6863      	ldr	r3, [r4, #4]
 8007ba2:	6123      	str	r3, [r4, #16]
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007baa:	e7a8      	b.n	8007afe <_printf_i+0x152>
 8007bac:	462a      	mov	r2, r5
 8007bae:	4649      	mov	r1, r9
 8007bb0:	4640      	mov	r0, r8
 8007bb2:	6923      	ldr	r3, [r4, #16]
 8007bb4:	47d0      	blx	sl
 8007bb6:	3001      	adds	r0, #1
 8007bb8:	d0ab      	beq.n	8007b12 <_printf_i+0x166>
 8007bba:	6823      	ldr	r3, [r4, #0]
 8007bbc:	079b      	lsls	r3, r3, #30
 8007bbe:	d413      	bmi.n	8007be8 <_printf_i+0x23c>
 8007bc0:	68e0      	ldr	r0, [r4, #12]
 8007bc2:	9b03      	ldr	r3, [sp, #12]
 8007bc4:	4298      	cmp	r0, r3
 8007bc6:	bfb8      	it	lt
 8007bc8:	4618      	movlt	r0, r3
 8007bca:	e7a4      	b.n	8007b16 <_printf_i+0x16a>
 8007bcc:	2301      	movs	r3, #1
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4649      	mov	r1, r9
 8007bd2:	4640      	mov	r0, r8
 8007bd4:	47d0      	blx	sl
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d09b      	beq.n	8007b12 <_printf_i+0x166>
 8007bda:	3501      	adds	r5, #1
 8007bdc:	68e3      	ldr	r3, [r4, #12]
 8007bde:	9903      	ldr	r1, [sp, #12]
 8007be0:	1a5b      	subs	r3, r3, r1
 8007be2:	42ab      	cmp	r3, r5
 8007be4:	dcf2      	bgt.n	8007bcc <_printf_i+0x220>
 8007be6:	e7eb      	b.n	8007bc0 <_printf_i+0x214>
 8007be8:	2500      	movs	r5, #0
 8007bea:	f104 0619 	add.w	r6, r4, #25
 8007bee:	e7f5      	b.n	8007bdc <_printf_i+0x230>
 8007bf0:	08009d3a 	.word	0x08009d3a
 8007bf4:	08009d4b 	.word	0x08009d4b

08007bf8 <iprintf>:
 8007bf8:	b40f      	push	{r0, r1, r2, r3}
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <iprintf+0x2c>)
 8007bfc:	b513      	push	{r0, r1, r4, lr}
 8007bfe:	681c      	ldr	r4, [r3, #0]
 8007c00:	b124      	cbz	r4, 8007c0c <iprintf+0x14>
 8007c02:	69a3      	ldr	r3, [r4, #24]
 8007c04:	b913      	cbnz	r3, 8007c0c <iprintf+0x14>
 8007c06:	4620      	mov	r0, r4
 8007c08:	f7ff fa26 	bl	8007058 <__sinit>
 8007c0c:	ab05      	add	r3, sp, #20
 8007c0e:	4620      	mov	r0, r4
 8007c10:	9a04      	ldr	r2, [sp, #16]
 8007c12:	68a1      	ldr	r1, [r4, #8]
 8007c14:	9301      	str	r3, [sp, #4]
 8007c16:	f001 fc5d 	bl	80094d4 <_vfiprintf_r>
 8007c1a:	b002      	add	sp, #8
 8007c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c20:	b004      	add	sp, #16
 8007c22:	4770      	bx	lr
 8007c24:	20000010 	.word	0x20000010

08007c28 <cleanup_glue>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	6809      	ldr	r1, [r1, #0]
 8007c2e:	4605      	mov	r5, r0
 8007c30:	b109      	cbz	r1, 8007c36 <cleanup_glue+0xe>
 8007c32:	f7ff fff9 	bl	8007c28 <cleanup_glue>
 8007c36:	4621      	mov	r1, r4
 8007c38:	4628      	mov	r0, r5
 8007c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c3e:	f001 bbd9 	b.w	80093f4 <_free_r>
	...

08007c44 <_reclaim_reent>:
 8007c44:	4b2c      	ldr	r3, [pc, #176]	; (8007cf8 <_reclaim_reent+0xb4>)
 8007c46:	b570      	push	{r4, r5, r6, lr}
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4283      	cmp	r3, r0
 8007c4e:	d051      	beq.n	8007cf4 <_reclaim_reent+0xb0>
 8007c50:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007c52:	b143      	cbz	r3, 8007c66 <_reclaim_reent+0x22>
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d14a      	bne.n	8007cf0 <_reclaim_reent+0xac>
 8007c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c5c:	6819      	ldr	r1, [r3, #0]
 8007c5e:	b111      	cbz	r1, 8007c66 <_reclaim_reent+0x22>
 8007c60:	4620      	mov	r0, r4
 8007c62:	f001 fbc7 	bl	80093f4 <_free_r>
 8007c66:	6961      	ldr	r1, [r4, #20]
 8007c68:	b111      	cbz	r1, 8007c70 <_reclaim_reent+0x2c>
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f001 fbc2 	bl	80093f4 <_free_r>
 8007c70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007c72:	b111      	cbz	r1, 8007c7a <_reclaim_reent+0x36>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f001 fbbd 	bl	80093f4 <_free_r>
 8007c7a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c7c:	b111      	cbz	r1, 8007c84 <_reclaim_reent+0x40>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f001 fbb8 	bl	80093f4 <_free_r>
 8007c84:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c86:	b111      	cbz	r1, 8007c8e <_reclaim_reent+0x4a>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f001 fbb3 	bl	80093f4 <_free_r>
 8007c8e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c90:	b111      	cbz	r1, 8007c98 <_reclaim_reent+0x54>
 8007c92:	4620      	mov	r0, r4
 8007c94:	f001 fbae 	bl	80093f4 <_free_r>
 8007c98:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c9a:	b111      	cbz	r1, 8007ca2 <_reclaim_reent+0x5e>
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f001 fba9 	bl	80093f4 <_free_r>
 8007ca2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007ca4:	b111      	cbz	r1, 8007cac <_reclaim_reent+0x68>
 8007ca6:	4620      	mov	r0, r4
 8007ca8:	f001 fba4 	bl	80093f4 <_free_r>
 8007cac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007cae:	b111      	cbz	r1, 8007cb6 <_reclaim_reent+0x72>
 8007cb0:	4620      	mov	r0, r4
 8007cb2:	f001 fb9f 	bl	80093f4 <_free_r>
 8007cb6:	69a3      	ldr	r3, [r4, #24]
 8007cb8:	b1e3      	cbz	r3, 8007cf4 <_reclaim_reent+0xb0>
 8007cba:	4620      	mov	r0, r4
 8007cbc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007cbe:	4798      	blx	r3
 8007cc0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007cc2:	b1b9      	cbz	r1, 8007cf4 <_reclaim_reent+0xb0>
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007cca:	f7ff bfad 	b.w	8007c28 <cleanup_glue>
 8007cce:	5949      	ldr	r1, [r1, r5]
 8007cd0:	b941      	cbnz	r1, 8007ce4 <_reclaim_reent+0xa0>
 8007cd2:	3504      	adds	r5, #4
 8007cd4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cd6:	2d80      	cmp	r5, #128	; 0x80
 8007cd8:	68d9      	ldr	r1, [r3, #12]
 8007cda:	d1f8      	bne.n	8007cce <_reclaim_reent+0x8a>
 8007cdc:	4620      	mov	r0, r4
 8007cde:	f001 fb89 	bl	80093f4 <_free_r>
 8007ce2:	e7ba      	b.n	8007c5a <_reclaim_reent+0x16>
 8007ce4:	680e      	ldr	r6, [r1, #0]
 8007ce6:	4620      	mov	r0, r4
 8007ce8:	f001 fb84 	bl	80093f4 <_free_r>
 8007cec:	4631      	mov	r1, r6
 8007cee:	e7ef      	b.n	8007cd0 <_reclaim_reent+0x8c>
 8007cf0:	2500      	movs	r5, #0
 8007cf2:	e7ef      	b.n	8007cd4 <_reclaim_reent+0x90>
 8007cf4:	bd70      	pop	{r4, r5, r6, pc}
 8007cf6:	bf00      	nop
 8007cf8:	20000010 	.word	0x20000010

08007cfc <_sbrk_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4d05      	ldr	r5, [pc, #20]	; (8007d18 <_sbrk_r+0x1c>)
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	602b      	str	r3, [r5, #0]
 8007d08:	f7f9 fdaa 	bl	8001860 <_sbrk>
 8007d0c:	1c43      	adds	r3, r0, #1
 8007d0e:	d102      	bne.n	8007d16 <_sbrk_r+0x1a>
 8007d10:	682b      	ldr	r3, [r5, #0]
 8007d12:	b103      	cbz	r3, 8007d16 <_sbrk_r+0x1a>
 8007d14:	6023      	str	r3, [r4, #0]
 8007d16:	bd38      	pop	{r3, r4, r5, pc}
 8007d18:	20001d4c 	.word	0x20001d4c

08007d1c <__sread>:
 8007d1c:	b510      	push	{r4, lr}
 8007d1e:	460c      	mov	r4, r1
 8007d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d24:	f001 fd06 	bl	8009734 <_read_r>
 8007d28:	2800      	cmp	r0, #0
 8007d2a:	bfab      	itete	ge
 8007d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8007d30:	181b      	addge	r3, r3, r0
 8007d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d36:	bfac      	ite	ge
 8007d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d3a:	81a3      	strhlt	r3, [r4, #12]
 8007d3c:	bd10      	pop	{r4, pc}

08007d3e <__swrite>:
 8007d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d42:	461f      	mov	r7, r3
 8007d44:	898b      	ldrh	r3, [r1, #12]
 8007d46:	4605      	mov	r5, r0
 8007d48:	05db      	lsls	r3, r3, #23
 8007d4a:	460c      	mov	r4, r1
 8007d4c:	4616      	mov	r6, r2
 8007d4e:	d505      	bpl.n	8007d5c <__swrite+0x1e>
 8007d50:	2302      	movs	r3, #2
 8007d52:	2200      	movs	r2, #0
 8007d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d58:	f000 ff82 	bl	8008c60 <_lseek_r>
 8007d5c:	89a3      	ldrh	r3, [r4, #12]
 8007d5e:	4632      	mov	r2, r6
 8007d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d64:	81a3      	strh	r3, [r4, #12]
 8007d66:	4628      	mov	r0, r5
 8007d68:	463b      	mov	r3, r7
 8007d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d72:	f000 b817 	b.w	8007da4 <_write_r>

08007d76 <__sseek>:
 8007d76:	b510      	push	{r4, lr}
 8007d78:	460c      	mov	r4, r1
 8007d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7e:	f000 ff6f 	bl	8008c60 <_lseek_r>
 8007d82:	1c43      	adds	r3, r0, #1
 8007d84:	89a3      	ldrh	r3, [r4, #12]
 8007d86:	bf15      	itete	ne
 8007d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d92:	81a3      	strheq	r3, [r4, #12]
 8007d94:	bf18      	it	ne
 8007d96:	81a3      	strhne	r3, [r4, #12]
 8007d98:	bd10      	pop	{r4, pc}

08007d9a <__sclose>:
 8007d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d9e:	f000 b813 	b.w	8007dc8 <_close_r>
	...

08007da4 <_write_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4604      	mov	r4, r0
 8007da8:	4608      	mov	r0, r1
 8007daa:	4611      	mov	r1, r2
 8007dac:	2200      	movs	r2, #0
 8007dae:	4d05      	ldr	r5, [pc, #20]	; (8007dc4 <_write_r+0x20>)
 8007db0:	602a      	str	r2, [r5, #0]
 8007db2:	461a      	mov	r2, r3
 8007db4:	f7f9 fd08 	bl	80017c8 <_write>
 8007db8:	1c43      	adds	r3, r0, #1
 8007dba:	d102      	bne.n	8007dc2 <_write_r+0x1e>
 8007dbc:	682b      	ldr	r3, [r5, #0]
 8007dbe:	b103      	cbz	r3, 8007dc2 <_write_r+0x1e>
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	bd38      	pop	{r3, r4, r5, pc}
 8007dc4:	20001d4c 	.word	0x20001d4c

08007dc8 <_close_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	2300      	movs	r3, #0
 8007dcc:	4d05      	ldr	r5, [pc, #20]	; (8007de4 <_close_r+0x1c>)
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7f9 fd14 	bl	8001800 <_close>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_close_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_close_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	20001d4c 	.word	0x20001d4c

08007de8 <quorem>:
 8007de8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dec:	6903      	ldr	r3, [r0, #16]
 8007dee:	690c      	ldr	r4, [r1, #16]
 8007df0:	4607      	mov	r7, r0
 8007df2:	42a3      	cmp	r3, r4
 8007df4:	f2c0 8082 	blt.w	8007efc <quorem+0x114>
 8007df8:	3c01      	subs	r4, #1
 8007dfa:	f100 0514 	add.w	r5, r0, #20
 8007dfe:	f101 0814 	add.w	r8, r1, #20
 8007e02:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e06:	9301      	str	r3, [sp, #4]
 8007e08:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007e0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e10:	3301      	adds	r3, #1
 8007e12:	429a      	cmp	r2, r3
 8007e14:	fbb2 f6f3 	udiv	r6, r2, r3
 8007e18:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007e1c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007e20:	d331      	bcc.n	8007e86 <quorem+0x9e>
 8007e22:	f04f 0e00 	mov.w	lr, #0
 8007e26:	4640      	mov	r0, r8
 8007e28:	46ac      	mov	ip, r5
 8007e2a:	46f2      	mov	sl, lr
 8007e2c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007e30:	b293      	uxth	r3, r2
 8007e32:	fb06 e303 	mla	r3, r6, r3, lr
 8007e36:	0c12      	lsrs	r2, r2, #16
 8007e38:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007e3c:	b29b      	uxth	r3, r3
 8007e3e:	fb06 e202 	mla	r2, r6, r2, lr
 8007e42:	ebaa 0303 	sub.w	r3, sl, r3
 8007e46:	f8dc a000 	ldr.w	sl, [ip]
 8007e4a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007e4e:	fa1f fa8a 	uxth.w	sl, sl
 8007e52:	4453      	add	r3, sl
 8007e54:	f8dc a000 	ldr.w	sl, [ip]
 8007e58:	b292      	uxth	r2, r2
 8007e5a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007e5e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e62:	b29b      	uxth	r3, r3
 8007e64:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e68:	4581      	cmp	r9, r0
 8007e6a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007e6e:	f84c 3b04 	str.w	r3, [ip], #4
 8007e72:	d2db      	bcs.n	8007e2c <quorem+0x44>
 8007e74:	f855 300b 	ldr.w	r3, [r5, fp]
 8007e78:	b92b      	cbnz	r3, 8007e86 <quorem+0x9e>
 8007e7a:	9b01      	ldr	r3, [sp, #4]
 8007e7c:	3b04      	subs	r3, #4
 8007e7e:	429d      	cmp	r5, r3
 8007e80:	461a      	mov	r2, r3
 8007e82:	d32f      	bcc.n	8007ee4 <quorem+0xfc>
 8007e84:	613c      	str	r4, [r7, #16]
 8007e86:	4638      	mov	r0, r7
 8007e88:	f001 f99c 	bl	80091c4 <__mcmp>
 8007e8c:	2800      	cmp	r0, #0
 8007e8e:	db25      	blt.n	8007edc <quorem+0xf4>
 8007e90:	4628      	mov	r0, r5
 8007e92:	f04f 0c00 	mov.w	ip, #0
 8007e96:	3601      	adds	r6, #1
 8007e98:	f858 1b04 	ldr.w	r1, [r8], #4
 8007e9c:	f8d0 e000 	ldr.w	lr, [r0]
 8007ea0:	b28b      	uxth	r3, r1
 8007ea2:	ebac 0303 	sub.w	r3, ip, r3
 8007ea6:	fa1f f28e 	uxth.w	r2, lr
 8007eaa:	4413      	add	r3, r2
 8007eac:	0c0a      	lsrs	r2, r1, #16
 8007eae:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007eb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007ebc:	45c1      	cmp	r9, r8
 8007ebe:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ec2:	f840 3b04 	str.w	r3, [r0], #4
 8007ec6:	d2e7      	bcs.n	8007e98 <quorem+0xb0>
 8007ec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007ecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007ed0:	b922      	cbnz	r2, 8007edc <quorem+0xf4>
 8007ed2:	3b04      	subs	r3, #4
 8007ed4:	429d      	cmp	r5, r3
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	d30a      	bcc.n	8007ef0 <quorem+0x108>
 8007eda:	613c      	str	r4, [r7, #16]
 8007edc:	4630      	mov	r0, r6
 8007ede:	b003      	add	sp, #12
 8007ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ee4:	6812      	ldr	r2, [r2, #0]
 8007ee6:	3b04      	subs	r3, #4
 8007ee8:	2a00      	cmp	r2, #0
 8007eea:	d1cb      	bne.n	8007e84 <quorem+0x9c>
 8007eec:	3c01      	subs	r4, #1
 8007eee:	e7c6      	b.n	8007e7e <quorem+0x96>
 8007ef0:	6812      	ldr	r2, [r2, #0]
 8007ef2:	3b04      	subs	r3, #4
 8007ef4:	2a00      	cmp	r2, #0
 8007ef6:	d1f0      	bne.n	8007eda <quorem+0xf2>
 8007ef8:	3c01      	subs	r4, #1
 8007efa:	e7eb      	b.n	8007ed4 <quorem+0xec>
 8007efc:	2000      	movs	r0, #0
 8007efe:	e7ee      	b.n	8007ede <quorem+0xf6>

08007f00 <_dtoa_r>:
 8007f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f04:	4616      	mov	r6, r2
 8007f06:	461f      	mov	r7, r3
 8007f08:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007f0a:	b099      	sub	sp, #100	; 0x64
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007f12:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007f16:	b974      	cbnz	r4, 8007f36 <_dtoa_r+0x36>
 8007f18:	2010      	movs	r0, #16
 8007f1a:	f000 feb3 	bl	8008c84 <malloc>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	6268      	str	r0, [r5, #36]	; 0x24
 8007f22:	b920      	cbnz	r0, 8007f2e <_dtoa_r+0x2e>
 8007f24:	21ea      	movs	r1, #234	; 0xea
 8007f26:	4ba8      	ldr	r3, [pc, #672]	; (80081c8 <_dtoa_r+0x2c8>)
 8007f28:	48a8      	ldr	r0, [pc, #672]	; (80081cc <_dtoa_r+0x2cc>)
 8007f2a:	f001 fcd5 	bl	80098d8 <__assert_func>
 8007f2e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007f32:	6004      	str	r4, [r0, #0]
 8007f34:	60c4      	str	r4, [r0, #12]
 8007f36:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f38:	6819      	ldr	r1, [r3, #0]
 8007f3a:	b151      	cbz	r1, 8007f52 <_dtoa_r+0x52>
 8007f3c:	685a      	ldr	r2, [r3, #4]
 8007f3e:	2301      	movs	r3, #1
 8007f40:	4093      	lsls	r3, r2
 8007f42:	604a      	str	r2, [r1, #4]
 8007f44:	608b      	str	r3, [r1, #8]
 8007f46:	4628      	mov	r0, r5
 8007f48:	f000 fefe 	bl	8008d48 <_Bfree>
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007f50:	601a      	str	r2, [r3, #0]
 8007f52:	1e3b      	subs	r3, r7, #0
 8007f54:	bfaf      	iteee	ge
 8007f56:	2300      	movge	r3, #0
 8007f58:	2201      	movlt	r2, #1
 8007f5a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007f5e:	9305      	strlt	r3, [sp, #20]
 8007f60:	bfa8      	it	ge
 8007f62:	f8c8 3000 	strge.w	r3, [r8]
 8007f66:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007f6a:	4b99      	ldr	r3, [pc, #612]	; (80081d0 <_dtoa_r+0x2d0>)
 8007f6c:	bfb8      	it	lt
 8007f6e:	f8c8 2000 	strlt.w	r2, [r8]
 8007f72:	ea33 0309 	bics.w	r3, r3, r9
 8007f76:	d119      	bne.n	8007fac <_dtoa_r+0xac>
 8007f78:	f242 730f 	movw	r3, #9999	; 0x270f
 8007f7c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f7e:	6013      	str	r3, [r2, #0]
 8007f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f84:	4333      	orrs	r3, r6
 8007f86:	f000 857f 	beq.w	8008a88 <_dtoa_r+0xb88>
 8007f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f8c:	b953      	cbnz	r3, 8007fa4 <_dtoa_r+0xa4>
 8007f8e:	4b91      	ldr	r3, [pc, #580]	; (80081d4 <_dtoa_r+0x2d4>)
 8007f90:	e022      	b.n	8007fd8 <_dtoa_r+0xd8>
 8007f92:	4b91      	ldr	r3, [pc, #580]	; (80081d8 <_dtoa_r+0x2d8>)
 8007f94:	9303      	str	r3, [sp, #12]
 8007f96:	3308      	adds	r3, #8
 8007f98:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f9a:	6013      	str	r3, [r2, #0]
 8007f9c:	9803      	ldr	r0, [sp, #12]
 8007f9e:	b019      	add	sp, #100	; 0x64
 8007fa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fa4:	4b8b      	ldr	r3, [pc, #556]	; (80081d4 <_dtoa_r+0x2d4>)
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	3303      	adds	r3, #3
 8007faa:	e7f5      	b.n	8007f98 <_dtoa_r+0x98>
 8007fac:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007fb0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007fb4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007fb8:	2200      	movs	r2, #0
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f7f8 fcf4 	bl	80009a8 <__aeabi_dcmpeq>
 8007fc0:	4680      	mov	r8, r0
 8007fc2:	b158      	cbz	r0, 8007fdc <_dtoa_r+0xdc>
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007fc8:	6013      	str	r3, [r2, #0]
 8007fca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	f000 8558 	beq.w	8008a82 <_dtoa_r+0xb82>
 8007fd2:	4882      	ldr	r0, [pc, #520]	; (80081dc <_dtoa_r+0x2dc>)
 8007fd4:	6018      	str	r0, [r3, #0]
 8007fd6:	1e43      	subs	r3, r0, #1
 8007fd8:	9303      	str	r3, [sp, #12]
 8007fda:	e7df      	b.n	8007f9c <_dtoa_r+0x9c>
 8007fdc:	ab16      	add	r3, sp, #88	; 0x58
 8007fde:	9301      	str	r3, [sp, #4]
 8007fe0:	ab17      	add	r3, sp, #92	; 0x5c
 8007fe2:	9300      	str	r3, [sp, #0]
 8007fe4:	4628      	mov	r0, r5
 8007fe6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007fea:	f001 f993 	bl	8009314 <__d2b>
 8007fee:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007ff2:	4683      	mov	fp, r0
 8007ff4:	2c00      	cmp	r4, #0
 8007ff6:	d07f      	beq.n	80080f8 <_dtoa_r+0x1f8>
 8007ff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ffc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ffe:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008002:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008006:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800800a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800800e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008012:	2200      	movs	r2, #0
 8008014:	4b72      	ldr	r3, [pc, #456]	; (80081e0 <_dtoa_r+0x2e0>)
 8008016:	f7f8 f8a7 	bl	8000168 <__aeabi_dsub>
 800801a:	a365      	add	r3, pc, #404	; (adr r3, 80081b0 <_dtoa_r+0x2b0>)
 800801c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008020:	f7f8 fa5a 	bl	80004d8 <__aeabi_dmul>
 8008024:	a364      	add	r3, pc, #400	; (adr r3, 80081b8 <_dtoa_r+0x2b8>)
 8008026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802a:	f7f8 f89f 	bl	800016c <__adddf3>
 800802e:	4606      	mov	r6, r0
 8008030:	4620      	mov	r0, r4
 8008032:	460f      	mov	r7, r1
 8008034:	f7f8 f9e6 	bl	8000404 <__aeabi_i2d>
 8008038:	a361      	add	r3, pc, #388	; (adr r3, 80081c0 <_dtoa_r+0x2c0>)
 800803a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800803e:	f7f8 fa4b 	bl	80004d8 <__aeabi_dmul>
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	4630      	mov	r0, r6
 8008048:	4639      	mov	r1, r7
 800804a:	f7f8 f88f 	bl	800016c <__adddf3>
 800804e:	4606      	mov	r6, r0
 8008050:	460f      	mov	r7, r1
 8008052:	f7f8 fcf1 	bl	8000a38 <__aeabi_d2iz>
 8008056:	2200      	movs	r2, #0
 8008058:	4682      	mov	sl, r0
 800805a:	2300      	movs	r3, #0
 800805c:	4630      	mov	r0, r6
 800805e:	4639      	mov	r1, r7
 8008060:	f7f8 fcac 	bl	80009bc <__aeabi_dcmplt>
 8008064:	b148      	cbz	r0, 800807a <_dtoa_r+0x17a>
 8008066:	4650      	mov	r0, sl
 8008068:	f7f8 f9cc 	bl	8000404 <__aeabi_i2d>
 800806c:	4632      	mov	r2, r6
 800806e:	463b      	mov	r3, r7
 8008070:	f7f8 fc9a 	bl	80009a8 <__aeabi_dcmpeq>
 8008074:	b908      	cbnz	r0, 800807a <_dtoa_r+0x17a>
 8008076:	f10a 3aff 	add.w	sl, sl, #4294967295
 800807a:	f1ba 0f16 	cmp.w	sl, #22
 800807e:	d858      	bhi.n	8008132 <_dtoa_r+0x232>
 8008080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008084:	4b57      	ldr	r3, [pc, #348]	; (80081e4 <_dtoa_r+0x2e4>)
 8008086:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800808a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800808e:	f7f8 fc95 	bl	80009bc <__aeabi_dcmplt>
 8008092:	2800      	cmp	r0, #0
 8008094:	d04f      	beq.n	8008136 <_dtoa_r+0x236>
 8008096:	2300      	movs	r3, #0
 8008098:	f10a 3aff 	add.w	sl, sl, #4294967295
 800809c:	930f      	str	r3, [sp, #60]	; 0x3c
 800809e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80080a0:	1b1c      	subs	r4, r3, r4
 80080a2:	1e63      	subs	r3, r4, #1
 80080a4:	9309      	str	r3, [sp, #36]	; 0x24
 80080a6:	bf49      	itett	mi
 80080a8:	f1c4 0301 	rsbmi	r3, r4, #1
 80080ac:	2300      	movpl	r3, #0
 80080ae:	9306      	strmi	r3, [sp, #24]
 80080b0:	2300      	movmi	r3, #0
 80080b2:	bf54      	ite	pl
 80080b4:	9306      	strpl	r3, [sp, #24]
 80080b6:	9309      	strmi	r3, [sp, #36]	; 0x24
 80080b8:	f1ba 0f00 	cmp.w	sl, #0
 80080bc:	db3d      	blt.n	800813a <_dtoa_r+0x23a>
 80080be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080c0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80080c4:	4453      	add	r3, sl
 80080c6:	9309      	str	r3, [sp, #36]	; 0x24
 80080c8:	2300      	movs	r3, #0
 80080ca:	930a      	str	r3, [sp, #40]	; 0x28
 80080cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080ce:	2b09      	cmp	r3, #9
 80080d0:	f200 808c 	bhi.w	80081ec <_dtoa_r+0x2ec>
 80080d4:	2b05      	cmp	r3, #5
 80080d6:	bfc4      	itt	gt
 80080d8:	3b04      	subgt	r3, #4
 80080da:	9322      	strgt	r3, [sp, #136]	; 0x88
 80080dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80080de:	bfc8      	it	gt
 80080e0:	2400      	movgt	r4, #0
 80080e2:	f1a3 0302 	sub.w	r3, r3, #2
 80080e6:	bfd8      	it	le
 80080e8:	2401      	movle	r4, #1
 80080ea:	2b03      	cmp	r3, #3
 80080ec:	f200 808a 	bhi.w	8008204 <_dtoa_r+0x304>
 80080f0:	e8df f003 	tbb	[pc, r3]
 80080f4:	5b4d4f2d 	.word	0x5b4d4f2d
 80080f8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80080fc:	441c      	add	r4, r3
 80080fe:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008102:	2b20      	cmp	r3, #32
 8008104:	bfc3      	ittte	gt
 8008106:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800810a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800810e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008112:	f1c3 0320 	rsble	r3, r3, #32
 8008116:	bfc6      	itte	gt
 8008118:	fa26 f000 	lsrgt.w	r0, r6, r0
 800811c:	4318      	orrgt	r0, r3
 800811e:	fa06 f003 	lslle.w	r0, r6, r3
 8008122:	f7f8 f95f 	bl	80003e4 <__aeabi_ui2d>
 8008126:	2301      	movs	r3, #1
 8008128:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800812c:	3c01      	subs	r4, #1
 800812e:	9313      	str	r3, [sp, #76]	; 0x4c
 8008130:	e76f      	b.n	8008012 <_dtoa_r+0x112>
 8008132:	2301      	movs	r3, #1
 8008134:	e7b2      	b.n	800809c <_dtoa_r+0x19c>
 8008136:	900f      	str	r0, [sp, #60]	; 0x3c
 8008138:	e7b1      	b.n	800809e <_dtoa_r+0x19e>
 800813a:	9b06      	ldr	r3, [sp, #24]
 800813c:	eba3 030a 	sub.w	r3, r3, sl
 8008140:	9306      	str	r3, [sp, #24]
 8008142:	f1ca 0300 	rsb	r3, sl, #0
 8008146:	930a      	str	r3, [sp, #40]	; 0x28
 8008148:	2300      	movs	r3, #0
 800814a:	930e      	str	r3, [sp, #56]	; 0x38
 800814c:	e7be      	b.n	80080cc <_dtoa_r+0x1cc>
 800814e:	2300      	movs	r3, #0
 8008150:	930b      	str	r3, [sp, #44]	; 0x2c
 8008152:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008154:	2b00      	cmp	r3, #0
 8008156:	dc58      	bgt.n	800820a <_dtoa_r+0x30a>
 8008158:	f04f 0901 	mov.w	r9, #1
 800815c:	464b      	mov	r3, r9
 800815e:	f8cd 9020 	str.w	r9, [sp, #32]
 8008162:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8008166:	2200      	movs	r2, #0
 8008168:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800816a:	6042      	str	r2, [r0, #4]
 800816c:	2204      	movs	r2, #4
 800816e:	f102 0614 	add.w	r6, r2, #20
 8008172:	429e      	cmp	r6, r3
 8008174:	6841      	ldr	r1, [r0, #4]
 8008176:	d94e      	bls.n	8008216 <_dtoa_r+0x316>
 8008178:	4628      	mov	r0, r5
 800817a:	f000 fda5 	bl	8008cc8 <_Balloc>
 800817e:	9003      	str	r0, [sp, #12]
 8008180:	2800      	cmp	r0, #0
 8008182:	d14c      	bne.n	800821e <_dtoa_r+0x31e>
 8008184:	4602      	mov	r2, r0
 8008186:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800818a:	4b17      	ldr	r3, [pc, #92]	; (80081e8 <_dtoa_r+0x2e8>)
 800818c:	e6cc      	b.n	8007f28 <_dtoa_r+0x28>
 800818e:	2301      	movs	r3, #1
 8008190:	e7de      	b.n	8008150 <_dtoa_r+0x250>
 8008192:	2300      	movs	r3, #0
 8008194:	930b      	str	r3, [sp, #44]	; 0x2c
 8008196:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008198:	eb0a 0903 	add.w	r9, sl, r3
 800819c:	f109 0301 	add.w	r3, r9, #1
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	bfb8      	it	lt
 80081a6:	2301      	movlt	r3, #1
 80081a8:	e7dd      	b.n	8008166 <_dtoa_r+0x266>
 80081aa:	2301      	movs	r3, #1
 80081ac:	e7f2      	b.n	8008194 <_dtoa_r+0x294>
 80081ae:	bf00      	nop
 80081b0:	636f4361 	.word	0x636f4361
 80081b4:	3fd287a7 	.word	0x3fd287a7
 80081b8:	8b60c8b3 	.word	0x8b60c8b3
 80081bc:	3fc68a28 	.word	0x3fc68a28
 80081c0:	509f79fb 	.word	0x509f79fb
 80081c4:	3fd34413 	.word	0x3fd34413
 80081c8:	08009d69 	.word	0x08009d69
 80081cc:	08009d80 	.word	0x08009d80
 80081d0:	7ff00000 	.word	0x7ff00000
 80081d4:	08009d65 	.word	0x08009d65
 80081d8:	08009d5c 	.word	0x08009d5c
 80081dc:	08009d39 	.word	0x08009d39
 80081e0:	3ff80000 	.word	0x3ff80000
 80081e4:	08009e70 	.word	0x08009e70
 80081e8:	08009ddb 	.word	0x08009ddb
 80081ec:	2401      	movs	r4, #1
 80081ee:	2300      	movs	r3, #0
 80081f0:	940b      	str	r4, [sp, #44]	; 0x2c
 80081f2:	9322      	str	r3, [sp, #136]	; 0x88
 80081f4:	f04f 39ff 	mov.w	r9, #4294967295
 80081f8:	2200      	movs	r2, #0
 80081fa:	2312      	movs	r3, #18
 80081fc:	f8cd 9020 	str.w	r9, [sp, #32]
 8008200:	9223      	str	r2, [sp, #140]	; 0x8c
 8008202:	e7b0      	b.n	8008166 <_dtoa_r+0x266>
 8008204:	2301      	movs	r3, #1
 8008206:	930b      	str	r3, [sp, #44]	; 0x2c
 8008208:	e7f4      	b.n	80081f4 <_dtoa_r+0x2f4>
 800820a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800820e:	464b      	mov	r3, r9
 8008210:	f8cd 9020 	str.w	r9, [sp, #32]
 8008214:	e7a7      	b.n	8008166 <_dtoa_r+0x266>
 8008216:	3101      	adds	r1, #1
 8008218:	6041      	str	r1, [r0, #4]
 800821a:	0052      	lsls	r2, r2, #1
 800821c:	e7a7      	b.n	800816e <_dtoa_r+0x26e>
 800821e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008220:	9a03      	ldr	r2, [sp, #12]
 8008222:	601a      	str	r2, [r3, #0]
 8008224:	9b08      	ldr	r3, [sp, #32]
 8008226:	2b0e      	cmp	r3, #14
 8008228:	f200 80a8 	bhi.w	800837c <_dtoa_r+0x47c>
 800822c:	2c00      	cmp	r4, #0
 800822e:	f000 80a5 	beq.w	800837c <_dtoa_r+0x47c>
 8008232:	f1ba 0f00 	cmp.w	sl, #0
 8008236:	dd34      	ble.n	80082a2 <_dtoa_r+0x3a2>
 8008238:	4a9a      	ldr	r2, [pc, #616]	; (80084a4 <_dtoa_r+0x5a4>)
 800823a:	f00a 030f 	and.w	r3, sl, #15
 800823e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008242:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8008246:	e9d3 3400 	ldrd	r3, r4, [r3]
 800824a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800824e:	ea4f 142a 	mov.w	r4, sl, asr #4
 8008252:	d016      	beq.n	8008282 <_dtoa_r+0x382>
 8008254:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008258:	4b93      	ldr	r3, [pc, #588]	; (80084a8 <_dtoa_r+0x5a8>)
 800825a:	2703      	movs	r7, #3
 800825c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008260:	f7f8 fa64 	bl	800072c <__aeabi_ddiv>
 8008264:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008268:	f004 040f 	and.w	r4, r4, #15
 800826c:	4e8e      	ldr	r6, [pc, #568]	; (80084a8 <_dtoa_r+0x5a8>)
 800826e:	b954      	cbnz	r4, 8008286 <_dtoa_r+0x386>
 8008270:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008274:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008278:	f7f8 fa58 	bl	800072c <__aeabi_ddiv>
 800827c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008280:	e029      	b.n	80082d6 <_dtoa_r+0x3d6>
 8008282:	2702      	movs	r7, #2
 8008284:	e7f2      	b.n	800826c <_dtoa_r+0x36c>
 8008286:	07e1      	lsls	r1, r4, #31
 8008288:	d508      	bpl.n	800829c <_dtoa_r+0x39c>
 800828a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800828e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008292:	f7f8 f921 	bl	80004d8 <__aeabi_dmul>
 8008296:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800829a:	3701      	adds	r7, #1
 800829c:	1064      	asrs	r4, r4, #1
 800829e:	3608      	adds	r6, #8
 80082a0:	e7e5      	b.n	800826e <_dtoa_r+0x36e>
 80082a2:	f000 80a5 	beq.w	80083f0 <_dtoa_r+0x4f0>
 80082a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80082aa:	f1ca 0400 	rsb	r4, sl, #0
 80082ae:	4b7d      	ldr	r3, [pc, #500]	; (80084a4 <_dtoa_r+0x5a4>)
 80082b0:	f004 020f 	and.w	r2, r4, #15
 80082b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80082b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082bc:	f7f8 f90c 	bl	80004d8 <__aeabi_dmul>
 80082c0:	2702      	movs	r7, #2
 80082c2:	2300      	movs	r3, #0
 80082c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082c8:	4e77      	ldr	r6, [pc, #476]	; (80084a8 <_dtoa_r+0x5a8>)
 80082ca:	1124      	asrs	r4, r4, #4
 80082cc:	2c00      	cmp	r4, #0
 80082ce:	f040 8084 	bne.w	80083da <_dtoa_r+0x4da>
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1d2      	bne.n	800827c <_dtoa_r+0x37c>
 80082d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80082d8:	2b00      	cmp	r3, #0
 80082da:	f000 808b 	beq.w	80083f4 <_dtoa_r+0x4f4>
 80082de:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80082e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80082e6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80082ea:	2200      	movs	r2, #0
 80082ec:	4b6f      	ldr	r3, [pc, #444]	; (80084ac <_dtoa_r+0x5ac>)
 80082ee:	f7f8 fb65 	bl	80009bc <__aeabi_dcmplt>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d07e      	beq.n	80083f4 <_dtoa_r+0x4f4>
 80082f6:	9b08      	ldr	r3, [sp, #32]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d07b      	beq.n	80083f4 <_dtoa_r+0x4f4>
 80082fc:	f1b9 0f00 	cmp.w	r9, #0
 8008300:	dd38      	ble.n	8008374 <_dtoa_r+0x474>
 8008302:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008306:	2200      	movs	r2, #0
 8008308:	4b69      	ldr	r3, [pc, #420]	; (80084b0 <_dtoa_r+0x5b0>)
 800830a:	f7f8 f8e5 	bl	80004d8 <__aeabi_dmul>
 800830e:	464c      	mov	r4, r9
 8008310:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008314:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008318:	3701      	adds	r7, #1
 800831a:	4638      	mov	r0, r7
 800831c:	f7f8 f872 	bl	8000404 <__aeabi_i2d>
 8008320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008324:	f7f8 f8d8 	bl	80004d8 <__aeabi_dmul>
 8008328:	2200      	movs	r2, #0
 800832a:	4b62      	ldr	r3, [pc, #392]	; (80084b4 <_dtoa_r+0x5b4>)
 800832c:	f7f7 ff1e 	bl	800016c <__adddf3>
 8008330:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8008334:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008338:	9611      	str	r6, [sp, #68]	; 0x44
 800833a:	2c00      	cmp	r4, #0
 800833c:	d15d      	bne.n	80083fa <_dtoa_r+0x4fa>
 800833e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008342:	2200      	movs	r2, #0
 8008344:	4b5c      	ldr	r3, [pc, #368]	; (80084b8 <_dtoa_r+0x5b8>)
 8008346:	f7f7 ff0f 	bl	8000168 <__aeabi_dsub>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008352:	4633      	mov	r3, r6
 8008354:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008356:	f7f8 fb4f 	bl	80009f8 <__aeabi_dcmpgt>
 800835a:	2800      	cmp	r0, #0
 800835c:	f040 829c 	bne.w	8008898 <_dtoa_r+0x998>
 8008360:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008364:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008366:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800836a:	f7f8 fb27 	bl	80009bc <__aeabi_dcmplt>
 800836e:	2800      	cmp	r0, #0
 8008370:	f040 8290 	bne.w	8008894 <_dtoa_r+0x994>
 8008374:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8008378:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800837c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800837e:	2b00      	cmp	r3, #0
 8008380:	f2c0 8152 	blt.w	8008628 <_dtoa_r+0x728>
 8008384:	f1ba 0f0e 	cmp.w	sl, #14
 8008388:	f300 814e 	bgt.w	8008628 <_dtoa_r+0x728>
 800838c:	4b45      	ldr	r3, [pc, #276]	; (80084a4 <_dtoa_r+0x5a4>)
 800838e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008392:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008396:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800839a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800839c:	2b00      	cmp	r3, #0
 800839e:	f280 80db 	bge.w	8008558 <_dtoa_r+0x658>
 80083a2:	9b08      	ldr	r3, [sp, #32]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f300 80d7 	bgt.w	8008558 <_dtoa_r+0x658>
 80083aa:	f040 8272 	bne.w	8008892 <_dtoa_r+0x992>
 80083ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80083b2:	2200      	movs	r2, #0
 80083b4:	4b40      	ldr	r3, [pc, #256]	; (80084b8 <_dtoa_r+0x5b8>)
 80083b6:	f7f8 f88f 	bl	80004d8 <__aeabi_dmul>
 80083ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083be:	f7f8 fb11 	bl	80009e4 <__aeabi_dcmpge>
 80083c2:	9c08      	ldr	r4, [sp, #32]
 80083c4:	4626      	mov	r6, r4
 80083c6:	2800      	cmp	r0, #0
 80083c8:	f040 8248 	bne.w	800885c <_dtoa_r+0x95c>
 80083cc:	2331      	movs	r3, #49	; 0x31
 80083ce:	9f03      	ldr	r7, [sp, #12]
 80083d0:	f10a 0a01 	add.w	sl, sl, #1
 80083d4:	f807 3b01 	strb.w	r3, [r7], #1
 80083d8:	e244      	b.n	8008864 <_dtoa_r+0x964>
 80083da:	07e2      	lsls	r2, r4, #31
 80083dc:	d505      	bpl.n	80083ea <_dtoa_r+0x4ea>
 80083de:	e9d6 2300 	ldrd	r2, r3, [r6]
 80083e2:	f7f8 f879 	bl	80004d8 <__aeabi_dmul>
 80083e6:	2301      	movs	r3, #1
 80083e8:	3701      	adds	r7, #1
 80083ea:	1064      	asrs	r4, r4, #1
 80083ec:	3608      	adds	r6, #8
 80083ee:	e76d      	b.n	80082cc <_dtoa_r+0x3cc>
 80083f0:	2702      	movs	r7, #2
 80083f2:	e770      	b.n	80082d6 <_dtoa_r+0x3d6>
 80083f4:	46d0      	mov	r8, sl
 80083f6:	9c08      	ldr	r4, [sp, #32]
 80083f8:	e78f      	b.n	800831a <_dtoa_r+0x41a>
 80083fa:	9903      	ldr	r1, [sp, #12]
 80083fc:	4b29      	ldr	r3, [pc, #164]	; (80084a4 <_dtoa_r+0x5a4>)
 80083fe:	4421      	add	r1, r4
 8008400:	9112      	str	r1, [sp, #72]	; 0x48
 8008402:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008404:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008408:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800840c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008410:	2900      	cmp	r1, #0
 8008412:	d055      	beq.n	80084c0 <_dtoa_r+0x5c0>
 8008414:	2000      	movs	r0, #0
 8008416:	4929      	ldr	r1, [pc, #164]	; (80084bc <_dtoa_r+0x5bc>)
 8008418:	f7f8 f988 	bl	800072c <__aeabi_ddiv>
 800841c:	463b      	mov	r3, r7
 800841e:	4632      	mov	r2, r6
 8008420:	f7f7 fea2 	bl	8000168 <__aeabi_dsub>
 8008424:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008428:	9f03      	ldr	r7, [sp, #12]
 800842a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800842e:	f7f8 fb03 	bl	8000a38 <__aeabi_d2iz>
 8008432:	4604      	mov	r4, r0
 8008434:	f7f7 ffe6 	bl	8000404 <__aeabi_i2d>
 8008438:	4602      	mov	r2, r0
 800843a:	460b      	mov	r3, r1
 800843c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008440:	f7f7 fe92 	bl	8000168 <__aeabi_dsub>
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	3430      	adds	r4, #48	; 0x30
 800844a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800844e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008452:	f807 4b01 	strb.w	r4, [r7], #1
 8008456:	f7f8 fab1 	bl	80009bc <__aeabi_dcmplt>
 800845a:	2800      	cmp	r0, #0
 800845c:	d174      	bne.n	8008548 <_dtoa_r+0x648>
 800845e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008462:	2000      	movs	r0, #0
 8008464:	4911      	ldr	r1, [pc, #68]	; (80084ac <_dtoa_r+0x5ac>)
 8008466:	f7f7 fe7f 	bl	8000168 <__aeabi_dsub>
 800846a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800846e:	f7f8 faa5 	bl	80009bc <__aeabi_dcmplt>
 8008472:	2800      	cmp	r0, #0
 8008474:	f040 80b7 	bne.w	80085e6 <_dtoa_r+0x6e6>
 8008478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800847a:	429f      	cmp	r7, r3
 800847c:	f43f af7a 	beq.w	8008374 <_dtoa_r+0x474>
 8008480:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008484:	2200      	movs	r2, #0
 8008486:	4b0a      	ldr	r3, [pc, #40]	; (80084b0 <_dtoa_r+0x5b0>)
 8008488:	f7f8 f826 	bl	80004d8 <__aeabi_dmul>
 800848c:	2200      	movs	r2, #0
 800848e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008492:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008496:	4b06      	ldr	r3, [pc, #24]	; (80084b0 <_dtoa_r+0x5b0>)
 8008498:	f7f8 f81e 	bl	80004d8 <__aeabi_dmul>
 800849c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084a0:	e7c3      	b.n	800842a <_dtoa_r+0x52a>
 80084a2:	bf00      	nop
 80084a4:	08009e70 	.word	0x08009e70
 80084a8:	08009e48 	.word	0x08009e48
 80084ac:	3ff00000 	.word	0x3ff00000
 80084b0:	40240000 	.word	0x40240000
 80084b4:	401c0000 	.word	0x401c0000
 80084b8:	40140000 	.word	0x40140000
 80084bc:	3fe00000 	.word	0x3fe00000
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 f808 	bl	80004d8 <__aeabi_dmul>
 80084c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084ca:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80084ce:	9c03      	ldr	r4, [sp, #12]
 80084d0:	9314      	str	r3, [sp, #80]	; 0x50
 80084d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084d6:	f7f8 faaf 	bl	8000a38 <__aeabi_d2iz>
 80084da:	9015      	str	r0, [sp, #84]	; 0x54
 80084dc:	f7f7 ff92 	bl	8000404 <__aeabi_i2d>
 80084e0:	4602      	mov	r2, r0
 80084e2:	460b      	mov	r3, r1
 80084e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80084e8:	f7f7 fe3e 	bl	8000168 <__aeabi_dsub>
 80084ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084ee:	4606      	mov	r6, r0
 80084f0:	3330      	adds	r3, #48	; 0x30
 80084f2:	f804 3b01 	strb.w	r3, [r4], #1
 80084f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80084f8:	460f      	mov	r7, r1
 80084fa:	429c      	cmp	r4, r3
 80084fc:	f04f 0200 	mov.w	r2, #0
 8008500:	d124      	bne.n	800854c <_dtoa_r+0x64c>
 8008502:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008506:	4bb0      	ldr	r3, [pc, #704]	; (80087c8 <_dtoa_r+0x8c8>)
 8008508:	f7f7 fe30 	bl	800016c <__adddf3>
 800850c:	4602      	mov	r2, r0
 800850e:	460b      	mov	r3, r1
 8008510:	4630      	mov	r0, r6
 8008512:	4639      	mov	r1, r7
 8008514:	f7f8 fa70 	bl	80009f8 <__aeabi_dcmpgt>
 8008518:	2800      	cmp	r0, #0
 800851a:	d163      	bne.n	80085e4 <_dtoa_r+0x6e4>
 800851c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008520:	2000      	movs	r0, #0
 8008522:	49a9      	ldr	r1, [pc, #676]	; (80087c8 <_dtoa_r+0x8c8>)
 8008524:	f7f7 fe20 	bl	8000168 <__aeabi_dsub>
 8008528:	4602      	mov	r2, r0
 800852a:	460b      	mov	r3, r1
 800852c:	4630      	mov	r0, r6
 800852e:	4639      	mov	r1, r7
 8008530:	f7f8 fa44 	bl	80009bc <__aeabi_dcmplt>
 8008534:	2800      	cmp	r0, #0
 8008536:	f43f af1d 	beq.w	8008374 <_dtoa_r+0x474>
 800853a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800853c:	1e7b      	subs	r3, r7, #1
 800853e:	9314      	str	r3, [sp, #80]	; 0x50
 8008540:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8008544:	2b30      	cmp	r3, #48	; 0x30
 8008546:	d0f8      	beq.n	800853a <_dtoa_r+0x63a>
 8008548:	46c2      	mov	sl, r8
 800854a:	e03b      	b.n	80085c4 <_dtoa_r+0x6c4>
 800854c:	4b9f      	ldr	r3, [pc, #636]	; (80087cc <_dtoa_r+0x8cc>)
 800854e:	f7f7 ffc3 	bl	80004d8 <__aeabi_dmul>
 8008552:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008556:	e7bc      	b.n	80084d2 <_dtoa_r+0x5d2>
 8008558:	9f03      	ldr	r7, [sp, #12]
 800855a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800855e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008562:	4640      	mov	r0, r8
 8008564:	4649      	mov	r1, r9
 8008566:	f7f8 f8e1 	bl	800072c <__aeabi_ddiv>
 800856a:	f7f8 fa65 	bl	8000a38 <__aeabi_d2iz>
 800856e:	4604      	mov	r4, r0
 8008570:	f7f7 ff48 	bl	8000404 <__aeabi_i2d>
 8008574:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008578:	f7f7 ffae 	bl	80004d8 <__aeabi_dmul>
 800857c:	4602      	mov	r2, r0
 800857e:	460b      	mov	r3, r1
 8008580:	4640      	mov	r0, r8
 8008582:	4649      	mov	r1, r9
 8008584:	f7f7 fdf0 	bl	8000168 <__aeabi_dsub>
 8008588:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800858c:	f807 6b01 	strb.w	r6, [r7], #1
 8008590:	9e03      	ldr	r6, [sp, #12]
 8008592:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008596:	1bbe      	subs	r6, r7, r6
 8008598:	45b4      	cmp	ip, r6
 800859a:	4602      	mov	r2, r0
 800859c:	460b      	mov	r3, r1
 800859e:	d136      	bne.n	800860e <_dtoa_r+0x70e>
 80085a0:	f7f7 fde4 	bl	800016c <__adddf3>
 80085a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085a8:	4680      	mov	r8, r0
 80085aa:	4689      	mov	r9, r1
 80085ac:	f7f8 fa24 	bl	80009f8 <__aeabi_dcmpgt>
 80085b0:	bb58      	cbnz	r0, 800860a <_dtoa_r+0x70a>
 80085b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80085b6:	4640      	mov	r0, r8
 80085b8:	4649      	mov	r1, r9
 80085ba:	f7f8 f9f5 	bl	80009a8 <__aeabi_dcmpeq>
 80085be:	b108      	cbz	r0, 80085c4 <_dtoa_r+0x6c4>
 80085c0:	07e1      	lsls	r1, r4, #31
 80085c2:	d422      	bmi.n	800860a <_dtoa_r+0x70a>
 80085c4:	4628      	mov	r0, r5
 80085c6:	4659      	mov	r1, fp
 80085c8:	f000 fbbe 	bl	8008d48 <_Bfree>
 80085cc:	2300      	movs	r3, #0
 80085ce:	703b      	strb	r3, [r7, #0]
 80085d0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80085d2:	f10a 0001 	add.w	r0, sl, #1
 80085d6:	6018      	str	r0, [r3, #0]
 80085d8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f43f acde 	beq.w	8007f9c <_dtoa_r+0x9c>
 80085e0:	601f      	str	r7, [r3, #0]
 80085e2:	e4db      	b.n	8007f9c <_dtoa_r+0x9c>
 80085e4:	4627      	mov	r7, r4
 80085e6:	463b      	mov	r3, r7
 80085e8:	461f      	mov	r7, r3
 80085ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80085ee:	2a39      	cmp	r2, #57	; 0x39
 80085f0:	d107      	bne.n	8008602 <_dtoa_r+0x702>
 80085f2:	9a03      	ldr	r2, [sp, #12]
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d1f7      	bne.n	80085e8 <_dtoa_r+0x6e8>
 80085f8:	2230      	movs	r2, #48	; 0x30
 80085fa:	9903      	ldr	r1, [sp, #12]
 80085fc:	f108 0801 	add.w	r8, r8, #1
 8008600:	700a      	strb	r2, [r1, #0]
 8008602:	781a      	ldrb	r2, [r3, #0]
 8008604:	3201      	adds	r2, #1
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e79e      	b.n	8008548 <_dtoa_r+0x648>
 800860a:	46d0      	mov	r8, sl
 800860c:	e7eb      	b.n	80085e6 <_dtoa_r+0x6e6>
 800860e:	2200      	movs	r2, #0
 8008610:	4b6e      	ldr	r3, [pc, #440]	; (80087cc <_dtoa_r+0x8cc>)
 8008612:	f7f7 ff61 	bl	80004d8 <__aeabi_dmul>
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	4680      	mov	r8, r0
 800861c:	4689      	mov	r9, r1
 800861e:	f7f8 f9c3 	bl	80009a8 <__aeabi_dcmpeq>
 8008622:	2800      	cmp	r0, #0
 8008624:	d09b      	beq.n	800855e <_dtoa_r+0x65e>
 8008626:	e7cd      	b.n	80085c4 <_dtoa_r+0x6c4>
 8008628:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800862a:	2a00      	cmp	r2, #0
 800862c:	f000 80d0 	beq.w	80087d0 <_dtoa_r+0x8d0>
 8008630:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8008632:	2a01      	cmp	r2, #1
 8008634:	f300 80ae 	bgt.w	8008794 <_dtoa_r+0x894>
 8008638:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800863a:	2a00      	cmp	r2, #0
 800863c:	f000 80a6 	beq.w	800878c <_dtoa_r+0x88c>
 8008640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008644:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008646:	9f06      	ldr	r7, [sp, #24]
 8008648:	9a06      	ldr	r2, [sp, #24]
 800864a:	2101      	movs	r1, #1
 800864c:	441a      	add	r2, r3
 800864e:	9206      	str	r2, [sp, #24]
 8008650:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008652:	4628      	mov	r0, r5
 8008654:	441a      	add	r2, r3
 8008656:	9209      	str	r2, [sp, #36]	; 0x24
 8008658:	f000 fc2c 	bl	8008eb4 <__i2b>
 800865c:	4606      	mov	r6, r0
 800865e:	2f00      	cmp	r7, #0
 8008660:	dd0c      	ble.n	800867c <_dtoa_r+0x77c>
 8008662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008664:	2b00      	cmp	r3, #0
 8008666:	dd09      	ble.n	800867c <_dtoa_r+0x77c>
 8008668:	42bb      	cmp	r3, r7
 800866a:	bfa8      	it	ge
 800866c:	463b      	movge	r3, r7
 800866e:	9a06      	ldr	r2, [sp, #24]
 8008670:	1aff      	subs	r7, r7, r3
 8008672:	1ad2      	subs	r2, r2, r3
 8008674:	9206      	str	r2, [sp, #24]
 8008676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008678:	1ad3      	subs	r3, r2, r3
 800867a:	9309      	str	r3, [sp, #36]	; 0x24
 800867c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800867e:	b1f3      	cbz	r3, 80086be <_dtoa_r+0x7be>
 8008680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 80a8 	beq.w	80087d8 <_dtoa_r+0x8d8>
 8008688:	2c00      	cmp	r4, #0
 800868a:	dd10      	ble.n	80086ae <_dtoa_r+0x7ae>
 800868c:	4631      	mov	r1, r6
 800868e:	4622      	mov	r2, r4
 8008690:	4628      	mov	r0, r5
 8008692:	f000 fccd 	bl	8009030 <__pow5mult>
 8008696:	465a      	mov	r2, fp
 8008698:	4601      	mov	r1, r0
 800869a:	4606      	mov	r6, r0
 800869c:	4628      	mov	r0, r5
 800869e:	f000 fc1f 	bl	8008ee0 <__multiply>
 80086a2:	4680      	mov	r8, r0
 80086a4:	4659      	mov	r1, fp
 80086a6:	4628      	mov	r0, r5
 80086a8:	f000 fb4e 	bl	8008d48 <_Bfree>
 80086ac:	46c3      	mov	fp, r8
 80086ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086b0:	1b1a      	subs	r2, r3, r4
 80086b2:	d004      	beq.n	80086be <_dtoa_r+0x7be>
 80086b4:	4659      	mov	r1, fp
 80086b6:	4628      	mov	r0, r5
 80086b8:	f000 fcba 	bl	8009030 <__pow5mult>
 80086bc:	4683      	mov	fp, r0
 80086be:	2101      	movs	r1, #1
 80086c0:	4628      	mov	r0, r5
 80086c2:	f000 fbf7 	bl	8008eb4 <__i2b>
 80086c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80086c8:	4604      	mov	r4, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	f340 8086 	ble.w	80087dc <_dtoa_r+0x8dc>
 80086d0:	461a      	mov	r2, r3
 80086d2:	4601      	mov	r1, r0
 80086d4:	4628      	mov	r0, r5
 80086d6:	f000 fcab 	bl	8009030 <__pow5mult>
 80086da:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80086dc:	4604      	mov	r4, r0
 80086de:	2b01      	cmp	r3, #1
 80086e0:	dd7f      	ble.n	80087e2 <_dtoa_r+0x8e2>
 80086e2:	f04f 0800 	mov.w	r8, #0
 80086e6:	6923      	ldr	r3, [r4, #16]
 80086e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80086ec:	6918      	ldr	r0, [r3, #16]
 80086ee:	f000 fb93 	bl	8008e18 <__hi0bits>
 80086f2:	f1c0 0020 	rsb	r0, r0, #32
 80086f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f8:	4418      	add	r0, r3
 80086fa:	f010 001f 	ands.w	r0, r0, #31
 80086fe:	f000 8092 	beq.w	8008826 <_dtoa_r+0x926>
 8008702:	f1c0 0320 	rsb	r3, r0, #32
 8008706:	2b04      	cmp	r3, #4
 8008708:	f340 808a 	ble.w	8008820 <_dtoa_r+0x920>
 800870c:	f1c0 001c 	rsb	r0, r0, #28
 8008710:	9b06      	ldr	r3, [sp, #24]
 8008712:	4407      	add	r7, r0
 8008714:	4403      	add	r3, r0
 8008716:	9306      	str	r3, [sp, #24]
 8008718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800871a:	4403      	add	r3, r0
 800871c:	9309      	str	r3, [sp, #36]	; 0x24
 800871e:	9b06      	ldr	r3, [sp, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	dd05      	ble.n	8008730 <_dtoa_r+0x830>
 8008724:	4659      	mov	r1, fp
 8008726:	461a      	mov	r2, r3
 8008728:	4628      	mov	r0, r5
 800872a:	f000 fcdb 	bl	80090e4 <__lshift>
 800872e:	4683      	mov	fp, r0
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	2b00      	cmp	r3, #0
 8008734:	dd05      	ble.n	8008742 <_dtoa_r+0x842>
 8008736:	4621      	mov	r1, r4
 8008738:	461a      	mov	r2, r3
 800873a:	4628      	mov	r0, r5
 800873c:	f000 fcd2 	bl	80090e4 <__lshift>
 8008740:	4604      	mov	r4, r0
 8008742:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008744:	2b00      	cmp	r3, #0
 8008746:	d070      	beq.n	800882a <_dtoa_r+0x92a>
 8008748:	4621      	mov	r1, r4
 800874a:	4658      	mov	r0, fp
 800874c:	f000 fd3a 	bl	80091c4 <__mcmp>
 8008750:	2800      	cmp	r0, #0
 8008752:	da6a      	bge.n	800882a <_dtoa_r+0x92a>
 8008754:	2300      	movs	r3, #0
 8008756:	4659      	mov	r1, fp
 8008758:	220a      	movs	r2, #10
 800875a:	4628      	mov	r0, r5
 800875c:	f000 fb16 	bl	8008d8c <__multadd>
 8008760:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008762:	4683      	mov	fp, r0
 8008764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008768:	2b00      	cmp	r3, #0
 800876a:	f000 8194 	beq.w	8008a96 <_dtoa_r+0xb96>
 800876e:	4631      	mov	r1, r6
 8008770:	2300      	movs	r3, #0
 8008772:	220a      	movs	r2, #10
 8008774:	4628      	mov	r0, r5
 8008776:	f000 fb09 	bl	8008d8c <__multadd>
 800877a:	f1b9 0f00 	cmp.w	r9, #0
 800877e:	4606      	mov	r6, r0
 8008780:	f300 8093 	bgt.w	80088aa <_dtoa_r+0x9aa>
 8008784:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008786:	2b02      	cmp	r3, #2
 8008788:	dc57      	bgt.n	800883a <_dtoa_r+0x93a>
 800878a:	e08e      	b.n	80088aa <_dtoa_r+0x9aa>
 800878c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800878e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008792:	e757      	b.n	8008644 <_dtoa_r+0x744>
 8008794:	9b08      	ldr	r3, [sp, #32]
 8008796:	1e5c      	subs	r4, r3, #1
 8008798:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800879a:	42a3      	cmp	r3, r4
 800879c:	bfb7      	itett	lt
 800879e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80087a0:	1b1c      	subge	r4, r3, r4
 80087a2:	1ae2      	sublt	r2, r4, r3
 80087a4:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80087a6:	bfbe      	ittt	lt
 80087a8:	940a      	strlt	r4, [sp, #40]	; 0x28
 80087aa:	189b      	addlt	r3, r3, r2
 80087ac:	930e      	strlt	r3, [sp, #56]	; 0x38
 80087ae:	9b08      	ldr	r3, [sp, #32]
 80087b0:	bfb8      	it	lt
 80087b2:	2400      	movlt	r4, #0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	bfbb      	ittet	lt
 80087b8:	9b06      	ldrlt	r3, [sp, #24]
 80087ba:	9a08      	ldrlt	r2, [sp, #32]
 80087bc:	9f06      	ldrge	r7, [sp, #24]
 80087be:	1a9f      	sublt	r7, r3, r2
 80087c0:	bfac      	ite	ge
 80087c2:	9b08      	ldrge	r3, [sp, #32]
 80087c4:	2300      	movlt	r3, #0
 80087c6:	e73f      	b.n	8008648 <_dtoa_r+0x748>
 80087c8:	3fe00000 	.word	0x3fe00000
 80087cc:	40240000 	.word	0x40240000
 80087d0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80087d2:	9f06      	ldr	r7, [sp, #24]
 80087d4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80087d6:	e742      	b.n	800865e <_dtoa_r+0x75e>
 80087d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80087da:	e76b      	b.n	80086b4 <_dtoa_r+0x7b4>
 80087dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087de:	2b01      	cmp	r3, #1
 80087e0:	dc19      	bgt.n	8008816 <_dtoa_r+0x916>
 80087e2:	9b04      	ldr	r3, [sp, #16]
 80087e4:	b9bb      	cbnz	r3, 8008816 <_dtoa_r+0x916>
 80087e6:	9b05      	ldr	r3, [sp, #20]
 80087e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80087ec:	b99b      	cbnz	r3, 8008816 <_dtoa_r+0x916>
 80087ee:	9b05      	ldr	r3, [sp, #20]
 80087f0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80087f4:	0d1b      	lsrs	r3, r3, #20
 80087f6:	051b      	lsls	r3, r3, #20
 80087f8:	b183      	cbz	r3, 800881c <_dtoa_r+0x91c>
 80087fa:	f04f 0801 	mov.w	r8, #1
 80087fe:	9b06      	ldr	r3, [sp, #24]
 8008800:	3301      	adds	r3, #1
 8008802:	9306      	str	r3, [sp, #24]
 8008804:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008806:	3301      	adds	r3, #1
 8008808:	9309      	str	r3, [sp, #36]	; 0x24
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	2b00      	cmp	r3, #0
 800880e:	f47f af6a 	bne.w	80086e6 <_dtoa_r+0x7e6>
 8008812:	2001      	movs	r0, #1
 8008814:	e76f      	b.n	80086f6 <_dtoa_r+0x7f6>
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	e7f6      	b.n	800880a <_dtoa_r+0x90a>
 800881c:	4698      	mov	r8, r3
 800881e:	e7f4      	b.n	800880a <_dtoa_r+0x90a>
 8008820:	f43f af7d 	beq.w	800871e <_dtoa_r+0x81e>
 8008824:	4618      	mov	r0, r3
 8008826:	301c      	adds	r0, #28
 8008828:	e772      	b.n	8008710 <_dtoa_r+0x810>
 800882a:	9b08      	ldr	r3, [sp, #32]
 800882c:	2b00      	cmp	r3, #0
 800882e:	dc36      	bgt.n	800889e <_dtoa_r+0x99e>
 8008830:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008832:	2b02      	cmp	r3, #2
 8008834:	dd33      	ble.n	800889e <_dtoa_r+0x99e>
 8008836:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800883a:	f1b9 0f00 	cmp.w	r9, #0
 800883e:	d10d      	bne.n	800885c <_dtoa_r+0x95c>
 8008840:	4621      	mov	r1, r4
 8008842:	464b      	mov	r3, r9
 8008844:	2205      	movs	r2, #5
 8008846:	4628      	mov	r0, r5
 8008848:	f000 faa0 	bl	8008d8c <__multadd>
 800884c:	4601      	mov	r1, r0
 800884e:	4604      	mov	r4, r0
 8008850:	4658      	mov	r0, fp
 8008852:	f000 fcb7 	bl	80091c4 <__mcmp>
 8008856:	2800      	cmp	r0, #0
 8008858:	f73f adb8 	bgt.w	80083cc <_dtoa_r+0x4cc>
 800885c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800885e:	9f03      	ldr	r7, [sp, #12]
 8008860:	ea6f 0a03 	mvn.w	sl, r3
 8008864:	f04f 0800 	mov.w	r8, #0
 8008868:	4621      	mov	r1, r4
 800886a:	4628      	mov	r0, r5
 800886c:	f000 fa6c 	bl	8008d48 <_Bfree>
 8008870:	2e00      	cmp	r6, #0
 8008872:	f43f aea7 	beq.w	80085c4 <_dtoa_r+0x6c4>
 8008876:	f1b8 0f00 	cmp.w	r8, #0
 800887a:	d005      	beq.n	8008888 <_dtoa_r+0x988>
 800887c:	45b0      	cmp	r8, r6
 800887e:	d003      	beq.n	8008888 <_dtoa_r+0x988>
 8008880:	4641      	mov	r1, r8
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fa60 	bl	8008d48 <_Bfree>
 8008888:	4631      	mov	r1, r6
 800888a:	4628      	mov	r0, r5
 800888c:	f000 fa5c 	bl	8008d48 <_Bfree>
 8008890:	e698      	b.n	80085c4 <_dtoa_r+0x6c4>
 8008892:	2400      	movs	r4, #0
 8008894:	4626      	mov	r6, r4
 8008896:	e7e1      	b.n	800885c <_dtoa_r+0x95c>
 8008898:	46c2      	mov	sl, r8
 800889a:	4626      	mov	r6, r4
 800889c:	e596      	b.n	80083cc <_dtoa_r+0x4cc>
 800889e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	f000 80fd 	beq.w	8008aa4 <_dtoa_r+0xba4>
 80088aa:	2f00      	cmp	r7, #0
 80088ac:	dd05      	ble.n	80088ba <_dtoa_r+0x9ba>
 80088ae:	4631      	mov	r1, r6
 80088b0:	463a      	mov	r2, r7
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 fc16 	bl	80090e4 <__lshift>
 80088b8:	4606      	mov	r6, r0
 80088ba:	f1b8 0f00 	cmp.w	r8, #0
 80088be:	d05c      	beq.n	800897a <_dtoa_r+0xa7a>
 80088c0:	4628      	mov	r0, r5
 80088c2:	6871      	ldr	r1, [r6, #4]
 80088c4:	f000 fa00 	bl	8008cc8 <_Balloc>
 80088c8:	4607      	mov	r7, r0
 80088ca:	b928      	cbnz	r0, 80088d8 <_dtoa_r+0x9d8>
 80088cc:	4602      	mov	r2, r0
 80088ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80088d2:	4b7f      	ldr	r3, [pc, #508]	; (8008ad0 <_dtoa_r+0xbd0>)
 80088d4:	f7ff bb28 	b.w	8007f28 <_dtoa_r+0x28>
 80088d8:	6932      	ldr	r2, [r6, #16]
 80088da:	f106 010c 	add.w	r1, r6, #12
 80088de:	3202      	adds	r2, #2
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	300c      	adds	r0, #12
 80088e4:	f7fe fc7d 	bl	80071e2 <memcpy>
 80088e8:	2201      	movs	r2, #1
 80088ea:	4639      	mov	r1, r7
 80088ec:	4628      	mov	r0, r5
 80088ee:	f000 fbf9 	bl	80090e4 <__lshift>
 80088f2:	46b0      	mov	r8, r6
 80088f4:	4606      	mov	r6, r0
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	3301      	adds	r3, #1
 80088fa:	9308      	str	r3, [sp, #32]
 80088fc:	9b03      	ldr	r3, [sp, #12]
 80088fe:	444b      	add	r3, r9
 8008900:	930a      	str	r3, [sp, #40]	; 0x28
 8008902:	9b04      	ldr	r3, [sp, #16]
 8008904:	f003 0301 	and.w	r3, r3, #1
 8008908:	9309      	str	r3, [sp, #36]	; 0x24
 800890a:	9b08      	ldr	r3, [sp, #32]
 800890c:	4621      	mov	r1, r4
 800890e:	3b01      	subs	r3, #1
 8008910:	4658      	mov	r0, fp
 8008912:	9304      	str	r3, [sp, #16]
 8008914:	f7ff fa68 	bl	8007de8 <quorem>
 8008918:	4603      	mov	r3, r0
 800891a:	4641      	mov	r1, r8
 800891c:	3330      	adds	r3, #48	; 0x30
 800891e:	9006      	str	r0, [sp, #24]
 8008920:	4658      	mov	r0, fp
 8008922:	930b      	str	r3, [sp, #44]	; 0x2c
 8008924:	f000 fc4e 	bl	80091c4 <__mcmp>
 8008928:	4632      	mov	r2, r6
 800892a:	4681      	mov	r9, r0
 800892c:	4621      	mov	r1, r4
 800892e:	4628      	mov	r0, r5
 8008930:	f000 fc64 	bl	80091fc <__mdiff>
 8008934:	68c2      	ldr	r2, [r0, #12]
 8008936:	4607      	mov	r7, r0
 8008938:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800893a:	bb02      	cbnz	r2, 800897e <_dtoa_r+0xa7e>
 800893c:	4601      	mov	r1, r0
 800893e:	4658      	mov	r0, fp
 8008940:	f000 fc40 	bl	80091c4 <__mcmp>
 8008944:	4602      	mov	r2, r0
 8008946:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008948:	4639      	mov	r1, r7
 800894a:	4628      	mov	r0, r5
 800894c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008950:	f000 f9fa 	bl	8008d48 <_Bfree>
 8008954:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008956:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008958:	9f08      	ldr	r7, [sp, #32]
 800895a:	ea43 0102 	orr.w	r1, r3, r2
 800895e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008960:	430b      	orrs	r3, r1
 8008962:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008964:	d10d      	bne.n	8008982 <_dtoa_r+0xa82>
 8008966:	2b39      	cmp	r3, #57	; 0x39
 8008968:	d029      	beq.n	80089be <_dtoa_r+0xabe>
 800896a:	f1b9 0f00 	cmp.w	r9, #0
 800896e:	dd01      	ble.n	8008974 <_dtoa_r+0xa74>
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	3331      	adds	r3, #49	; 0x31
 8008974:	9a04      	ldr	r2, [sp, #16]
 8008976:	7013      	strb	r3, [r2, #0]
 8008978:	e776      	b.n	8008868 <_dtoa_r+0x968>
 800897a:	4630      	mov	r0, r6
 800897c:	e7b9      	b.n	80088f2 <_dtoa_r+0x9f2>
 800897e:	2201      	movs	r2, #1
 8008980:	e7e2      	b.n	8008948 <_dtoa_r+0xa48>
 8008982:	f1b9 0f00 	cmp.w	r9, #0
 8008986:	db06      	blt.n	8008996 <_dtoa_r+0xa96>
 8008988:	9922      	ldr	r1, [sp, #136]	; 0x88
 800898a:	ea41 0909 	orr.w	r9, r1, r9
 800898e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008990:	ea59 0101 	orrs.w	r1, r9, r1
 8008994:	d120      	bne.n	80089d8 <_dtoa_r+0xad8>
 8008996:	2a00      	cmp	r2, #0
 8008998:	ddec      	ble.n	8008974 <_dtoa_r+0xa74>
 800899a:	4659      	mov	r1, fp
 800899c:	2201      	movs	r2, #1
 800899e:	4628      	mov	r0, r5
 80089a0:	9308      	str	r3, [sp, #32]
 80089a2:	f000 fb9f 	bl	80090e4 <__lshift>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4683      	mov	fp, r0
 80089aa:	f000 fc0b 	bl	80091c4 <__mcmp>
 80089ae:	2800      	cmp	r0, #0
 80089b0:	9b08      	ldr	r3, [sp, #32]
 80089b2:	dc02      	bgt.n	80089ba <_dtoa_r+0xaba>
 80089b4:	d1de      	bne.n	8008974 <_dtoa_r+0xa74>
 80089b6:	07da      	lsls	r2, r3, #31
 80089b8:	d5dc      	bpl.n	8008974 <_dtoa_r+0xa74>
 80089ba:	2b39      	cmp	r3, #57	; 0x39
 80089bc:	d1d8      	bne.n	8008970 <_dtoa_r+0xa70>
 80089be:	2339      	movs	r3, #57	; 0x39
 80089c0:	9a04      	ldr	r2, [sp, #16]
 80089c2:	7013      	strb	r3, [r2, #0]
 80089c4:	463b      	mov	r3, r7
 80089c6:	461f      	mov	r7, r3
 80089c8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 80089cc:	3b01      	subs	r3, #1
 80089ce:	2a39      	cmp	r2, #57	; 0x39
 80089d0:	d050      	beq.n	8008a74 <_dtoa_r+0xb74>
 80089d2:	3201      	adds	r2, #1
 80089d4:	701a      	strb	r2, [r3, #0]
 80089d6:	e747      	b.n	8008868 <_dtoa_r+0x968>
 80089d8:	2a00      	cmp	r2, #0
 80089da:	dd03      	ble.n	80089e4 <_dtoa_r+0xae4>
 80089dc:	2b39      	cmp	r3, #57	; 0x39
 80089de:	d0ee      	beq.n	80089be <_dtoa_r+0xabe>
 80089e0:	3301      	adds	r3, #1
 80089e2:	e7c7      	b.n	8008974 <_dtoa_r+0xa74>
 80089e4:	9a08      	ldr	r2, [sp, #32]
 80089e6:	990a      	ldr	r1, [sp, #40]	; 0x28
 80089e8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80089ec:	428a      	cmp	r2, r1
 80089ee:	d02a      	beq.n	8008a46 <_dtoa_r+0xb46>
 80089f0:	4659      	mov	r1, fp
 80089f2:	2300      	movs	r3, #0
 80089f4:	220a      	movs	r2, #10
 80089f6:	4628      	mov	r0, r5
 80089f8:	f000 f9c8 	bl	8008d8c <__multadd>
 80089fc:	45b0      	cmp	r8, r6
 80089fe:	4683      	mov	fp, r0
 8008a00:	f04f 0300 	mov.w	r3, #0
 8008a04:	f04f 020a 	mov.w	r2, #10
 8008a08:	4641      	mov	r1, r8
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	d107      	bne.n	8008a1e <_dtoa_r+0xb1e>
 8008a0e:	f000 f9bd 	bl	8008d8c <__multadd>
 8008a12:	4680      	mov	r8, r0
 8008a14:	4606      	mov	r6, r0
 8008a16:	9b08      	ldr	r3, [sp, #32]
 8008a18:	3301      	adds	r3, #1
 8008a1a:	9308      	str	r3, [sp, #32]
 8008a1c:	e775      	b.n	800890a <_dtoa_r+0xa0a>
 8008a1e:	f000 f9b5 	bl	8008d8c <__multadd>
 8008a22:	4631      	mov	r1, r6
 8008a24:	4680      	mov	r8, r0
 8008a26:	2300      	movs	r3, #0
 8008a28:	220a      	movs	r2, #10
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	f000 f9ae 	bl	8008d8c <__multadd>
 8008a30:	4606      	mov	r6, r0
 8008a32:	e7f0      	b.n	8008a16 <_dtoa_r+0xb16>
 8008a34:	f1b9 0f00 	cmp.w	r9, #0
 8008a38:	bfcc      	ite	gt
 8008a3a:	464f      	movgt	r7, r9
 8008a3c:	2701      	movle	r7, #1
 8008a3e:	f04f 0800 	mov.w	r8, #0
 8008a42:	9a03      	ldr	r2, [sp, #12]
 8008a44:	4417      	add	r7, r2
 8008a46:	4659      	mov	r1, fp
 8008a48:	2201      	movs	r2, #1
 8008a4a:	4628      	mov	r0, r5
 8008a4c:	9308      	str	r3, [sp, #32]
 8008a4e:	f000 fb49 	bl	80090e4 <__lshift>
 8008a52:	4621      	mov	r1, r4
 8008a54:	4683      	mov	fp, r0
 8008a56:	f000 fbb5 	bl	80091c4 <__mcmp>
 8008a5a:	2800      	cmp	r0, #0
 8008a5c:	dcb2      	bgt.n	80089c4 <_dtoa_r+0xac4>
 8008a5e:	d102      	bne.n	8008a66 <_dtoa_r+0xb66>
 8008a60:	9b08      	ldr	r3, [sp, #32]
 8008a62:	07db      	lsls	r3, r3, #31
 8008a64:	d4ae      	bmi.n	80089c4 <_dtoa_r+0xac4>
 8008a66:	463b      	mov	r3, r7
 8008a68:	461f      	mov	r7, r3
 8008a6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a6e:	2a30      	cmp	r2, #48	; 0x30
 8008a70:	d0fa      	beq.n	8008a68 <_dtoa_r+0xb68>
 8008a72:	e6f9      	b.n	8008868 <_dtoa_r+0x968>
 8008a74:	9a03      	ldr	r2, [sp, #12]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d1a5      	bne.n	80089c6 <_dtoa_r+0xac6>
 8008a7a:	2331      	movs	r3, #49	; 0x31
 8008a7c:	f10a 0a01 	add.w	sl, sl, #1
 8008a80:	e779      	b.n	8008976 <_dtoa_r+0xa76>
 8008a82:	4b14      	ldr	r3, [pc, #80]	; (8008ad4 <_dtoa_r+0xbd4>)
 8008a84:	f7ff baa8 	b.w	8007fd8 <_dtoa_r+0xd8>
 8008a88:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f47f aa81 	bne.w	8007f92 <_dtoa_r+0x92>
 8008a90:	4b11      	ldr	r3, [pc, #68]	; (8008ad8 <_dtoa_r+0xbd8>)
 8008a92:	f7ff baa1 	b.w	8007fd8 <_dtoa_r+0xd8>
 8008a96:	f1b9 0f00 	cmp.w	r9, #0
 8008a9a:	dc03      	bgt.n	8008aa4 <_dtoa_r+0xba4>
 8008a9c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a9e:	2b02      	cmp	r3, #2
 8008aa0:	f73f aecb 	bgt.w	800883a <_dtoa_r+0x93a>
 8008aa4:	9f03      	ldr	r7, [sp, #12]
 8008aa6:	4621      	mov	r1, r4
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	f7ff f99d 	bl	8007de8 <quorem>
 8008aae:	9a03      	ldr	r2, [sp, #12]
 8008ab0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008ab4:	f807 3b01 	strb.w	r3, [r7], #1
 8008ab8:	1aba      	subs	r2, r7, r2
 8008aba:	4591      	cmp	r9, r2
 8008abc:	ddba      	ble.n	8008a34 <_dtoa_r+0xb34>
 8008abe:	4659      	mov	r1, fp
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	220a      	movs	r2, #10
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f961 	bl	8008d8c <__multadd>
 8008aca:	4683      	mov	fp, r0
 8008acc:	e7eb      	b.n	8008aa6 <_dtoa_r+0xba6>
 8008ace:	bf00      	nop
 8008ad0:	08009ddb 	.word	0x08009ddb
 8008ad4:	08009d38 	.word	0x08009d38
 8008ad8:	08009d5c 	.word	0x08009d5c

08008adc <__sflush_r>:
 8008adc:	898a      	ldrh	r2, [r1, #12]
 8008ade:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ae0:	4605      	mov	r5, r0
 8008ae2:	0710      	lsls	r0, r2, #28
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	d457      	bmi.n	8008b98 <__sflush_r+0xbc>
 8008ae8:	684b      	ldr	r3, [r1, #4]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	dc04      	bgt.n	8008af8 <__sflush_r+0x1c>
 8008aee:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dc01      	bgt.n	8008af8 <__sflush_r+0x1c>
 8008af4:	2000      	movs	r0, #0
 8008af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afa:	2e00      	cmp	r6, #0
 8008afc:	d0fa      	beq.n	8008af4 <__sflush_r+0x18>
 8008afe:	2300      	movs	r3, #0
 8008b00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008b04:	682f      	ldr	r7, [r5, #0]
 8008b06:	602b      	str	r3, [r5, #0]
 8008b08:	d032      	beq.n	8008b70 <__sflush_r+0x94>
 8008b0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	075a      	lsls	r2, r3, #29
 8008b10:	d505      	bpl.n	8008b1e <__sflush_r+0x42>
 8008b12:	6863      	ldr	r3, [r4, #4]
 8008b14:	1ac0      	subs	r0, r0, r3
 8008b16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b18:	b10b      	cbz	r3, 8008b1e <__sflush_r+0x42>
 8008b1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b1c:	1ac0      	subs	r0, r0, r3
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4602      	mov	r2, r0
 8008b22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b24:	4628      	mov	r0, r5
 8008b26:	6a21      	ldr	r1, [r4, #32]
 8008b28:	47b0      	blx	r6
 8008b2a:	1c43      	adds	r3, r0, #1
 8008b2c:	89a3      	ldrh	r3, [r4, #12]
 8008b2e:	d106      	bne.n	8008b3e <__sflush_r+0x62>
 8008b30:	6829      	ldr	r1, [r5, #0]
 8008b32:	291d      	cmp	r1, #29
 8008b34:	d82c      	bhi.n	8008b90 <__sflush_r+0xb4>
 8008b36:	4a29      	ldr	r2, [pc, #164]	; (8008bdc <__sflush_r+0x100>)
 8008b38:	40ca      	lsrs	r2, r1
 8008b3a:	07d6      	lsls	r6, r2, #31
 8008b3c:	d528      	bpl.n	8008b90 <__sflush_r+0xb4>
 8008b3e:	2200      	movs	r2, #0
 8008b40:	6062      	str	r2, [r4, #4]
 8008b42:	6922      	ldr	r2, [r4, #16]
 8008b44:	04d9      	lsls	r1, r3, #19
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	d504      	bpl.n	8008b54 <__sflush_r+0x78>
 8008b4a:	1c42      	adds	r2, r0, #1
 8008b4c:	d101      	bne.n	8008b52 <__sflush_r+0x76>
 8008b4e:	682b      	ldr	r3, [r5, #0]
 8008b50:	b903      	cbnz	r3, 8008b54 <__sflush_r+0x78>
 8008b52:	6560      	str	r0, [r4, #84]	; 0x54
 8008b54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b56:	602f      	str	r7, [r5, #0]
 8008b58:	2900      	cmp	r1, #0
 8008b5a:	d0cb      	beq.n	8008af4 <__sflush_r+0x18>
 8008b5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b60:	4299      	cmp	r1, r3
 8008b62:	d002      	beq.n	8008b6a <__sflush_r+0x8e>
 8008b64:	4628      	mov	r0, r5
 8008b66:	f000 fc45 	bl	80093f4 <_free_r>
 8008b6a:	2000      	movs	r0, #0
 8008b6c:	6360      	str	r0, [r4, #52]	; 0x34
 8008b6e:	e7c2      	b.n	8008af6 <__sflush_r+0x1a>
 8008b70:	6a21      	ldr	r1, [r4, #32]
 8008b72:	2301      	movs	r3, #1
 8008b74:	4628      	mov	r0, r5
 8008b76:	47b0      	blx	r6
 8008b78:	1c41      	adds	r1, r0, #1
 8008b7a:	d1c7      	bne.n	8008b0c <__sflush_r+0x30>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c4      	beq.n	8008b0c <__sflush_r+0x30>
 8008b82:	2b1d      	cmp	r3, #29
 8008b84:	d001      	beq.n	8008b8a <__sflush_r+0xae>
 8008b86:	2b16      	cmp	r3, #22
 8008b88:	d101      	bne.n	8008b8e <__sflush_r+0xb2>
 8008b8a:	602f      	str	r7, [r5, #0]
 8008b8c:	e7b2      	b.n	8008af4 <__sflush_r+0x18>
 8008b8e:	89a3      	ldrh	r3, [r4, #12]
 8008b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b94:	81a3      	strh	r3, [r4, #12]
 8008b96:	e7ae      	b.n	8008af6 <__sflush_r+0x1a>
 8008b98:	690f      	ldr	r7, [r1, #16]
 8008b9a:	2f00      	cmp	r7, #0
 8008b9c:	d0aa      	beq.n	8008af4 <__sflush_r+0x18>
 8008b9e:	0793      	lsls	r3, r2, #30
 8008ba0:	bf18      	it	ne
 8008ba2:	2300      	movne	r3, #0
 8008ba4:	680e      	ldr	r6, [r1, #0]
 8008ba6:	bf08      	it	eq
 8008ba8:	694b      	ldreq	r3, [r1, #20]
 8008baa:	1bf6      	subs	r6, r6, r7
 8008bac:	600f      	str	r7, [r1, #0]
 8008bae:	608b      	str	r3, [r1, #8]
 8008bb0:	2e00      	cmp	r6, #0
 8008bb2:	dd9f      	ble.n	8008af4 <__sflush_r+0x18>
 8008bb4:	4633      	mov	r3, r6
 8008bb6:	463a      	mov	r2, r7
 8008bb8:	4628      	mov	r0, r5
 8008bba:	6a21      	ldr	r1, [r4, #32]
 8008bbc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008bc0:	47e0      	blx	ip
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	dc06      	bgt.n	8008bd4 <__sflush_r+0xf8>
 8008bc6:	89a3      	ldrh	r3, [r4, #12]
 8008bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bd0:	81a3      	strh	r3, [r4, #12]
 8008bd2:	e790      	b.n	8008af6 <__sflush_r+0x1a>
 8008bd4:	4407      	add	r7, r0
 8008bd6:	1a36      	subs	r6, r6, r0
 8008bd8:	e7ea      	b.n	8008bb0 <__sflush_r+0xd4>
 8008bda:	bf00      	nop
 8008bdc:	20400001 	.word	0x20400001

08008be0 <_fflush_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	690b      	ldr	r3, [r1, #16]
 8008be4:	4605      	mov	r5, r0
 8008be6:	460c      	mov	r4, r1
 8008be8:	b913      	cbnz	r3, 8008bf0 <_fflush_r+0x10>
 8008bea:	2500      	movs	r5, #0
 8008bec:	4628      	mov	r0, r5
 8008bee:	bd38      	pop	{r3, r4, r5, pc}
 8008bf0:	b118      	cbz	r0, 8008bfa <_fflush_r+0x1a>
 8008bf2:	6983      	ldr	r3, [r0, #24]
 8008bf4:	b90b      	cbnz	r3, 8008bfa <_fflush_r+0x1a>
 8008bf6:	f7fe fa2f 	bl	8007058 <__sinit>
 8008bfa:	4b14      	ldr	r3, [pc, #80]	; (8008c4c <_fflush_r+0x6c>)
 8008bfc:	429c      	cmp	r4, r3
 8008bfe:	d11b      	bne.n	8008c38 <_fflush_r+0x58>
 8008c00:	686c      	ldr	r4, [r5, #4]
 8008c02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0ef      	beq.n	8008bea <_fflush_r+0xa>
 8008c0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008c0c:	07d0      	lsls	r0, r2, #31
 8008c0e:	d404      	bmi.n	8008c1a <_fflush_r+0x3a>
 8008c10:	0599      	lsls	r1, r3, #22
 8008c12:	d402      	bmi.n	8008c1a <_fflush_r+0x3a>
 8008c14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c16:	f7fe fae2 	bl	80071de <__retarget_lock_acquire_recursive>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	4621      	mov	r1, r4
 8008c1e:	f7ff ff5d 	bl	8008adc <__sflush_r>
 8008c22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c24:	4605      	mov	r5, r0
 8008c26:	07da      	lsls	r2, r3, #31
 8008c28:	d4e0      	bmi.n	8008bec <_fflush_r+0xc>
 8008c2a:	89a3      	ldrh	r3, [r4, #12]
 8008c2c:	059b      	lsls	r3, r3, #22
 8008c2e:	d4dd      	bmi.n	8008bec <_fflush_r+0xc>
 8008c30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c32:	f7fe fad5 	bl	80071e0 <__retarget_lock_release_recursive>
 8008c36:	e7d9      	b.n	8008bec <_fflush_r+0xc>
 8008c38:	4b05      	ldr	r3, [pc, #20]	; (8008c50 <_fflush_r+0x70>)
 8008c3a:	429c      	cmp	r4, r3
 8008c3c:	d101      	bne.n	8008c42 <_fflush_r+0x62>
 8008c3e:	68ac      	ldr	r4, [r5, #8]
 8008c40:	e7df      	b.n	8008c02 <_fflush_r+0x22>
 8008c42:	4b04      	ldr	r3, [pc, #16]	; (8008c54 <_fflush_r+0x74>)
 8008c44:	429c      	cmp	r4, r3
 8008c46:	bf08      	it	eq
 8008c48:	68ec      	ldreq	r4, [r5, #12]
 8008c4a:	e7da      	b.n	8008c02 <_fflush_r+0x22>
 8008c4c:	08009ce4 	.word	0x08009ce4
 8008c50:	08009d04 	.word	0x08009d04
 8008c54:	08009cc4 	.word	0x08009cc4

08008c58 <_localeconv_r>:
 8008c58:	4800      	ldr	r0, [pc, #0]	; (8008c5c <_localeconv_r+0x4>)
 8008c5a:	4770      	bx	lr
 8008c5c:	20000164 	.word	0x20000164

08008c60 <_lseek_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	4604      	mov	r4, r0
 8008c64:	4608      	mov	r0, r1
 8008c66:	4611      	mov	r1, r2
 8008c68:	2200      	movs	r2, #0
 8008c6a:	4d05      	ldr	r5, [pc, #20]	; (8008c80 <_lseek_r+0x20>)
 8008c6c:	602a      	str	r2, [r5, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	f7f8 fdea 	bl	8001848 <_lseek>
 8008c74:	1c43      	adds	r3, r0, #1
 8008c76:	d102      	bne.n	8008c7e <_lseek_r+0x1e>
 8008c78:	682b      	ldr	r3, [r5, #0]
 8008c7a:	b103      	cbz	r3, 8008c7e <_lseek_r+0x1e>
 8008c7c:	6023      	str	r3, [r4, #0]
 8008c7e:	bd38      	pop	{r3, r4, r5, pc}
 8008c80:	20001d4c 	.word	0x20001d4c

08008c84 <malloc>:
 8008c84:	4b02      	ldr	r3, [pc, #8]	; (8008c90 <malloc+0xc>)
 8008c86:	4601      	mov	r1, r0
 8008c88:	6818      	ldr	r0, [r3, #0]
 8008c8a:	f7fe bae1 	b.w	8007250 <_malloc_r>
 8008c8e:	bf00      	nop
 8008c90:	20000010 	.word	0x20000010

08008c94 <memchr>:
 8008c94:	4603      	mov	r3, r0
 8008c96:	b510      	push	{r4, lr}
 8008c98:	b2c9      	uxtb	r1, r1
 8008c9a:	4402      	add	r2, r0
 8008c9c:	4293      	cmp	r3, r2
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	d101      	bne.n	8008ca6 <memchr+0x12>
 8008ca2:	2000      	movs	r0, #0
 8008ca4:	e003      	b.n	8008cae <memchr+0x1a>
 8008ca6:	7804      	ldrb	r4, [r0, #0]
 8008ca8:	3301      	adds	r3, #1
 8008caa:	428c      	cmp	r4, r1
 8008cac:	d1f6      	bne.n	8008c9c <memchr+0x8>
 8008cae:	bd10      	pop	{r4, pc}

08008cb0 <__malloc_lock>:
 8008cb0:	4801      	ldr	r0, [pc, #4]	; (8008cb8 <__malloc_lock+0x8>)
 8008cb2:	f7fe ba94 	b.w	80071de <__retarget_lock_acquire_recursive>
 8008cb6:	bf00      	nop
 8008cb8:	20001d40 	.word	0x20001d40

08008cbc <__malloc_unlock>:
 8008cbc:	4801      	ldr	r0, [pc, #4]	; (8008cc4 <__malloc_unlock+0x8>)
 8008cbe:	f7fe ba8f 	b.w	80071e0 <__retarget_lock_release_recursive>
 8008cc2:	bf00      	nop
 8008cc4:	20001d40 	.word	0x20001d40

08008cc8 <_Balloc>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ccc:	4604      	mov	r4, r0
 8008cce:	460d      	mov	r5, r1
 8008cd0:	b976      	cbnz	r6, 8008cf0 <_Balloc+0x28>
 8008cd2:	2010      	movs	r0, #16
 8008cd4:	f7ff ffd6 	bl	8008c84 <malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6260      	str	r0, [r4, #36]	; 0x24
 8008cdc:	b920      	cbnz	r0, 8008ce8 <_Balloc+0x20>
 8008cde:	2166      	movs	r1, #102	; 0x66
 8008ce0:	4b17      	ldr	r3, [pc, #92]	; (8008d40 <_Balloc+0x78>)
 8008ce2:	4818      	ldr	r0, [pc, #96]	; (8008d44 <_Balloc+0x7c>)
 8008ce4:	f000 fdf8 	bl	80098d8 <__assert_func>
 8008ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cec:	6006      	str	r6, [r0, #0]
 8008cee:	60c6      	str	r6, [r0, #12]
 8008cf0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008cf2:	68f3      	ldr	r3, [r6, #12]
 8008cf4:	b183      	cbz	r3, 8008d18 <_Balloc+0x50>
 8008cf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008cfe:	b9b8      	cbnz	r0, 8008d30 <_Balloc+0x68>
 8008d00:	2101      	movs	r1, #1
 8008d02:	fa01 f605 	lsl.w	r6, r1, r5
 8008d06:	1d72      	adds	r2, r6, #5
 8008d08:	4620      	mov	r0, r4
 8008d0a:	0092      	lsls	r2, r2, #2
 8008d0c:	f000 fb5e 	bl	80093cc <_calloc_r>
 8008d10:	b160      	cbz	r0, 8008d2c <_Balloc+0x64>
 8008d12:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d16:	e00e      	b.n	8008d36 <_Balloc+0x6e>
 8008d18:	2221      	movs	r2, #33	; 0x21
 8008d1a:	2104      	movs	r1, #4
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fb55 	bl	80093cc <_calloc_r>
 8008d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d24:	60f0      	str	r0, [r6, #12]
 8008d26:	68db      	ldr	r3, [r3, #12]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d1e4      	bne.n	8008cf6 <_Balloc+0x2e>
 8008d2c:	2000      	movs	r0, #0
 8008d2e:	bd70      	pop	{r4, r5, r6, pc}
 8008d30:	6802      	ldr	r2, [r0, #0]
 8008d32:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d36:	2300      	movs	r3, #0
 8008d38:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d3c:	e7f7      	b.n	8008d2e <_Balloc+0x66>
 8008d3e:	bf00      	nop
 8008d40:	08009d69 	.word	0x08009d69
 8008d44:	08009dec 	.word	0x08009dec

08008d48 <_Bfree>:
 8008d48:	b570      	push	{r4, r5, r6, lr}
 8008d4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	460c      	mov	r4, r1
 8008d50:	b976      	cbnz	r6, 8008d70 <_Bfree+0x28>
 8008d52:	2010      	movs	r0, #16
 8008d54:	f7ff ff96 	bl	8008c84 <malloc>
 8008d58:	4602      	mov	r2, r0
 8008d5a:	6268      	str	r0, [r5, #36]	; 0x24
 8008d5c:	b920      	cbnz	r0, 8008d68 <_Bfree+0x20>
 8008d5e:	218a      	movs	r1, #138	; 0x8a
 8008d60:	4b08      	ldr	r3, [pc, #32]	; (8008d84 <_Bfree+0x3c>)
 8008d62:	4809      	ldr	r0, [pc, #36]	; (8008d88 <_Bfree+0x40>)
 8008d64:	f000 fdb8 	bl	80098d8 <__assert_func>
 8008d68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d6c:	6006      	str	r6, [r0, #0]
 8008d6e:	60c6      	str	r6, [r0, #12]
 8008d70:	b13c      	cbz	r4, 8008d82 <_Bfree+0x3a>
 8008d72:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008d74:	6862      	ldr	r2, [r4, #4]
 8008d76:	68db      	ldr	r3, [r3, #12]
 8008d78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008d7c:	6021      	str	r1, [r4, #0]
 8008d7e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d82:	bd70      	pop	{r4, r5, r6, pc}
 8008d84:	08009d69 	.word	0x08009d69
 8008d88:	08009dec 	.word	0x08009dec

08008d8c <__multadd>:
 8008d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d90:	4607      	mov	r7, r0
 8008d92:	460c      	mov	r4, r1
 8008d94:	461e      	mov	r6, r3
 8008d96:	2000      	movs	r0, #0
 8008d98:	690d      	ldr	r5, [r1, #16]
 8008d9a:	f101 0c14 	add.w	ip, r1, #20
 8008d9e:	f8dc 3000 	ldr.w	r3, [ip]
 8008da2:	3001      	adds	r0, #1
 8008da4:	b299      	uxth	r1, r3
 8008da6:	fb02 6101 	mla	r1, r2, r1, r6
 8008daa:	0c1e      	lsrs	r6, r3, #16
 8008dac:	0c0b      	lsrs	r3, r1, #16
 8008dae:	fb02 3306 	mla	r3, r2, r6, r3
 8008db2:	b289      	uxth	r1, r1
 8008db4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008db8:	4285      	cmp	r5, r0
 8008dba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008dbe:	f84c 1b04 	str.w	r1, [ip], #4
 8008dc2:	dcec      	bgt.n	8008d9e <__multadd+0x12>
 8008dc4:	b30e      	cbz	r6, 8008e0a <__multadd+0x7e>
 8008dc6:	68a3      	ldr	r3, [r4, #8]
 8008dc8:	42ab      	cmp	r3, r5
 8008dca:	dc19      	bgt.n	8008e00 <__multadd+0x74>
 8008dcc:	6861      	ldr	r1, [r4, #4]
 8008dce:	4638      	mov	r0, r7
 8008dd0:	3101      	adds	r1, #1
 8008dd2:	f7ff ff79 	bl	8008cc8 <_Balloc>
 8008dd6:	4680      	mov	r8, r0
 8008dd8:	b928      	cbnz	r0, 8008de6 <__multadd+0x5a>
 8008dda:	4602      	mov	r2, r0
 8008ddc:	21b5      	movs	r1, #181	; 0xb5
 8008dde:	4b0c      	ldr	r3, [pc, #48]	; (8008e10 <__multadd+0x84>)
 8008de0:	480c      	ldr	r0, [pc, #48]	; (8008e14 <__multadd+0x88>)
 8008de2:	f000 fd79 	bl	80098d8 <__assert_func>
 8008de6:	6922      	ldr	r2, [r4, #16]
 8008de8:	f104 010c 	add.w	r1, r4, #12
 8008dec:	3202      	adds	r2, #2
 8008dee:	0092      	lsls	r2, r2, #2
 8008df0:	300c      	adds	r0, #12
 8008df2:	f7fe f9f6 	bl	80071e2 <memcpy>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4638      	mov	r0, r7
 8008dfa:	f7ff ffa5 	bl	8008d48 <_Bfree>
 8008dfe:	4644      	mov	r4, r8
 8008e00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e04:	3501      	adds	r5, #1
 8008e06:	615e      	str	r6, [r3, #20]
 8008e08:	6125      	str	r5, [r4, #16]
 8008e0a:	4620      	mov	r0, r4
 8008e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e10:	08009ddb 	.word	0x08009ddb
 8008e14:	08009dec 	.word	0x08009dec

08008e18 <__hi0bits>:
 8008e18:	0c02      	lsrs	r2, r0, #16
 8008e1a:	0412      	lsls	r2, r2, #16
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	b9ca      	cbnz	r2, 8008e54 <__hi0bits+0x3c>
 8008e20:	0403      	lsls	r3, r0, #16
 8008e22:	2010      	movs	r0, #16
 8008e24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008e28:	bf04      	itt	eq
 8008e2a:	021b      	lsleq	r3, r3, #8
 8008e2c:	3008      	addeq	r0, #8
 8008e2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008e32:	bf04      	itt	eq
 8008e34:	011b      	lsleq	r3, r3, #4
 8008e36:	3004      	addeq	r0, #4
 8008e38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008e3c:	bf04      	itt	eq
 8008e3e:	009b      	lsleq	r3, r3, #2
 8008e40:	3002      	addeq	r0, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	db05      	blt.n	8008e52 <__hi0bits+0x3a>
 8008e46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008e4a:	f100 0001 	add.w	r0, r0, #1
 8008e4e:	bf08      	it	eq
 8008e50:	2020      	moveq	r0, #32
 8008e52:	4770      	bx	lr
 8008e54:	2000      	movs	r0, #0
 8008e56:	e7e5      	b.n	8008e24 <__hi0bits+0xc>

08008e58 <__lo0bits>:
 8008e58:	6803      	ldr	r3, [r0, #0]
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	f013 0007 	ands.w	r0, r3, #7
 8008e60:	d00b      	beq.n	8008e7a <__lo0bits+0x22>
 8008e62:	07d9      	lsls	r1, r3, #31
 8008e64:	d421      	bmi.n	8008eaa <__lo0bits+0x52>
 8008e66:	0798      	lsls	r0, r3, #30
 8008e68:	bf49      	itett	mi
 8008e6a:	085b      	lsrmi	r3, r3, #1
 8008e6c:	089b      	lsrpl	r3, r3, #2
 8008e6e:	2001      	movmi	r0, #1
 8008e70:	6013      	strmi	r3, [r2, #0]
 8008e72:	bf5c      	itt	pl
 8008e74:	2002      	movpl	r0, #2
 8008e76:	6013      	strpl	r3, [r2, #0]
 8008e78:	4770      	bx	lr
 8008e7a:	b299      	uxth	r1, r3
 8008e7c:	b909      	cbnz	r1, 8008e82 <__lo0bits+0x2a>
 8008e7e:	2010      	movs	r0, #16
 8008e80:	0c1b      	lsrs	r3, r3, #16
 8008e82:	b2d9      	uxtb	r1, r3
 8008e84:	b909      	cbnz	r1, 8008e8a <__lo0bits+0x32>
 8008e86:	3008      	adds	r0, #8
 8008e88:	0a1b      	lsrs	r3, r3, #8
 8008e8a:	0719      	lsls	r1, r3, #28
 8008e8c:	bf04      	itt	eq
 8008e8e:	091b      	lsreq	r3, r3, #4
 8008e90:	3004      	addeq	r0, #4
 8008e92:	0799      	lsls	r1, r3, #30
 8008e94:	bf04      	itt	eq
 8008e96:	089b      	lsreq	r3, r3, #2
 8008e98:	3002      	addeq	r0, #2
 8008e9a:	07d9      	lsls	r1, r3, #31
 8008e9c:	d403      	bmi.n	8008ea6 <__lo0bits+0x4e>
 8008e9e:	085b      	lsrs	r3, r3, #1
 8008ea0:	f100 0001 	add.w	r0, r0, #1
 8008ea4:	d003      	beq.n	8008eae <__lo0bits+0x56>
 8008ea6:	6013      	str	r3, [r2, #0]
 8008ea8:	4770      	bx	lr
 8008eaa:	2000      	movs	r0, #0
 8008eac:	4770      	bx	lr
 8008eae:	2020      	movs	r0, #32
 8008eb0:	4770      	bx	lr
	...

08008eb4 <__i2b>:
 8008eb4:	b510      	push	{r4, lr}
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	2101      	movs	r1, #1
 8008eba:	f7ff ff05 	bl	8008cc8 <_Balloc>
 8008ebe:	4602      	mov	r2, r0
 8008ec0:	b928      	cbnz	r0, 8008ece <__i2b+0x1a>
 8008ec2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008ec6:	4b04      	ldr	r3, [pc, #16]	; (8008ed8 <__i2b+0x24>)
 8008ec8:	4804      	ldr	r0, [pc, #16]	; (8008edc <__i2b+0x28>)
 8008eca:	f000 fd05 	bl	80098d8 <__assert_func>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	6144      	str	r4, [r0, #20]
 8008ed2:	6103      	str	r3, [r0, #16]
 8008ed4:	bd10      	pop	{r4, pc}
 8008ed6:	bf00      	nop
 8008ed8:	08009ddb 	.word	0x08009ddb
 8008edc:	08009dec 	.word	0x08009dec

08008ee0 <__multiply>:
 8008ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ee4:	4691      	mov	r9, r2
 8008ee6:	690a      	ldr	r2, [r1, #16]
 8008ee8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008eec:	460c      	mov	r4, r1
 8008eee:	429a      	cmp	r2, r3
 8008ef0:	bfbe      	ittt	lt
 8008ef2:	460b      	movlt	r3, r1
 8008ef4:	464c      	movlt	r4, r9
 8008ef6:	4699      	movlt	r9, r3
 8008ef8:	6927      	ldr	r7, [r4, #16]
 8008efa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008efe:	68a3      	ldr	r3, [r4, #8]
 8008f00:	6861      	ldr	r1, [r4, #4]
 8008f02:	eb07 060a 	add.w	r6, r7, sl
 8008f06:	42b3      	cmp	r3, r6
 8008f08:	b085      	sub	sp, #20
 8008f0a:	bfb8      	it	lt
 8008f0c:	3101      	addlt	r1, #1
 8008f0e:	f7ff fedb 	bl	8008cc8 <_Balloc>
 8008f12:	b930      	cbnz	r0, 8008f22 <__multiply+0x42>
 8008f14:	4602      	mov	r2, r0
 8008f16:	f240 115d 	movw	r1, #349	; 0x15d
 8008f1a:	4b43      	ldr	r3, [pc, #268]	; (8009028 <__multiply+0x148>)
 8008f1c:	4843      	ldr	r0, [pc, #268]	; (800902c <__multiply+0x14c>)
 8008f1e:	f000 fcdb 	bl	80098d8 <__assert_func>
 8008f22:	f100 0514 	add.w	r5, r0, #20
 8008f26:	462b      	mov	r3, r5
 8008f28:	2200      	movs	r2, #0
 8008f2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008f2e:	4543      	cmp	r3, r8
 8008f30:	d321      	bcc.n	8008f76 <__multiply+0x96>
 8008f32:	f104 0314 	add.w	r3, r4, #20
 8008f36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008f3a:	f109 0314 	add.w	r3, r9, #20
 8008f3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008f42:	9202      	str	r2, [sp, #8]
 8008f44:	1b3a      	subs	r2, r7, r4
 8008f46:	3a15      	subs	r2, #21
 8008f48:	f022 0203 	bic.w	r2, r2, #3
 8008f4c:	3204      	adds	r2, #4
 8008f4e:	f104 0115 	add.w	r1, r4, #21
 8008f52:	428f      	cmp	r7, r1
 8008f54:	bf38      	it	cc
 8008f56:	2204      	movcc	r2, #4
 8008f58:	9201      	str	r2, [sp, #4]
 8008f5a:	9a02      	ldr	r2, [sp, #8]
 8008f5c:	9303      	str	r3, [sp, #12]
 8008f5e:	429a      	cmp	r2, r3
 8008f60:	d80c      	bhi.n	8008f7c <__multiply+0x9c>
 8008f62:	2e00      	cmp	r6, #0
 8008f64:	dd03      	ble.n	8008f6e <__multiply+0x8e>
 8008f66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d059      	beq.n	8009022 <__multiply+0x142>
 8008f6e:	6106      	str	r6, [r0, #16]
 8008f70:	b005      	add	sp, #20
 8008f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f76:	f843 2b04 	str.w	r2, [r3], #4
 8008f7a:	e7d8      	b.n	8008f2e <__multiply+0x4e>
 8008f7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f80:	f1ba 0f00 	cmp.w	sl, #0
 8008f84:	d023      	beq.n	8008fce <__multiply+0xee>
 8008f86:	46a9      	mov	r9, r5
 8008f88:	f04f 0c00 	mov.w	ip, #0
 8008f8c:	f104 0e14 	add.w	lr, r4, #20
 8008f90:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f94:	f8d9 1000 	ldr.w	r1, [r9]
 8008f98:	fa1f fb82 	uxth.w	fp, r2
 8008f9c:	b289      	uxth	r1, r1
 8008f9e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008fa2:	4461      	add	r1, ip
 8008fa4:	f8d9 c000 	ldr.w	ip, [r9]
 8008fa8:	0c12      	lsrs	r2, r2, #16
 8008faa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008fae:	fb0a c202 	mla	r2, sl, r2, ip
 8008fb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008fb6:	b289      	uxth	r1, r1
 8008fb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008fbc:	4577      	cmp	r7, lr
 8008fbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008fc2:	f849 1b04 	str.w	r1, [r9], #4
 8008fc6:	d8e3      	bhi.n	8008f90 <__multiply+0xb0>
 8008fc8:	9a01      	ldr	r2, [sp, #4]
 8008fca:	f845 c002 	str.w	ip, [r5, r2]
 8008fce:	9a03      	ldr	r2, [sp, #12]
 8008fd0:	3304      	adds	r3, #4
 8008fd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008fd6:	f1b9 0f00 	cmp.w	r9, #0
 8008fda:	d020      	beq.n	800901e <__multiply+0x13e>
 8008fdc:	46ae      	mov	lr, r5
 8008fde:	f04f 0a00 	mov.w	sl, #0
 8008fe2:	6829      	ldr	r1, [r5, #0]
 8008fe4:	f104 0c14 	add.w	ip, r4, #20
 8008fe8:	f8bc b000 	ldrh.w	fp, [ip]
 8008fec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008ff0:	b289      	uxth	r1, r1
 8008ff2:	fb09 220b 	mla	r2, r9, fp, r2
 8008ff6:	4492      	add	sl, r2
 8008ff8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008ffc:	f84e 1b04 	str.w	r1, [lr], #4
 8009000:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009004:	f8be 1000 	ldrh.w	r1, [lr]
 8009008:	0c12      	lsrs	r2, r2, #16
 800900a:	fb09 1102 	mla	r1, r9, r2, r1
 800900e:	4567      	cmp	r7, ip
 8009010:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009014:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009018:	d8e6      	bhi.n	8008fe8 <__multiply+0x108>
 800901a:	9a01      	ldr	r2, [sp, #4]
 800901c:	50a9      	str	r1, [r5, r2]
 800901e:	3504      	adds	r5, #4
 8009020:	e79b      	b.n	8008f5a <__multiply+0x7a>
 8009022:	3e01      	subs	r6, #1
 8009024:	e79d      	b.n	8008f62 <__multiply+0x82>
 8009026:	bf00      	nop
 8009028:	08009ddb 	.word	0x08009ddb
 800902c:	08009dec 	.word	0x08009dec

08009030 <__pow5mult>:
 8009030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009034:	4615      	mov	r5, r2
 8009036:	f012 0203 	ands.w	r2, r2, #3
 800903a:	4606      	mov	r6, r0
 800903c:	460f      	mov	r7, r1
 800903e:	d007      	beq.n	8009050 <__pow5mult+0x20>
 8009040:	4c25      	ldr	r4, [pc, #148]	; (80090d8 <__pow5mult+0xa8>)
 8009042:	3a01      	subs	r2, #1
 8009044:	2300      	movs	r3, #0
 8009046:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800904a:	f7ff fe9f 	bl	8008d8c <__multadd>
 800904e:	4607      	mov	r7, r0
 8009050:	10ad      	asrs	r5, r5, #2
 8009052:	d03d      	beq.n	80090d0 <__pow5mult+0xa0>
 8009054:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009056:	b97c      	cbnz	r4, 8009078 <__pow5mult+0x48>
 8009058:	2010      	movs	r0, #16
 800905a:	f7ff fe13 	bl	8008c84 <malloc>
 800905e:	4602      	mov	r2, r0
 8009060:	6270      	str	r0, [r6, #36]	; 0x24
 8009062:	b928      	cbnz	r0, 8009070 <__pow5mult+0x40>
 8009064:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009068:	4b1c      	ldr	r3, [pc, #112]	; (80090dc <__pow5mult+0xac>)
 800906a:	481d      	ldr	r0, [pc, #116]	; (80090e0 <__pow5mult+0xb0>)
 800906c:	f000 fc34 	bl	80098d8 <__assert_func>
 8009070:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009074:	6004      	str	r4, [r0, #0]
 8009076:	60c4      	str	r4, [r0, #12]
 8009078:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800907c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009080:	b94c      	cbnz	r4, 8009096 <__pow5mult+0x66>
 8009082:	f240 2171 	movw	r1, #625	; 0x271
 8009086:	4630      	mov	r0, r6
 8009088:	f7ff ff14 	bl	8008eb4 <__i2b>
 800908c:	2300      	movs	r3, #0
 800908e:	4604      	mov	r4, r0
 8009090:	f8c8 0008 	str.w	r0, [r8, #8]
 8009094:	6003      	str	r3, [r0, #0]
 8009096:	f04f 0900 	mov.w	r9, #0
 800909a:	07eb      	lsls	r3, r5, #31
 800909c:	d50a      	bpl.n	80090b4 <__pow5mult+0x84>
 800909e:	4639      	mov	r1, r7
 80090a0:	4622      	mov	r2, r4
 80090a2:	4630      	mov	r0, r6
 80090a4:	f7ff ff1c 	bl	8008ee0 <__multiply>
 80090a8:	4680      	mov	r8, r0
 80090aa:	4639      	mov	r1, r7
 80090ac:	4630      	mov	r0, r6
 80090ae:	f7ff fe4b 	bl	8008d48 <_Bfree>
 80090b2:	4647      	mov	r7, r8
 80090b4:	106d      	asrs	r5, r5, #1
 80090b6:	d00b      	beq.n	80090d0 <__pow5mult+0xa0>
 80090b8:	6820      	ldr	r0, [r4, #0]
 80090ba:	b938      	cbnz	r0, 80090cc <__pow5mult+0x9c>
 80090bc:	4622      	mov	r2, r4
 80090be:	4621      	mov	r1, r4
 80090c0:	4630      	mov	r0, r6
 80090c2:	f7ff ff0d 	bl	8008ee0 <__multiply>
 80090c6:	6020      	str	r0, [r4, #0]
 80090c8:	f8c0 9000 	str.w	r9, [r0]
 80090cc:	4604      	mov	r4, r0
 80090ce:	e7e4      	b.n	800909a <__pow5mult+0x6a>
 80090d0:	4638      	mov	r0, r7
 80090d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090d6:	bf00      	nop
 80090d8:	08009f38 	.word	0x08009f38
 80090dc:	08009d69 	.word	0x08009d69
 80090e0:	08009dec 	.word	0x08009dec

080090e4 <__lshift>:
 80090e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090e8:	460c      	mov	r4, r1
 80090ea:	4607      	mov	r7, r0
 80090ec:	4691      	mov	r9, r2
 80090ee:	6923      	ldr	r3, [r4, #16]
 80090f0:	6849      	ldr	r1, [r1, #4]
 80090f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80090f6:	68a3      	ldr	r3, [r4, #8]
 80090f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80090fc:	f108 0601 	add.w	r6, r8, #1
 8009100:	42b3      	cmp	r3, r6
 8009102:	db0b      	blt.n	800911c <__lshift+0x38>
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff fddf 	bl	8008cc8 <_Balloc>
 800910a:	4605      	mov	r5, r0
 800910c:	b948      	cbnz	r0, 8009122 <__lshift+0x3e>
 800910e:	4602      	mov	r2, r0
 8009110:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009114:	4b29      	ldr	r3, [pc, #164]	; (80091bc <__lshift+0xd8>)
 8009116:	482a      	ldr	r0, [pc, #168]	; (80091c0 <__lshift+0xdc>)
 8009118:	f000 fbde 	bl	80098d8 <__assert_func>
 800911c:	3101      	adds	r1, #1
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	e7ee      	b.n	8009100 <__lshift+0x1c>
 8009122:	2300      	movs	r3, #0
 8009124:	f100 0114 	add.w	r1, r0, #20
 8009128:	f100 0210 	add.w	r2, r0, #16
 800912c:	4618      	mov	r0, r3
 800912e:	4553      	cmp	r3, sl
 8009130:	db37      	blt.n	80091a2 <__lshift+0xbe>
 8009132:	6920      	ldr	r0, [r4, #16]
 8009134:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009138:	f104 0314 	add.w	r3, r4, #20
 800913c:	f019 091f 	ands.w	r9, r9, #31
 8009140:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009144:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009148:	d02f      	beq.n	80091aa <__lshift+0xc6>
 800914a:	468a      	mov	sl, r1
 800914c:	f04f 0c00 	mov.w	ip, #0
 8009150:	f1c9 0e20 	rsb	lr, r9, #32
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	fa02 f209 	lsl.w	r2, r2, r9
 800915a:	ea42 020c 	orr.w	r2, r2, ip
 800915e:	f84a 2b04 	str.w	r2, [sl], #4
 8009162:	f853 2b04 	ldr.w	r2, [r3], #4
 8009166:	4298      	cmp	r0, r3
 8009168:	fa22 fc0e 	lsr.w	ip, r2, lr
 800916c:	d8f2      	bhi.n	8009154 <__lshift+0x70>
 800916e:	1b03      	subs	r3, r0, r4
 8009170:	3b15      	subs	r3, #21
 8009172:	f023 0303 	bic.w	r3, r3, #3
 8009176:	3304      	adds	r3, #4
 8009178:	f104 0215 	add.w	r2, r4, #21
 800917c:	4290      	cmp	r0, r2
 800917e:	bf38      	it	cc
 8009180:	2304      	movcc	r3, #4
 8009182:	f841 c003 	str.w	ip, [r1, r3]
 8009186:	f1bc 0f00 	cmp.w	ip, #0
 800918a:	d001      	beq.n	8009190 <__lshift+0xac>
 800918c:	f108 0602 	add.w	r6, r8, #2
 8009190:	3e01      	subs	r6, #1
 8009192:	4638      	mov	r0, r7
 8009194:	4621      	mov	r1, r4
 8009196:	612e      	str	r6, [r5, #16]
 8009198:	f7ff fdd6 	bl	8008d48 <_Bfree>
 800919c:	4628      	mov	r0, r5
 800919e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80091a6:	3301      	adds	r3, #1
 80091a8:	e7c1      	b.n	800912e <__lshift+0x4a>
 80091aa:	3904      	subs	r1, #4
 80091ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80091b0:	4298      	cmp	r0, r3
 80091b2:	f841 2f04 	str.w	r2, [r1, #4]!
 80091b6:	d8f9      	bhi.n	80091ac <__lshift+0xc8>
 80091b8:	e7ea      	b.n	8009190 <__lshift+0xac>
 80091ba:	bf00      	nop
 80091bc:	08009ddb 	.word	0x08009ddb
 80091c0:	08009dec 	.word	0x08009dec

080091c4 <__mcmp>:
 80091c4:	4603      	mov	r3, r0
 80091c6:	690a      	ldr	r2, [r1, #16]
 80091c8:	6900      	ldr	r0, [r0, #16]
 80091ca:	b530      	push	{r4, r5, lr}
 80091cc:	1a80      	subs	r0, r0, r2
 80091ce:	d10d      	bne.n	80091ec <__mcmp+0x28>
 80091d0:	3314      	adds	r3, #20
 80091d2:	3114      	adds	r1, #20
 80091d4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80091d8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80091dc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80091e0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80091e4:	4295      	cmp	r5, r2
 80091e6:	d002      	beq.n	80091ee <__mcmp+0x2a>
 80091e8:	d304      	bcc.n	80091f4 <__mcmp+0x30>
 80091ea:	2001      	movs	r0, #1
 80091ec:	bd30      	pop	{r4, r5, pc}
 80091ee:	42a3      	cmp	r3, r4
 80091f0:	d3f4      	bcc.n	80091dc <__mcmp+0x18>
 80091f2:	e7fb      	b.n	80091ec <__mcmp+0x28>
 80091f4:	f04f 30ff 	mov.w	r0, #4294967295
 80091f8:	e7f8      	b.n	80091ec <__mcmp+0x28>
	...

080091fc <__mdiff>:
 80091fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	460d      	mov	r5, r1
 8009202:	4607      	mov	r7, r0
 8009204:	4611      	mov	r1, r2
 8009206:	4628      	mov	r0, r5
 8009208:	4614      	mov	r4, r2
 800920a:	f7ff ffdb 	bl	80091c4 <__mcmp>
 800920e:	1e06      	subs	r6, r0, #0
 8009210:	d111      	bne.n	8009236 <__mdiff+0x3a>
 8009212:	4631      	mov	r1, r6
 8009214:	4638      	mov	r0, r7
 8009216:	f7ff fd57 	bl	8008cc8 <_Balloc>
 800921a:	4602      	mov	r2, r0
 800921c:	b928      	cbnz	r0, 800922a <__mdiff+0x2e>
 800921e:	f240 2132 	movw	r1, #562	; 0x232
 8009222:	4b3a      	ldr	r3, [pc, #232]	; (800930c <__mdiff+0x110>)
 8009224:	483a      	ldr	r0, [pc, #232]	; (8009310 <__mdiff+0x114>)
 8009226:	f000 fb57 	bl	80098d8 <__assert_func>
 800922a:	2301      	movs	r3, #1
 800922c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009230:	4610      	mov	r0, r2
 8009232:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009236:	bfa4      	itt	ge
 8009238:	4623      	movge	r3, r4
 800923a:	462c      	movge	r4, r5
 800923c:	4638      	mov	r0, r7
 800923e:	6861      	ldr	r1, [r4, #4]
 8009240:	bfa6      	itte	ge
 8009242:	461d      	movge	r5, r3
 8009244:	2600      	movge	r6, #0
 8009246:	2601      	movlt	r6, #1
 8009248:	f7ff fd3e 	bl	8008cc8 <_Balloc>
 800924c:	4602      	mov	r2, r0
 800924e:	b918      	cbnz	r0, 8009258 <__mdiff+0x5c>
 8009250:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009254:	4b2d      	ldr	r3, [pc, #180]	; (800930c <__mdiff+0x110>)
 8009256:	e7e5      	b.n	8009224 <__mdiff+0x28>
 8009258:	f102 0814 	add.w	r8, r2, #20
 800925c:	46c2      	mov	sl, r8
 800925e:	f04f 0c00 	mov.w	ip, #0
 8009262:	6927      	ldr	r7, [r4, #16]
 8009264:	60c6      	str	r6, [r0, #12]
 8009266:	692e      	ldr	r6, [r5, #16]
 8009268:	f104 0014 	add.w	r0, r4, #20
 800926c:	f105 0914 	add.w	r9, r5, #20
 8009270:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8009274:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009278:	3410      	adds	r4, #16
 800927a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800927e:	f859 3b04 	ldr.w	r3, [r9], #4
 8009282:	fa1f f18b 	uxth.w	r1, fp
 8009286:	448c      	add	ip, r1
 8009288:	b299      	uxth	r1, r3
 800928a:	0c1b      	lsrs	r3, r3, #16
 800928c:	ebac 0101 	sub.w	r1, ip, r1
 8009290:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009294:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009298:	b289      	uxth	r1, r1
 800929a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800929e:	454e      	cmp	r6, r9
 80092a0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80092a4:	f84a 3b04 	str.w	r3, [sl], #4
 80092a8:	d8e7      	bhi.n	800927a <__mdiff+0x7e>
 80092aa:	1b73      	subs	r3, r6, r5
 80092ac:	3b15      	subs	r3, #21
 80092ae:	f023 0303 	bic.w	r3, r3, #3
 80092b2:	3515      	adds	r5, #21
 80092b4:	3304      	adds	r3, #4
 80092b6:	42ae      	cmp	r6, r5
 80092b8:	bf38      	it	cc
 80092ba:	2304      	movcc	r3, #4
 80092bc:	4418      	add	r0, r3
 80092be:	4443      	add	r3, r8
 80092c0:	461e      	mov	r6, r3
 80092c2:	4605      	mov	r5, r0
 80092c4:	4575      	cmp	r5, lr
 80092c6:	d30e      	bcc.n	80092e6 <__mdiff+0xea>
 80092c8:	f10e 0103 	add.w	r1, lr, #3
 80092cc:	1a09      	subs	r1, r1, r0
 80092ce:	f021 0103 	bic.w	r1, r1, #3
 80092d2:	3803      	subs	r0, #3
 80092d4:	4586      	cmp	lr, r0
 80092d6:	bf38      	it	cc
 80092d8:	2100      	movcc	r1, #0
 80092da:	4419      	add	r1, r3
 80092dc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80092e0:	b18b      	cbz	r3, 8009306 <__mdiff+0x10a>
 80092e2:	6117      	str	r7, [r2, #16]
 80092e4:	e7a4      	b.n	8009230 <__mdiff+0x34>
 80092e6:	f855 8b04 	ldr.w	r8, [r5], #4
 80092ea:	fa1f f188 	uxth.w	r1, r8
 80092ee:	4461      	add	r1, ip
 80092f0:	140c      	asrs	r4, r1, #16
 80092f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80092f6:	b289      	uxth	r1, r1
 80092f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80092fc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009300:	f846 1b04 	str.w	r1, [r6], #4
 8009304:	e7de      	b.n	80092c4 <__mdiff+0xc8>
 8009306:	3f01      	subs	r7, #1
 8009308:	e7e8      	b.n	80092dc <__mdiff+0xe0>
 800930a:	bf00      	nop
 800930c:	08009ddb 	.word	0x08009ddb
 8009310:	08009dec 	.word	0x08009dec

08009314 <__d2b>:
 8009314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009318:	2101      	movs	r1, #1
 800931a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800931e:	4690      	mov	r8, r2
 8009320:	461d      	mov	r5, r3
 8009322:	f7ff fcd1 	bl	8008cc8 <_Balloc>
 8009326:	4604      	mov	r4, r0
 8009328:	b930      	cbnz	r0, 8009338 <__d2b+0x24>
 800932a:	4602      	mov	r2, r0
 800932c:	f240 310a 	movw	r1, #778	; 0x30a
 8009330:	4b24      	ldr	r3, [pc, #144]	; (80093c4 <__d2b+0xb0>)
 8009332:	4825      	ldr	r0, [pc, #148]	; (80093c8 <__d2b+0xb4>)
 8009334:	f000 fad0 	bl	80098d8 <__assert_func>
 8009338:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800933c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8009340:	bb2d      	cbnz	r5, 800938e <__d2b+0x7a>
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	f1b8 0300 	subs.w	r3, r8, #0
 8009348:	d026      	beq.n	8009398 <__d2b+0x84>
 800934a:	4668      	mov	r0, sp
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	f7ff fd83 	bl	8008e58 <__lo0bits>
 8009352:	9900      	ldr	r1, [sp, #0]
 8009354:	b1f0      	cbz	r0, 8009394 <__d2b+0x80>
 8009356:	9a01      	ldr	r2, [sp, #4]
 8009358:	f1c0 0320 	rsb	r3, r0, #32
 800935c:	fa02 f303 	lsl.w	r3, r2, r3
 8009360:	430b      	orrs	r3, r1
 8009362:	40c2      	lsrs	r2, r0
 8009364:	6163      	str	r3, [r4, #20]
 8009366:	9201      	str	r2, [sp, #4]
 8009368:	9b01      	ldr	r3, [sp, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	bf14      	ite	ne
 800936e:	2102      	movne	r1, #2
 8009370:	2101      	moveq	r1, #1
 8009372:	61a3      	str	r3, [r4, #24]
 8009374:	6121      	str	r1, [r4, #16]
 8009376:	b1c5      	cbz	r5, 80093aa <__d2b+0x96>
 8009378:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800937c:	4405      	add	r5, r0
 800937e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009382:	603d      	str	r5, [r7, #0]
 8009384:	6030      	str	r0, [r6, #0]
 8009386:	4620      	mov	r0, r4
 8009388:	b002      	add	sp, #8
 800938a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800938e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009392:	e7d6      	b.n	8009342 <__d2b+0x2e>
 8009394:	6161      	str	r1, [r4, #20]
 8009396:	e7e7      	b.n	8009368 <__d2b+0x54>
 8009398:	a801      	add	r0, sp, #4
 800939a:	f7ff fd5d 	bl	8008e58 <__lo0bits>
 800939e:	2101      	movs	r1, #1
 80093a0:	9b01      	ldr	r3, [sp, #4]
 80093a2:	6121      	str	r1, [r4, #16]
 80093a4:	6163      	str	r3, [r4, #20]
 80093a6:	3020      	adds	r0, #32
 80093a8:	e7e5      	b.n	8009376 <__d2b+0x62>
 80093aa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80093ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80093b2:	6038      	str	r0, [r7, #0]
 80093b4:	6918      	ldr	r0, [r3, #16]
 80093b6:	f7ff fd2f 	bl	8008e18 <__hi0bits>
 80093ba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80093be:	6031      	str	r1, [r6, #0]
 80093c0:	e7e1      	b.n	8009386 <__d2b+0x72>
 80093c2:	bf00      	nop
 80093c4:	08009ddb 	.word	0x08009ddb
 80093c8:	08009dec 	.word	0x08009dec

080093cc <_calloc_r>:
 80093cc:	b570      	push	{r4, r5, r6, lr}
 80093ce:	fba1 5402 	umull	r5, r4, r1, r2
 80093d2:	b934      	cbnz	r4, 80093e2 <_calloc_r+0x16>
 80093d4:	4629      	mov	r1, r5
 80093d6:	f7fd ff3b 	bl	8007250 <_malloc_r>
 80093da:	4606      	mov	r6, r0
 80093dc:	b928      	cbnz	r0, 80093ea <_calloc_r+0x1e>
 80093de:	4630      	mov	r0, r6
 80093e0:	bd70      	pop	{r4, r5, r6, pc}
 80093e2:	220c      	movs	r2, #12
 80093e4:	2600      	movs	r6, #0
 80093e6:	6002      	str	r2, [r0, #0]
 80093e8:	e7f9      	b.n	80093de <_calloc_r+0x12>
 80093ea:	462a      	mov	r2, r5
 80093ec:	4621      	mov	r1, r4
 80093ee:	f7fd ff06 	bl	80071fe <memset>
 80093f2:	e7f4      	b.n	80093de <_calloc_r+0x12>

080093f4 <_free_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4605      	mov	r5, r0
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d040      	beq.n	800947e <_free_r+0x8a>
 80093fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009400:	1f0c      	subs	r4, r1, #4
 8009402:	2b00      	cmp	r3, #0
 8009404:	bfb8      	it	lt
 8009406:	18e4      	addlt	r4, r4, r3
 8009408:	f7ff fc52 	bl	8008cb0 <__malloc_lock>
 800940c:	4a1c      	ldr	r2, [pc, #112]	; (8009480 <_free_r+0x8c>)
 800940e:	6813      	ldr	r3, [r2, #0]
 8009410:	b933      	cbnz	r3, 8009420 <_free_r+0x2c>
 8009412:	6063      	str	r3, [r4, #4]
 8009414:	6014      	str	r4, [r2, #0]
 8009416:	4628      	mov	r0, r5
 8009418:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800941c:	f7ff bc4e 	b.w	8008cbc <__malloc_unlock>
 8009420:	42a3      	cmp	r3, r4
 8009422:	d908      	bls.n	8009436 <_free_r+0x42>
 8009424:	6820      	ldr	r0, [r4, #0]
 8009426:	1821      	adds	r1, r4, r0
 8009428:	428b      	cmp	r3, r1
 800942a:	bf01      	itttt	eq
 800942c:	6819      	ldreq	r1, [r3, #0]
 800942e:	685b      	ldreq	r3, [r3, #4]
 8009430:	1809      	addeq	r1, r1, r0
 8009432:	6021      	streq	r1, [r4, #0]
 8009434:	e7ed      	b.n	8009412 <_free_r+0x1e>
 8009436:	461a      	mov	r2, r3
 8009438:	685b      	ldr	r3, [r3, #4]
 800943a:	b10b      	cbz	r3, 8009440 <_free_r+0x4c>
 800943c:	42a3      	cmp	r3, r4
 800943e:	d9fa      	bls.n	8009436 <_free_r+0x42>
 8009440:	6811      	ldr	r1, [r2, #0]
 8009442:	1850      	adds	r0, r2, r1
 8009444:	42a0      	cmp	r0, r4
 8009446:	d10b      	bne.n	8009460 <_free_r+0x6c>
 8009448:	6820      	ldr	r0, [r4, #0]
 800944a:	4401      	add	r1, r0
 800944c:	1850      	adds	r0, r2, r1
 800944e:	4283      	cmp	r3, r0
 8009450:	6011      	str	r1, [r2, #0]
 8009452:	d1e0      	bne.n	8009416 <_free_r+0x22>
 8009454:	6818      	ldr	r0, [r3, #0]
 8009456:	685b      	ldr	r3, [r3, #4]
 8009458:	4401      	add	r1, r0
 800945a:	6011      	str	r1, [r2, #0]
 800945c:	6053      	str	r3, [r2, #4]
 800945e:	e7da      	b.n	8009416 <_free_r+0x22>
 8009460:	d902      	bls.n	8009468 <_free_r+0x74>
 8009462:	230c      	movs	r3, #12
 8009464:	602b      	str	r3, [r5, #0]
 8009466:	e7d6      	b.n	8009416 <_free_r+0x22>
 8009468:	6820      	ldr	r0, [r4, #0]
 800946a:	1821      	adds	r1, r4, r0
 800946c:	428b      	cmp	r3, r1
 800946e:	bf01      	itttt	eq
 8009470:	6819      	ldreq	r1, [r3, #0]
 8009472:	685b      	ldreq	r3, [r3, #4]
 8009474:	1809      	addeq	r1, r1, r0
 8009476:	6021      	streq	r1, [r4, #0]
 8009478:	6063      	str	r3, [r4, #4]
 800947a:	6054      	str	r4, [r2, #4]
 800947c:	e7cb      	b.n	8009416 <_free_r+0x22>
 800947e:	bd38      	pop	{r3, r4, r5, pc}
 8009480:	20001d44 	.word	0x20001d44

08009484 <__sfputc_r>:
 8009484:	6893      	ldr	r3, [r2, #8]
 8009486:	b410      	push	{r4}
 8009488:	3b01      	subs	r3, #1
 800948a:	2b00      	cmp	r3, #0
 800948c:	6093      	str	r3, [r2, #8]
 800948e:	da07      	bge.n	80094a0 <__sfputc_r+0x1c>
 8009490:	6994      	ldr	r4, [r2, #24]
 8009492:	42a3      	cmp	r3, r4
 8009494:	db01      	blt.n	800949a <__sfputc_r+0x16>
 8009496:	290a      	cmp	r1, #10
 8009498:	d102      	bne.n	80094a0 <__sfputc_r+0x1c>
 800949a:	bc10      	pop	{r4}
 800949c:	f000 b95c 	b.w	8009758 <__swbuf_r>
 80094a0:	6813      	ldr	r3, [r2, #0]
 80094a2:	1c58      	adds	r0, r3, #1
 80094a4:	6010      	str	r0, [r2, #0]
 80094a6:	7019      	strb	r1, [r3, #0]
 80094a8:	4608      	mov	r0, r1
 80094aa:	bc10      	pop	{r4}
 80094ac:	4770      	bx	lr

080094ae <__sfputs_r>:
 80094ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b0:	4606      	mov	r6, r0
 80094b2:	460f      	mov	r7, r1
 80094b4:	4614      	mov	r4, r2
 80094b6:	18d5      	adds	r5, r2, r3
 80094b8:	42ac      	cmp	r4, r5
 80094ba:	d101      	bne.n	80094c0 <__sfputs_r+0x12>
 80094bc:	2000      	movs	r0, #0
 80094be:	e007      	b.n	80094d0 <__sfputs_r+0x22>
 80094c0:	463a      	mov	r2, r7
 80094c2:	4630      	mov	r0, r6
 80094c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c8:	f7ff ffdc 	bl	8009484 <__sfputc_r>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d1f3      	bne.n	80094b8 <__sfputs_r+0xa>
 80094d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094d4 <_vfiprintf_r>:
 80094d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094d8:	460d      	mov	r5, r1
 80094da:	4614      	mov	r4, r2
 80094dc:	4698      	mov	r8, r3
 80094de:	4606      	mov	r6, r0
 80094e0:	b09d      	sub	sp, #116	; 0x74
 80094e2:	b118      	cbz	r0, 80094ec <_vfiprintf_r+0x18>
 80094e4:	6983      	ldr	r3, [r0, #24]
 80094e6:	b90b      	cbnz	r3, 80094ec <_vfiprintf_r+0x18>
 80094e8:	f7fd fdb6 	bl	8007058 <__sinit>
 80094ec:	4b89      	ldr	r3, [pc, #548]	; (8009714 <_vfiprintf_r+0x240>)
 80094ee:	429d      	cmp	r5, r3
 80094f0:	d11b      	bne.n	800952a <_vfiprintf_r+0x56>
 80094f2:	6875      	ldr	r5, [r6, #4]
 80094f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80094f6:	07d9      	lsls	r1, r3, #31
 80094f8:	d405      	bmi.n	8009506 <_vfiprintf_r+0x32>
 80094fa:	89ab      	ldrh	r3, [r5, #12]
 80094fc:	059a      	lsls	r2, r3, #22
 80094fe:	d402      	bmi.n	8009506 <_vfiprintf_r+0x32>
 8009500:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009502:	f7fd fe6c 	bl	80071de <__retarget_lock_acquire_recursive>
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	071b      	lsls	r3, r3, #28
 800950a:	d501      	bpl.n	8009510 <_vfiprintf_r+0x3c>
 800950c:	692b      	ldr	r3, [r5, #16]
 800950e:	b9eb      	cbnz	r3, 800954c <_vfiprintf_r+0x78>
 8009510:	4629      	mov	r1, r5
 8009512:	4630      	mov	r0, r6
 8009514:	f000 f972 	bl	80097fc <__swsetup_r>
 8009518:	b1c0      	cbz	r0, 800954c <_vfiprintf_r+0x78>
 800951a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800951c:	07dc      	lsls	r4, r3, #31
 800951e:	d50e      	bpl.n	800953e <_vfiprintf_r+0x6a>
 8009520:	f04f 30ff 	mov.w	r0, #4294967295
 8009524:	b01d      	add	sp, #116	; 0x74
 8009526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800952a:	4b7b      	ldr	r3, [pc, #492]	; (8009718 <_vfiprintf_r+0x244>)
 800952c:	429d      	cmp	r5, r3
 800952e:	d101      	bne.n	8009534 <_vfiprintf_r+0x60>
 8009530:	68b5      	ldr	r5, [r6, #8]
 8009532:	e7df      	b.n	80094f4 <_vfiprintf_r+0x20>
 8009534:	4b79      	ldr	r3, [pc, #484]	; (800971c <_vfiprintf_r+0x248>)
 8009536:	429d      	cmp	r5, r3
 8009538:	bf08      	it	eq
 800953a:	68f5      	ldreq	r5, [r6, #12]
 800953c:	e7da      	b.n	80094f4 <_vfiprintf_r+0x20>
 800953e:	89ab      	ldrh	r3, [r5, #12]
 8009540:	0598      	lsls	r0, r3, #22
 8009542:	d4ed      	bmi.n	8009520 <_vfiprintf_r+0x4c>
 8009544:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009546:	f7fd fe4b 	bl	80071e0 <__retarget_lock_release_recursive>
 800954a:	e7e9      	b.n	8009520 <_vfiprintf_r+0x4c>
 800954c:	2300      	movs	r3, #0
 800954e:	9309      	str	r3, [sp, #36]	; 0x24
 8009550:	2320      	movs	r3, #32
 8009552:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009556:	2330      	movs	r3, #48	; 0x30
 8009558:	f04f 0901 	mov.w	r9, #1
 800955c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009560:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009720 <_vfiprintf_r+0x24c>
 8009564:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009568:	4623      	mov	r3, r4
 800956a:	469a      	mov	sl, r3
 800956c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009570:	b10a      	cbz	r2, 8009576 <_vfiprintf_r+0xa2>
 8009572:	2a25      	cmp	r2, #37	; 0x25
 8009574:	d1f9      	bne.n	800956a <_vfiprintf_r+0x96>
 8009576:	ebba 0b04 	subs.w	fp, sl, r4
 800957a:	d00b      	beq.n	8009594 <_vfiprintf_r+0xc0>
 800957c:	465b      	mov	r3, fp
 800957e:	4622      	mov	r2, r4
 8009580:	4629      	mov	r1, r5
 8009582:	4630      	mov	r0, r6
 8009584:	f7ff ff93 	bl	80094ae <__sfputs_r>
 8009588:	3001      	adds	r0, #1
 800958a:	f000 80aa 	beq.w	80096e2 <_vfiprintf_r+0x20e>
 800958e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009590:	445a      	add	r2, fp
 8009592:	9209      	str	r2, [sp, #36]	; 0x24
 8009594:	f89a 3000 	ldrb.w	r3, [sl]
 8009598:	2b00      	cmp	r3, #0
 800959a:	f000 80a2 	beq.w	80096e2 <_vfiprintf_r+0x20e>
 800959e:	2300      	movs	r3, #0
 80095a0:	f04f 32ff 	mov.w	r2, #4294967295
 80095a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095a8:	f10a 0a01 	add.w	sl, sl, #1
 80095ac:	9304      	str	r3, [sp, #16]
 80095ae:	9307      	str	r3, [sp, #28]
 80095b0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b4:	931a      	str	r3, [sp, #104]	; 0x68
 80095b6:	4654      	mov	r4, sl
 80095b8:	2205      	movs	r2, #5
 80095ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095be:	4858      	ldr	r0, [pc, #352]	; (8009720 <_vfiprintf_r+0x24c>)
 80095c0:	f7ff fb68 	bl	8008c94 <memchr>
 80095c4:	9a04      	ldr	r2, [sp, #16]
 80095c6:	b9d8      	cbnz	r0, 8009600 <_vfiprintf_r+0x12c>
 80095c8:	06d1      	lsls	r1, r2, #27
 80095ca:	bf44      	itt	mi
 80095cc:	2320      	movmi	r3, #32
 80095ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d2:	0713      	lsls	r3, r2, #28
 80095d4:	bf44      	itt	mi
 80095d6:	232b      	movmi	r3, #43	; 0x2b
 80095d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095dc:	f89a 3000 	ldrb.w	r3, [sl]
 80095e0:	2b2a      	cmp	r3, #42	; 0x2a
 80095e2:	d015      	beq.n	8009610 <_vfiprintf_r+0x13c>
 80095e4:	4654      	mov	r4, sl
 80095e6:	2000      	movs	r0, #0
 80095e8:	f04f 0c0a 	mov.w	ip, #10
 80095ec:	9a07      	ldr	r2, [sp, #28]
 80095ee:	4621      	mov	r1, r4
 80095f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f4:	3b30      	subs	r3, #48	; 0x30
 80095f6:	2b09      	cmp	r3, #9
 80095f8:	d94e      	bls.n	8009698 <_vfiprintf_r+0x1c4>
 80095fa:	b1b0      	cbz	r0, 800962a <_vfiprintf_r+0x156>
 80095fc:	9207      	str	r2, [sp, #28]
 80095fe:	e014      	b.n	800962a <_vfiprintf_r+0x156>
 8009600:	eba0 0308 	sub.w	r3, r0, r8
 8009604:	fa09 f303 	lsl.w	r3, r9, r3
 8009608:	4313      	orrs	r3, r2
 800960a:	46a2      	mov	sl, r4
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	e7d2      	b.n	80095b6 <_vfiprintf_r+0xe2>
 8009610:	9b03      	ldr	r3, [sp, #12]
 8009612:	1d19      	adds	r1, r3, #4
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	9103      	str	r1, [sp, #12]
 8009618:	2b00      	cmp	r3, #0
 800961a:	bfbb      	ittet	lt
 800961c:	425b      	neglt	r3, r3
 800961e:	f042 0202 	orrlt.w	r2, r2, #2
 8009622:	9307      	strge	r3, [sp, #28]
 8009624:	9307      	strlt	r3, [sp, #28]
 8009626:	bfb8      	it	lt
 8009628:	9204      	strlt	r2, [sp, #16]
 800962a:	7823      	ldrb	r3, [r4, #0]
 800962c:	2b2e      	cmp	r3, #46	; 0x2e
 800962e:	d10c      	bne.n	800964a <_vfiprintf_r+0x176>
 8009630:	7863      	ldrb	r3, [r4, #1]
 8009632:	2b2a      	cmp	r3, #42	; 0x2a
 8009634:	d135      	bne.n	80096a2 <_vfiprintf_r+0x1ce>
 8009636:	9b03      	ldr	r3, [sp, #12]
 8009638:	3402      	adds	r4, #2
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfb8      	it	lt
 8009644:	f04f 33ff 	movlt.w	r3, #4294967295
 8009648:	9305      	str	r3, [sp, #20]
 800964a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8009724 <_vfiprintf_r+0x250>
 800964e:	2203      	movs	r2, #3
 8009650:	4650      	mov	r0, sl
 8009652:	7821      	ldrb	r1, [r4, #0]
 8009654:	f7ff fb1e 	bl	8008c94 <memchr>
 8009658:	b140      	cbz	r0, 800966c <_vfiprintf_r+0x198>
 800965a:	2340      	movs	r3, #64	; 0x40
 800965c:	eba0 000a 	sub.w	r0, r0, sl
 8009660:	fa03 f000 	lsl.w	r0, r3, r0
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	3401      	adds	r4, #1
 8009668:	4303      	orrs	r3, r0
 800966a:	9304      	str	r3, [sp, #16]
 800966c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009670:	2206      	movs	r2, #6
 8009672:	482d      	ldr	r0, [pc, #180]	; (8009728 <_vfiprintf_r+0x254>)
 8009674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009678:	f7ff fb0c 	bl	8008c94 <memchr>
 800967c:	2800      	cmp	r0, #0
 800967e:	d03f      	beq.n	8009700 <_vfiprintf_r+0x22c>
 8009680:	4b2a      	ldr	r3, [pc, #168]	; (800972c <_vfiprintf_r+0x258>)
 8009682:	bb1b      	cbnz	r3, 80096cc <_vfiprintf_r+0x1f8>
 8009684:	9b03      	ldr	r3, [sp, #12]
 8009686:	3307      	adds	r3, #7
 8009688:	f023 0307 	bic.w	r3, r3, #7
 800968c:	3308      	adds	r3, #8
 800968e:	9303      	str	r3, [sp, #12]
 8009690:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009692:	443b      	add	r3, r7
 8009694:	9309      	str	r3, [sp, #36]	; 0x24
 8009696:	e767      	b.n	8009568 <_vfiprintf_r+0x94>
 8009698:	460c      	mov	r4, r1
 800969a:	2001      	movs	r0, #1
 800969c:	fb0c 3202 	mla	r2, ip, r2, r3
 80096a0:	e7a5      	b.n	80095ee <_vfiprintf_r+0x11a>
 80096a2:	2300      	movs	r3, #0
 80096a4:	f04f 0c0a 	mov.w	ip, #10
 80096a8:	4619      	mov	r1, r3
 80096aa:	3401      	adds	r4, #1
 80096ac:	9305      	str	r3, [sp, #20]
 80096ae:	4620      	mov	r0, r4
 80096b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b4:	3a30      	subs	r2, #48	; 0x30
 80096b6:	2a09      	cmp	r2, #9
 80096b8:	d903      	bls.n	80096c2 <_vfiprintf_r+0x1ee>
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d0c5      	beq.n	800964a <_vfiprintf_r+0x176>
 80096be:	9105      	str	r1, [sp, #20]
 80096c0:	e7c3      	b.n	800964a <_vfiprintf_r+0x176>
 80096c2:	4604      	mov	r4, r0
 80096c4:	2301      	movs	r3, #1
 80096c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80096ca:	e7f0      	b.n	80096ae <_vfiprintf_r+0x1da>
 80096cc:	ab03      	add	r3, sp, #12
 80096ce:	9300      	str	r3, [sp, #0]
 80096d0:	462a      	mov	r2, r5
 80096d2:	4630      	mov	r0, r6
 80096d4:	4b16      	ldr	r3, [pc, #88]	; (8009730 <_vfiprintf_r+0x25c>)
 80096d6:	a904      	add	r1, sp, #16
 80096d8:	f7fd fecc 	bl	8007474 <_printf_float>
 80096dc:	4607      	mov	r7, r0
 80096de:	1c78      	adds	r0, r7, #1
 80096e0:	d1d6      	bne.n	8009690 <_vfiprintf_r+0x1bc>
 80096e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096e4:	07d9      	lsls	r1, r3, #31
 80096e6:	d405      	bmi.n	80096f4 <_vfiprintf_r+0x220>
 80096e8:	89ab      	ldrh	r3, [r5, #12]
 80096ea:	059a      	lsls	r2, r3, #22
 80096ec:	d402      	bmi.n	80096f4 <_vfiprintf_r+0x220>
 80096ee:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096f0:	f7fd fd76 	bl	80071e0 <__retarget_lock_release_recursive>
 80096f4:	89ab      	ldrh	r3, [r5, #12]
 80096f6:	065b      	lsls	r3, r3, #25
 80096f8:	f53f af12 	bmi.w	8009520 <_vfiprintf_r+0x4c>
 80096fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096fe:	e711      	b.n	8009524 <_vfiprintf_r+0x50>
 8009700:	ab03      	add	r3, sp, #12
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	462a      	mov	r2, r5
 8009706:	4630      	mov	r0, r6
 8009708:	4b09      	ldr	r3, [pc, #36]	; (8009730 <_vfiprintf_r+0x25c>)
 800970a:	a904      	add	r1, sp, #16
 800970c:	f7fe f94e 	bl	80079ac <_printf_i>
 8009710:	e7e4      	b.n	80096dc <_vfiprintf_r+0x208>
 8009712:	bf00      	nop
 8009714:	08009ce4 	.word	0x08009ce4
 8009718:	08009d04 	.word	0x08009d04
 800971c:	08009cc4 	.word	0x08009cc4
 8009720:	08009f44 	.word	0x08009f44
 8009724:	08009f4a 	.word	0x08009f4a
 8009728:	08009f4e 	.word	0x08009f4e
 800972c:	08007475 	.word	0x08007475
 8009730:	080094af 	.word	0x080094af

08009734 <_read_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	2200      	movs	r2, #0
 800973e:	4d05      	ldr	r5, [pc, #20]	; (8009754 <_read_r+0x20>)
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7f8 f823 	bl	800178e <_read>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_read_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_read_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	20001d4c 	.word	0x20001d4c

08009758 <__swbuf_r>:
 8009758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975a:	460e      	mov	r6, r1
 800975c:	4614      	mov	r4, r2
 800975e:	4605      	mov	r5, r0
 8009760:	b118      	cbz	r0, 800976a <__swbuf_r+0x12>
 8009762:	6983      	ldr	r3, [r0, #24]
 8009764:	b90b      	cbnz	r3, 800976a <__swbuf_r+0x12>
 8009766:	f7fd fc77 	bl	8007058 <__sinit>
 800976a:	4b21      	ldr	r3, [pc, #132]	; (80097f0 <__swbuf_r+0x98>)
 800976c:	429c      	cmp	r4, r3
 800976e:	d12b      	bne.n	80097c8 <__swbuf_r+0x70>
 8009770:	686c      	ldr	r4, [r5, #4]
 8009772:	69a3      	ldr	r3, [r4, #24]
 8009774:	60a3      	str	r3, [r4, #8]
 8009776:	89a3      	ldrh	r3, [r4, #12]
 8009778:	071a      	lsls	r2, r3, #28
 800977a:	d52f      	bpl.n	80097dc <__swbuf_r+0x84>
 800977c:	6923      	ldr	r3, [r4, #16]
 800977e:	b36b      	cbz	r3, 80097dc <__swbuf_r+0x84>
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	6820      	ldr	r0, [r4, #0]
 8009784:	b2f6      	uxtb	r6, r6
 8009786:	1ac0      	subs	r0, r0, r3
 8009788:	6963      	ldr	r3, [r4, #20]
 800978a:	4637      	mov	r7, r6
 800978c:	4283      	cmp	r3, r0
 800978e:	dc04      	bgt.n	800979a <__swbuf_r+0x42>
 8009790:	4621      	mov	r1, r4
 8009792:	4628      	mov	r0, r5
 8009794:	f7ff fa24 	bl	8008be0 <_fflush_r>
 8009798:	bb30      	cbnz	r0, 80097e8 <__swbuf_r+0x90>
 800979a:	68a3      	ldr	r3, [r4, #8]
 800979c:	3001      	adds	r0, #1
 800979e:	3b01      	subs	r3, #1
 80097a0:	60a3      	str	r3, [r4, #8]
 80097a2:	6823      	ldr	r3, [r4, #0]
 80097a4:	1c5a      	adds	r2, r3, #1
 80097a6:	6022      	str	r2, [r4, #0]
 80097a8:	701e      	strb	r6, [r3, #0]
 80097aa:	6963      	ldr	r3, [r4, #20]
 80097ac:	4283      	cmp	r3, r0
 80097ae:	d004      	beq.n	80097ba <__swbuf_r+0x62>
 80097b0:	89a3      	ldrh	r3, [r4, #12]
 80097b2:	07db      	lsls	r3, r3, #31
 80097b4:	d506      	bpl.n	80097c4 <__swbuf_r+0x6c>
 80097b6:	2e0a      	cmp	r6, #10
 80097b8:	d104      	bne.n	80097c4 <__swbuf_r+0x6c>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4628      	mov	r0, r5
 80097be:	f7ff fa0f 	bl	8008be0 <_fflush_r>
 80097c2:	b988      	cbnz	r0, 80097e8 <__swbuf_r+0x90>
 80097c4:	4638      	mov	r0, r7
 80097c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097c8:	4b0a      	ldr	r3, [pc, #40]	; (80097f4 <__swbuf_r+0x9c>)
 80097ca:	429c      	cmp	r4, r3
 80097cc:	d101      	bne.n	80097d2 <__swbuf_r+0x7a>
 80097ce:	68ac      	ldr	r4, [r5, #8]
 80097d0:	e7cf      	b.n	8009772 <__swbuf_r+0x1a>
 80097d2:	4b09      	ldr	r3, [pc, #36]	; (80097f8 <__swbuf_r+0xa0>)
 80097d4:	429c      	cmp	r4, r3
 80097d6:	bf08      	it	eq
 80097d8:	68ec      	ldreq	r4, [r5, #12]
 80097da:	e7ca      	b.n	8009772 <__swbuf_r+0x1a>
 80097dc:	4621      	mov	r1, r4
 80097de:	4628      	mov	r0, r5
 80097e0:	f000 f80c 	bl	80097fc <__swsetup_r>
 80097e4:	2800      	cmp	r0, #0
 80097e6:	d0cb      	beq.n	8009780 <__swbuf_r+0x28>
 80097e8:	f04f 37ff 	mov.w	r7, #4294967295
 80097ec:	e7ea      	b.n	80097c4 <__swbuf_r+0x6c>
 80097ee:	bf00      	nop
 80097f0:	08009ce4 	.word	0x08009ce4
 80097f4:	08009d04 	.word	0x08009d04
 80097f8:	08009cc4 	.word	0x08009cc4

080097fc <__swsetup_r>:
 80097fc:	4b32      	ldr	r3, [pc, #200]	; (80098c8 <__swsetup_r+0xcc>)
 80097fe:	b570      	push	{r4, r5, r6, lr}
 8009800:	681d      	ldr	r5, [r3, #0]
 8009802:	4606      	mov	r6, r0
 8009804:	460c      	mov	r4, r1
 8009806:	b125      	cbz	r5, 8009812 <__swsetup_r+0x16>
 8009808:	69ab      	ldr	r3, [r5, #24]
 800980a:	b913      	cbnz	r3, 8009812 <__swsetup_r+0x16>
 800980c:	4628      	mov	r0, r5
 800980e:	f7fd fc23 	bl	8007058 <__sinit>
 8009812:	4b2e      	ldr	r3, [pc, #184]	; (80098cc <__swsetup_r+0xd0>)
 8009814:	429c      	cmp	r4, r3
 8009816:	d10f      	bne.n	8009838 <__swsetup_r+0x3c>
 8009818:	686c      	ldr	r4, [r5, #4]
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009820:	0719      	lsls	r1, r3, #28
 8009822:	d42c      	bmi.n	800987e <__swsetup_r+0x82>
 8009824:	06dd      	lsls	r5, r3, #27
 8009826:	d411      	bmi.n	800984c <__swsetup_r+0x50>
 8009828:	2309      	movs	r3, #9
 800982a:	6033      	str	r3, [r6, #0]
 800982c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009830:	f04f 30ff 	mov.w	r0, #4294967295
 8009834:	81a3      	strh	r3, [r4, #12]
 8009836:	e03e      	b.n	80098b6 <__swsetup_r+0xba>
 8009838:	4b25      	ldr	r3, [pc, #148]	; (80098d0 <__swsetup_r+0xd4>)
 800983a:	429c      	cmp	r4, r3
 800983c:	d101      	bne.n	8009842 <__swsetup_r+0x46>
 800983e:	68ac      	ldr	r4, [r5, #8]
 8009840:	e7eb      	b.n	800981a <__swsetup_r+0x1e>
 8009842:	4b24      	ldr	r3, [pc, #144]	; (80098d4 <__swsetup_r+0xd8>)
 8009844:	429c      	cmp	r4, r3
 8009846:	bf08      	it	eq
 8009848:	68ec      	ldreq	r4, [r5, #12]
 800984a:	e7e6      	b.n	800981a <__swsetup_r+0x1e>
 800984c:	0758      	lsls	r0, r3, #29
 800984e:	d512      	bpl.n	8009876 <__swsetup_r+0x7a>
 8009850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009852:	b141      	cbz	r1, 8009866 <__swsetup_r+0x6a>
 8009854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009858:	4299      	cmp	r1, r3
 800985a:	d002      	beq.n	8009862 <__swsetup_r+0x66>
 800985c:	4630      	mov	r0, r6
 800985e:	f7ff fdc9 	bl	80093f4 <_free_r>
 8009862:	2300      	movs	r3, #0
 8009864:	6363      	str	r3, [r4, #52]	; 0x34
 8009866:	89a3      	ldrh	r3, [r4, #12]
 8009868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800986c:	81a3      	strh	r3, [r4, #12]
 800986e:	2300      	movs	r3, #0
 8009870:	6063      	str	r3, [r4, #4]
 8009872:	6923      	ldr	r3, [r4, #16]
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	89a3      	ldrh	r3, [r4, #12]
 8009878:	f043 0308 	orr.w	r3, r3, #8
 800987c:	81a3      	strh	r3, [r4, #12]
 800987e:	6923      	ldr	r3, [r4, #16]
 8009880:	b94b      	cbnz	r3, 8009896 <__swsetup_r+0x9a>
 8009882:	89a3      	ldrh	r3, [r4, #12]
 8009884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800988c:	d003      	beq.n	8009896 <__swsetup_r+0x9a>
 800988e:	4621      	mov	r1, r4
 8009890:	4630      	mov	r0, r6
 8009892:	f000 f877 	bl	8009984 <__smakebuf_r>
 8009896:	89a0      	ldrh	r0, [r4, #12]
 8009898:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800989c:	f010 0301 	ands.w	r3, r0, #1
 80098a0:	d00a      	beq.n	80098b8 <__swsetup_r+0xbc>
 80098a2:	2300      	movs	r3, #0
 80098a4:	60a3      	str	r3, [r4, #8]
 80098a6:	6963      	ldr	r3, [r4, #20]
 80098a8:	425b      	negs	r3, r3
 80098aa:	61a3      	str	r3, [r4, #24]
 80098ac:	6923      	ldr	r3, [r4, #16]
 80098ae:	b943      	cbnz	r3, 80098c2 <__swsetup_r+0xc6>
 80098b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098b4:	d1ba      	bne.n	800982c <__swsetup_r+0x30>
 80098b6:	bd70      	pop	{r4, r5, r6, pc}
 80098b8:	0781      	lsls	r1, r0, #30
 80098ba:	bf58      	it	pl
 80098bc:	6963      	ldrpl	r3, [r4, #20]
 80098be:	60a3      	str	r3, [r4, #8]
 80098c0:	e7f4      	b.n	80098ac <__swsetup_r+0xb0>
 80098c2:	2000      	movs	r0, #0
 80098c4:	e7f7      	b.n	80098b6 <__swsetup_r+0xba>
 80098c6:	bf00      	nop
 80098c8:	20000010 	.word	0x20000010
 80098cc:	08009ce4 	.word	0x08009ce4
 80098d0:	08009d04 	.word	0x08009d04
 80098d4:	08009cc4 	.word	0x08009cc4

080098d8 <__assert_func>:
 80098d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80098da:	4614      	mov	r4, r2
 80098dc:	461a      	mov	r2, r3
 80098de:	4b09      	ldr	r3, [pc, #36]	; (8009904 <__assert_func+0x2c>)
 80098e0:	4605      	mov	r5, r0
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68d8      	ldr	r0, [r3, #12]
 80098e6:	b14c      	cbz	r4, 80098fc <__assert_func+0x24>
 80098e8:	4b07      	ldr	r3, [pc, #28]	; (8009908 <__assert_func+0x30>)
 80098ea:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098ee:	9100      	str	r1, [sp, #0]
 80098f0:	462b      	mov	r3, r5
 80098f2:	4906      	ldr	r1, [pc, #24]	; (800990c <__assert_func+0x34>)
 80098f4:	f000 f80e 	bl	8009914 <fiprintf>
 80098f8:	f000 f8a3 	bl	8009a42 <abort>
 80098fc:	4b04      	ldr	r3, [pc, #16]	; (8009910 <__assert_func+0x38>)
 80098fe:	461c      	mov	r4, r3
 8009900:	e7f3      	b.n	80098ea <__assert_func+0x12>
 8009902:	bf00      	nop
 8009904:	20000010 	.word	0x20000010
 8009908:	08009f55 	.word	0x08009f55
 800990c:	08009f62 	.word	0x08009f62
 8009910:	08009f90 	.word	0x08009f90

08009914 <fiprintf>:
 8009914:	b40e      	push	{r1, r2, r3}
 8009916:	b503      	push	{r0, r1, lr}
 8009918:	4601      	mov	r1, r0
 800991a:	ab03      	add	r3, sp, #12
 800991c:	4805      	ldr	r0, [pc, #20]	; (8009934 <fiprintf+0x20>)
 800991e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009922:	6800      	ldr	r0, [r0, #0]
 8009924:	9301      	str	r3, [sp, #4]
 8009926:	f7ff fdd5 	bl	80094d4 <_vfiprintf_r>
 800992a:	b002      	add	sp, #8
 800992c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009930:	b003      	add	sp, #12
 8009932:	4770      	bx	lr
 8009934:	20000010 	.word	0x20000010

08009938 <__swhatbuf_r>:
 8009938:	b570      	push	{r4, r5, r6, lr}
 800993a:	460e      	mov	r6, r1
 800993c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009940:	4614      	mov	r4, r2
 8009942:	2900      	cmp	r1, #0
 8009944:	461d      	mov	r5, r3
 8009946:	b096      	sub	sp, #88	; 0x58
 8009948:	da08      	bge.n	800995c <__swhatbuf_r+0x24>
 800994a:	2200      	movs	r2, #0
 800994c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009950:	602a      	str	r2, [r5, #0]
 8009952:	061a      	lsls	r2, r3, #24
 8009954:	d410      	bmi.n	8009978 <__swhatbuf_r+0x40>
 8009956:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800995a:	e00e      	b.n	800997a <__swhatbuf_r+0x42>
 800995c:	466a      	mov	r2, sp
 800995e:	f000 f877 	bl	8009a50 <_fstat_r>
 8009962:	2800      	cmp	r0, #0
 8009964:	dbf1      	blt.n	800994a <__swhatbuf_r+0x12>
 8009966:	9a01      	ldr	r2, [sp, #4]
 8009968:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800996c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009970:	425a      	negs	r2, r3
 8009972:	415a      	adcs	r2, r3
 8009974:	602a      	str	r2, [r5, #0]
 8009976:	e7ee      	b.n	8009956 <__swhatbuf_r+0x1e>
 8009978:	2340      	movs	r3, #64	; 0x40
 800997a:	2000      	movs	r0, #0
 800997c:	6023      	str	r3, [r4, #0]
 800997e:	b016      	add	sp, #88	; 0x58
 8009980:	bd70      	pop	{r4, r5, r6, pc}
	...

08009984 <__smakebuf_r>:
 8009984:	898b      	ldrh	r3, [r1, #12]
 8009986:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009988:	079d      	lsls	r5, r3, #30
 800998a:	4606      	mov	r6, r0
 800998c:	460c      	mov	r4, r1
 800998e:	d507      	bpl.n	80099a0 <__smakebuf_r+0x1c>
 8009990:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009994:	6023      	str	r3, [r4, #0]
 8009996:	6123      	str	r3, [r4, #16]
 8009998:	2301      	movs	r3, #1
 800999a:	6163      	str	r3, [r4, #20]
 800999c:	b002      	add	sp, #8
 800999e:	bd70      	pop	{r4, r5, r6, pc}
 80099a0:	466a      	mov	r2, sp
 80099a2:	ab01      	add	r3, sp, #4
 80099a4:	f7ff ffc8 	bl	8009938 <__swhatbuf_r>
 80099a8:	9900      	ldr	r1, [sp, #0]
 80099aa:	4605      	mov	r5, r0
 80099ac:	4630      	mov	r0, r6
 80099ae:	f7fd fc4f 	bl	8007250 <_malloc_r>
 80099b2:	b948      	cbnz	r0, 80099c8 <__smakebuf_r+0x44>
 80099b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80099b8:	059a      	lsls	r2, r3, #22
 80099ba:	d4ef      	bmi.n	800999c <__smakebuf_r+0x18>
 80099bc:	f023 0303 	bic.w	r3, r3, #3
 80099c0:	f043 0302 	orr.w	r3, r3, #2
 80099c4:	81a3      	strh	r3, [r4, #12]
 80099c6:	e7e3      	b.n	8009990 <__smakebuf_r+0xc>
 80099c8:	4b0d      	ldr	r3, [pc, #52]	; (8009a00 <__smakebuf_r+0x7c>)
 80099ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	6020      	str	r0, [r4, #0]
 80099d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099d4:	81a3      	strh	r3, [r4, #12]
 80099d6:	9b00      	ldr	r3, [sp, #0]
 80099d8:	6120      	str	r0, [r4, #16]
 80099da:	6163      	str	r3, [r4, #20]
 80099dc:	9b01      	ldr	r3, [sp, #4]
 80099de:	b15b      	cbz	r3, 80099f8 <__smakebuf_r+0x74>
 80099e0:	4630      	mov	r0, r6
 80099e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099e6:	f000 f845 	bl	8009a74 <_isatty_r>
 80099ea:	b128      	cbz	r0, 80099f8 <__smakebuf_r+0x74>
 80099ec:	89a3      	ldrh	r3, [r4, #12]
 80099ee:	f023 0303 	bic.w	r3, r3, #3
 80099f2:	f043 0301 	orr.w	r3, r3, #1
 80099f6:	81a3      	strh	r3, [r4, #12]
 80099f8:	89a0      	ldrh	r0, [r4, #12]
 80099fa:	4305      	orrs	r5, r0
 80099fc:	81a5      	strh	r5, [r4, #12]
 80099fe:	e7cd      	b.n	800999c <__smakebuf_r+0x18>
 8009a00:	08006ff1 	.word	0x08006ff1

08009a04 <__ascii_mbtowc>:
 8009a04:	b082      	sub	sp, #8
 8009a06:	b901      	cbnz	r1, 8009a0a <__ascii_mbtowc+0x6>
 8009a08:	a901      	add	r1, sp, #4
 8009a0a:	b142      	cbz	r2, 8009a1e <__ascii_mbtowc+0x1a>
 8009a0c:	b14b      	cbz	r3, 8009a22 <__ascii_mbtowc+0x1e>
 8009a0e:	7813      	ldrb	r3, [r2, #0]
 8009a10:	600b      	str	r3, [r1, #0]
 8009a12:	7812      	ldrb	r2, [r2, #0]
 8009a14:	1e10      	subs	r0, r2, #0
 8009a16:	bf18      	it	ne
 8009a18:	2001      	movne	r0, #1
 8009a1a:	b002      	add	sp, #8
 8009a1c:	4770      	bx	lr
 8009a1e:	4610      	mov	r0, r2
 8009a20:	e7fb      	b.n	8009a1a <__ascii_mbtowc+0x16>
 8009a22:	f06f 0001 	mvn.w	r0, #1
 8009a26:	e7f8      	b.n	8009a1a <__ascii_mbtowc+0x16>

08009a28 <__ascii_wctomb>:
 8009a28:	4603      	mov	r3, r0
 8009a2a:	4608      	mov	r0, r1
 8009a2c:	b141      	cbz	r1, 8009a40 <__ascii_wctomb+0x18>
 8009a2e:	2aff      	cmp	r2, #255	; 0xff
 8009a30:	d904      	bls.n	8009a3c <__ascii_wctomb+0x14>
 8009a32:	228a      	movs	r2, #138	; 0x8a
 8009a34:	f04f 30ff 	mov.w	r0, #4294967295
 8009a38:	601a      	str	r2, [r3, #0]
 8009a3a:	4770      	bx	lr
 8009a3c:	2001      	movs	r0, #1
 8009a3e:	700a      	strb	r2, [r1, #0]
 8009a40:	4770      	bx	lr

08009a42 <abort>:
 8009a42:	2006      	movs	r0, #6
 8009a44:	b508      	push	{r3, lr}
 8009a46:	f000 f84d 	bl	8009ae4 <raise>
 8009a4a:	2001      	movs	r0, #1
 8009a4c:	f7f7 fe95 	bl	800177a <_exit>

08009a50 <_fstat_r>:
 8009a50:	b538      	push	{r3, r4, r5, lr}
 8009a52:	2300      	movs	r3, #0
 8009a54:	4d06      	ldr	r5, [pc, #24]	; (8009a70 <_fstat_r+0x20>)
 8009a56:	4604      	mov	r4, r0
 8009a58:	4608      	mov	r0, r1
 8009a5a:	4611      	mov	r1, r2
 8009a5c:	602b      	str	r3, [r5, #0]
 8009a5e:	f7f7 feda 	bl	8001816 <_fstat>
 8009a62:	1c43      	adds	r3, r0, #1
 8009a64:	d102      	bne.n	8009a6c <_fstat_r+0x1c>
 8009a66:	682b      	ldr	r3, [r5, #0]
 8009a68:	b103      	cbz	r3, 8009a6c <_fstat_r+0x1c>
 8009a6a:	6023      	str	r3, [r4, #0]
 8009a6c:	bd38      	pop	{r3, r4, r5, pc}
 8009a6e:	bf00      	nop
 8009a70:	20001d4c 	.word	0x20001d4c

08009a74 <_isatty_r>:
 8009a74:	b538      	push	{r3, r4, r5, lr}
 8009a76:	2300      	movs	r3, #0
 8009a78:	4d05      	ldr	r5, [pc, #20]	; (8009a90 <_isatty_r+0x1c>)
 8009a7a:	4604      	mov	r4, r0
 8009a7c:	4608      	mov	r0, r1
 8009a7e:	602b      	str	r3, [r5, #0]
 8009a80:	f7f7 fed8 	bl	8001834 <_isatty>
 8009a84:	1c43      	adds	r3, r0, #1
 8009a86:	d102      	bne.n	8009a8e <_isatty_r+0x1a>
 8009a88:	682b      	ldr	r3, [r5, #0]
 8009a8a:	b103      	cbz	r3, 8009a8e <_isatty_r+0x1a>
 8009a8c:	6023      	str	r3, [r4, #0]
 8009a8e:	bd38      	pop	{r3, r4, r5, pc}
 8009a90:	20001d4c 	.word	0x20001d4c

08009a94 <_raise_r>:
 8009a94:	291f      	cmp	r1, #31
 8009a96:	b538      	push	{r3, r4, r5, lr}
 8009a98:	4604      	mov	r4, r0
 8009a9a:	460d      	mov	r5, r1
 8009a9c:	d904      	bls.n	8009aa8 <_raise_r+0x14>
 8009a9e:	2316      	movs	r3, #22
 8009aa0:	6003      	str	r3, [r0, #0]
 8009aa2:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa6:	bd38      	pop	{r3, r4, r5, pc}
 8009aa8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009aaa:	b112      	cbz	r2, 8009ab2 <_raise_r+0x1e>
 8009aac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009ab0:	b94b      	cbnz	r3, 8009ac6 <_raise_r+0x32>
 8009ab2:	4620      	mov	r0, r4
 8009ab4:	f000 f830 	bl	8009b18 <_getpid_r>
 8009ab8:	462a      	mov	r2, r5
 8009aba:	4601      	mov	r1, r0
 8009abc:	4620      	mov	r0, r4
 8009abe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ac2:	f000 b817 	b.w	8009af4 <_kill_r>
 8009ac6:	2b01      	cmp	r3, #1
 8009ac8:	d00a      	beq.n	8009ae0 <_raise_r+0x4c>
 8009aca:	1c59      	adds	r1, r3, #1
 8009acc:	d103      	bne.n	8009ad6 <_raise_r+0x42>
 8009ace:	2316      	movs	r3, #22
 8009ad0:	6003      	str	r3, [r0, #0]
 8009ad2:	2001      	movs	r0, #1
 8009ad4:	e7e7      	b.n	8009aa6 <_raise_r+0x12>
 8009ad6:	2400      	movs	r4, #0
 8009ad8:	4628      	mov	r0, r5
 8009ada:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009ade:	4798      	blx	r3
 8009ae0:	2000      	movs	r0, #0
 8009ae2:	e7e0      	b.n	8009aa6 <_raise_r+0x12>

08009ae4 <raise>:
 8009ae4:	4b02      	ldr	r3, [pc, #8]	; (8009af0 <raise+0xc>)
 8009ae6:	4601      	mov	r1, r0
 8009ae8:	6818      	ldr	r0, [r3, #0]
 8009aea:	f7ff bfd3 	b.w	8009a94 <_raise_r>
 8009aee:	bf00      	nop
 8009af0:	20000010 	.word	0x20000010

08009af4 <_kill_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	2300      	movs	r3, #0
 8009af8:	4d06      	ldr	r5, [pc, #24]	; (8009b14 <_kill_r+0x20>)
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	4611      	mov	r1, r2
 8009b00:	602b      	str	r3, [r5, #0]
 8009b02:	f7f7 fe2a 	bl	800175a <_kill>
 8009b06:	1c43      	adds	r3, r0, #1
 8009b08:	d102      	bne.n	8009b10 <_kill_r+0x1c>
 8009b0a:	682b      	ldr	r3, [r5, #0]
 8009b0c:	b103      	cbz	r3, 8009b10 <_kill_r+0x1c>
 8009b0e:	6023      	str	r3, [r4, #0]
 8009b10:	bd38      	pop	{r3, r4, r5, pc}
 8009b12:	bf00      	nop
 8009b14:	20001d4c 	.word	0x20001d4c

08009b18 <_getpid_r>:
 8009b18:	f7f7 be18 	b.w	800174c <_getpid>

08009b1c <_init>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	bf00      	nop
 8009b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b22:	bc08      	pop	{r3}
 8009b24:	469e      	mov	lr, r3
 8009b26:	4770      	bx	lr

08009b28 <_fini>:
 8009b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b2a:	bf00      	nop
 8009b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b2e:	bc08      	pop	{r3}
 8009b30:	469e      	mov	lr, r3
 8009b32:	4770      	bx	lr
