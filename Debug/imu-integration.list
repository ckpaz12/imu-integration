
imu-integration.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000099a4  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e4  08009ab8  08009ab8  00019ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f9c  08009f9c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08009f9c  08009f9c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009f9c  08009f9c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f9c  08009f9c  00019f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fa0  08009fa0  00019fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b70  200001e0  0800a184  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d50  0800a184  00021d50  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d3e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fc  00000000  00000000  00039f47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016b8  00000000  00000000  0003d648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001588  00000000  00000000  0003ed00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ad33  00000000  00000000  00040288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018ecf  00000000  00000000  0005afbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098080  00000000  00000000  00073e8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010bf0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000703c  00000000  00000000  0010bf5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08009a9c 	.word	0x08009a9c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08009a9c 	.word	0x08009a9c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <__aeabi_frsub>:
 8000b28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b2c:	e002      	b.n	8000b34 <__addsf3>
 8000b2e:	bf00      	nop

08000b30 <__aeabi_fsub>:
 8000b30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b34 <__addsf3>:
 8000b34:	0042      	lsls	r2, r0, #1
 8000b36:	bf1f      	itttt	ne
 8000b38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b3c:	ea92 0f03 	teqne	r2, r3
 8000b40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b48:	d06a      	beq.n	8000c20 <__addsf3+0xec>
 8000b4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b52:	bfc1      	itttt	gt
 8000b54:	18d2      	addgt	r2, r2, r3
 8000b56:	4041      	eorgt	r1, r0
 8000b58:	4048      	eorgt	r0, r1
 8000b5a:	4041      	eorgt	r1, r0
 8000b5c:	bfb8      	it	lt
 8000b5e:	425b      	neglt	r3, r3
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	bf88      	it	hi
 8000b64:	4770      	bxhi	lr
 8000b66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b82:	bf18      	it	ne
 8000b84:	4249      	negne	r1, r1
 8000b86:	ea92 0f03 	teq	r2, r3
 8000b8a:	d03f      	beq.n	8000c0c <__addsf3+0xd8>
 8000b8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b90:	fa41 fc03 	asr.w	ip, r1, r3
 8000b94:	eb10 000c 	adds.w	r0, r0, ip
 8000b98:	f1c3 0320 	rsb	r3, r3, #32
 8000b9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ba0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ba4:	d502      	bpl.n	8000bac <__addsf3+0x78>
 8000ba6:	4249      	negs	r1, r1
 8000ba8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bb0:	d313      	bcc.n	8000bda <__addsf3+0xa6>
 8000bb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bb6:	d306      	bcc.n	8000bc6 <__addsf3+0x92>
 8000bb8:	0840      	lsrs	r0, r0, #1
 8000bba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bbe:	f102 0201 	add.w	r2, r2, #1
 8000bc2:	2afe      	cmp	r2, #254	; 0xfe
 8000bc4:	d251      	bcs.n	8000c6a <__addsf3+0x136>
 8000bc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bce:	bf08      	it	eq
 8000bd0:	f020 0001 	biceq.w	r0, r0, #1
 8000bd4:	ea40 0003 	orr.w	r0, r0, r3
 8000bd8:	4770      	bx	lr
 8000bda:	0049      	lsls	r1, r1, #1
 8000bdc:	eb40 0000 	adc.w	r0, r0, r0
 8000be0:	3a01      	subs	r2, #1
 8000be2:	bf28      	it	cs
 8000be4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000be8:	d2ed      	bcs.n	8000bc6 <__addsf3+0x92>
 8000bea:	fab0 fc80 	clz	ip, r0
 8000bee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000bf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bfa:	bfaa      	itet	ge
 8000bfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c00:	4252      	neglt	r2, r2
 8000c02:	4318      	orrge	r0, r3
 8000c04:	bfbc      	itt	lt
 8000c06:	40d0      	lsrlt	r0, r2
 8000c08:	4318      	orrlt	r0, r3
 8000c0a:	4770      	bx	lr
 8000c0c:	f092 0f00 	teq	r2, #0
 8000c10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c14:	bf06      	itte	eq
 8000c16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c1a:	3201      	addeq	r2, #1
 8000c1c:	3b01      	subne	r3, #1
 8000c1e:	e7b5      	b.n	8000b8c <__addsf3+0x58>
 8000c20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c28:	bf18      	it	ne
 8000c2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c2e:	d021      	beq.n	8000c74 <__addsf3+0x140>
 8000c30:	ea92 0f03 	teq	r2, r3
 8000c34:	d004      	beq.n	8000c40 <__addsf3+0x10c>
 8000c36:	f092 0f00 	teq	r2, #0
 8000c3a:	bf08      	it	eq
 8000c3c:	4608      	moveq	r0, r1
 8000c3e:	4770      	bx	lr
 8000c40:	ea90 0f01 	teq	r0, r1
 8000c44:	bf1c      	itt	ne
 8000c46:	2000      	movne	r0, #0
 8000c48:	4770      	bxne	lr
 8000c4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c4e:	d104      	bne.n	8000c5a <__addsf3+0x126>
 8000c50:	0040      	lsls	r0, r0, #1
 8000c52:	bf28      	it	cs
 8000c54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c58:	4770      	bx	lr
 8000c5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c5e:	bf3c      	itt	cc
 8000c60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bxcc	lr
 8000c66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c72:	4770      	bx	lr
 8000c74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c78:	bf16      	itet	ne
 8000c7a:	4608      	movne	r0, r1
 8000c7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c80:	4601      	movne	r1, r0
 8000c82:	0242      	lsls	r2, r0, #9
 8000c84:	bf06      	itte	eq
 8000c86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c8a:	ea90 0f01 	teqeq	r0, r1
 8000c8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c92:	4770      	bx	lr

08000c94 <__aeabi_ui2f>:
 8000c94:	f04f 0300 	mov.w	r3, #0
 8000c98:	e004      	b.n	8000ca4 <__aeabi_i2f+0x8>
 8000c9a:	bf00      	nop

08000c9c <__aeabi_i2f>:
 8000c9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ca0:	bf48      	it	mi
 8000ca2:	4240      	negmi	r0, r0
 8000ca4:	ea5f 0c00 	movs.w	ip, r0
 8000ca8:	bf08      	it	eq
 8000caa:	4770      	bxeq	lr
 8000cac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cb0:	4601      	mov	r1, r0
 8000cb2:	f04f 0000 	mov.w	r0, #0
 8000cb6:	e01c      	b.n	8000cf2 <__aeabi_l2f+0x2a>

08000cb8 <__aeabi_ul2f>:
 8000cb8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f04f 0300 	mov.w	r3, #0
 8000cc4:	e00a      	b.n	8000cdc <__aeabi_l2f+0x14>
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_l2f>:
 8000cc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ccc:	bf08      	it	eq
 8000cce:	4770      	bxeq	lr
 8000cd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__aeabi_l2f+0x14>
 8000cd6:	4240      	negs	r0, r0
 8000cd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cdc:	ea5f 0c01 	movs.w	ip, r1
 8000ce0:	bf02      	ittt	eq
 8000ce2:	4684      	moveq	ip, r0
 8000ce4:	4601      	moveq	r1, r0
 8000ce6:	2000      	moveq	r0, #0
 8000ce8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000cec:	bf08      	it	eq
 8000cee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cf2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cf6:	fabc f28c 	clz	r2, ip
 8000cfa:	3a08      	subs	r2, #8
 8000cfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d00:	db10      	blt.n	8000d24 <__aeabi_l2f+0x5c>
 8000d02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d06:	4463      	add	r3, ip
 8000d08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d0c:	f1c2 0220 	rsb	r2, r2, #32
 8000d10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d14:	fa20 f202 	lsr.w	r2, r0, r2
 8000d18:	eb43 0002 	adc.w	r0, r3, r2
 8000d1c:	bf08      	it	eq
 8000d1e:	f020 0001 	biceq.w	r0, r0, #1
 8000d22:	4770      	bx	lr
 8000d24:	f102 0220 	add.w	r2, r2, #32
 8000d28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2c:	f1c2 0220 	rsb	r2, r2, #32
 8000d30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d34:	fa21 f202 	lsr.w	r2, r1, r2
 8000d38:	eb43 0002 	adc.w	r0, r3, r2
 8000d3c:	bf08      	it	eq
 8000d3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d42:	4770      	bx	lr
 8000d44:	0000      	movs	r0, r0
	...

08000d48 <gyro>:
	HAL_UART_Transmit(&huart2, data, size, UART_TIMEOUT);
	HAL_Delay(1000);
}

float gyro(enum GyroType type)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b088      	sub	sp, #32
 8000d4c:	af04      	add	r7, sp, #16
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]

	int16_t gyro;
	uint8_t OUT_H_G, OUT_L_G;

	// goes sequential
	uint16_t addL = 0x22 + (type * 2);
 8000d52:	79fb      	ldrb	r3, [r7, #7]
 8000d54:	3311      	adds	r3, #17
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x23 + (type * 2);
 8000d5c:	79fb      	ldrb	r3, [r7, #7]
 8000d5e:	b29b      	uxth	r3, r3
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	b29b      	uxth	r3, r3
 8000d64:	3323      	adds	r3, #35	; 0x23
 8000d66:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_G, 1, 100);
 8000d68:	89fa      	ldrh	r2, [r7, #14]
 8000d6a:	2364      	movs	r3, #100	; 0x64
 8000d6c:	9302      	str	r3, [sp, #8]
 8000d6e:	2301      	movs	r3, #1
 8000d70:	9301      	str	r3, [sp, #4]
 8000d72:	f107 0308 	add.w	r3, r7, #8
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2301      	movs	r3, #1
 8000d7a:	21d4      	movs	r1, #212	; 0xd4
 8000d7c:	4824      	ldr	r0, [pc, #144]	; (8000e10 <gyro+0xc8>)
 8000d7e:	f001 fb0d 	bl	800239c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_G, 1, 100);
 8000d82:	89ba      	ldrh	r2, [r7, #12]
 8000d84:	2364      	movs	r3, #100	; 0x64
 8000d86:	9302      	str	r3, [sp, #8]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	9301      	str	r3, [sp, #4]
 8000d8c:	f107 0309 	add.w	r3, r7, #9
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	2301      	movs	r3, #1
 8000d94:	21d4      	movs	r1, #212	; 0xd4
 8000d96:	481e      	ldr	r0, [pc, #120]	; (8000e10 <gyro+0xc8>)
 8000d98:	f001 fb00 	bl	800239c <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	gyro = (OUT_H_G << 8) | (OUT_L_G);
 8000d9c:	7a7b      	ldrb	r3, [r7, #9]
 8000d9e:	021b      	lsls	r3, r3, #8
 8000da0:	b21a      	sxth	r2, r3
 8000da2:	7a3b      	ldrb	r3, [r7, #8]
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	4313      	orrs	r3, r2
 8000da8:	817b      	strh	r3, [r7, #10]

	gyro = (float) gyro / 8.75; // datasheet pg10
 8000daa:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff ff74 	bl	8000c9c <__aeabi_i2f>
 8000db4:	4603      	mov	r3, r0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f7ff fb36 	bl	8000428 <__aeabi_f2d>
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	4b14      	ldr	r3, [pc, #80]	; (8000e14 <gyro+0xcc>)
 8000dc2:	f7ff fcb3 	bl	800072c <__aeabi_ddiv>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	460b      	mov	r3, r1
 8000dca:	4610      	mov	r0, r2
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f7ff fe33 	bl	8000a38 <__aeabi_d2iz>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	817b      	strh	r3, [r7, #10]

	return (float) gyro * 0.02;
 8000dd6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff5e 	bl	8000c9c <__aeabi_i2f>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4618      	mov	r0, r3
 8000de4:	f7ff fb20 	bl	8000428 <__aeabi_f2d>
 8000de8:	a307      	add	r3, pc, #28	; (adr r3, 8000e08 <gyro+0xc0>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	f7ff fb73 	bl	80004d8 <__aeabi_dmul>
 8000df2:	4602      	mov	r2, r0
 8000df4:	460b      	mov	r3, r1
 8000df6:	4610      	mov	r0, r2
 8000df8:	4619      	mov	r1, r3
 8000dfa:	f7ff fe45 	bl	8000a88 <__aeabi_d2f>
 8000dfe:	4603      	mov	r3, r0
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	47ae147b 	.word	0x47ae147b
 8000e0c:	3f947ae1 	.word	0x3f947ae1
 8000e10:	20000258 	.word	0x20000258
 8000e14:	40218000 	.word	0x40218000

08000e18 <accel>:

float accel(enum AccelType type)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af04      	add	r7, sp, #16
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]

	int16_t accel;
	uint8_t OUT_H_A, OUT_L_A;

	// goes sequential
	uint16_t addL = 0x28 + (type * 2);
 8000e22:	79fb      	ldrb	r3, [r7, #7]
 8000e24:	3314      	adds	r3, #20
 8000e26:	b29b      	uxth	r3, r3
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	81fb      	strh	r3, [r7, #14]
	uint16_t addH = 0x29 + (type * 2);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3329      	adds	r3, #41	; 0x29
 8000e36:	81bb      	strh	r3, [r7, #12]

	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addL, 1, &OUT_L_A, 1, 100);
 8000e38:	89fa      	ldrh	r2, [r7, #14]
 8000e3a:	2364      	movs	r3, #100	; 0x64
 8000e3c:	9302      	str	r3, [sp, #8]
 8000e3e:	2301      	movs	r3, #1
 8000e40:	9301      	str	r3, [sp, #4]
 8000e42:	f107 0308 	add.w	r3, r7, #8
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	21d4      	movs	r1, #212	; 0xd4
 8000e4c:	481e      	ldr	r0, [pc, #120]	; (8000ec8 <accel+0xb0>)
 8000e4e:	f001 faa5 	bl	800239c <HAL_I2C_Mem_Read>
	HAL_I2C_Mem_Read(&hi2c1, DEVICE_ADDRESS, addH, 1, &OUT_H_A, 1, 100);
 8000e52:	89ba      	ldrh	r2, [r7, #12]
 8000e54:	2364      	movs	r3, #100	; 0x64
 8000e56:	9302      	str	r3, [sp, #8]
 8000e58:	2301      	movs	r3, #1
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	f107 0309 	add.w	r3, r7, #9
 8000e60:	9300      	str	r3, [sp, #0]
 8000e62:	2301      	movs	r3, #1
 8000e64:	21d4      	movs	r1, #212	; 0xd4
 8000e66:	4818      	ldr	r0, [pc, #96]	; (8000ec8 <accel+0xb0>)
 8000e68:	f001 fa98 	bl	800239c <HAL_I2C_Mem_Read>

	// The value is expressed as a 16-bit word in two’s complement.
	accel = (OUT_H_A << 8) | (OUT_L_A);
 8000e6c:	7a7b      	ldrb	r3, [r7, #9]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	b21a      	sxth	r2, r3
 8000e72:	7a3b      	ldrb	r3, [r7, #8]
 8000e74:	b21b      	sxth	r3, r3
 8000e76:	4313      	orrs	r3, r2
 8000e78:	817b      	strh	r3, [r7, #10]

	accel = (float) accel * 0.061; // datasheet pg10
 8000e7a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff0c 	bl	8000c9c <__aeabi_i2f>
 8000e84:	4603      	mov	r3, r0
 8000e86:	4618      	mov	r0, r3
 8000e88:	f7ff face 	bl	8000428 <__aeabi_f2d>
 8000e8c:	a30c      	add	r3, pc, #48	; (adr r3, 8000ec0 <accel+0xa8>)
 8000e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e92:	f7ff fb21 	bl	80004d8 <__aeabi_dmul>
 8000e96:	4602      	mov	r2, r0
 8000e98:	460b      	mov	r3, r1
 8000e9a:	4610      	mov	r0, r2
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	f7ff fdcb 	bl	8000a38 <__aeabi_d2iz>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	817b      	strh	r3, [r7, #10]

	return (float) accel;
 8000ea6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fef6 	bl	8000c9c <__aeabi_i2f>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3710      	adds	r7, #16
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	f3af 8000 	nop.w
 8000ec0:	5a1cac08 	.word	0x5a1cac08
 8000ec4:	3faf3b64 	.word	0x3faf3b64
 8000ec8:	20000258 	.word	0x20000258

08000ecc <initIMU>:


void
initIMU(void) // set up stuff for gyro/accel modes
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af04      	add	r7, sp, #16
	uint8_t data;

	data = 0x80; // 0b10000000
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x10, 1, &data, 1, 100);
 8000ed6:	2364      	movs	r3, #100	; 0x64
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	2301      	movs	r3, #1
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	1dfb      	adds	r3, r7, #7
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	2210      	movs	r2, #16
 8000ee6:	21d4      	movs	r1, #212	; 0xd4
 8000ee8:	4811      	ldr	r0, [pc, #68]	; (8000f30 <initIMU+0x64>)
 8000eea:	f001 f95d 	bl	80021a8 <HAL_I2C_Mem_Write>

	data = 0x80; // 0b10000000
 8000eee:	2380      	movs	r3, #128	; 0x80
 8000ef0:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x11, 1, &data, 1, 100);
 8000ef2:	2364      	movs	r3, #100	; 0x64
 8000ef4:	9302      	str	r3, [sp, #8]
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	9301      	str	r3, [sp, #4]
 8000efa:	1dfb      	adds	r3, r7, #7
 8000efc:	9300      	str	r3, [sp, #0]
 8000efe:	2301      	movs	r3, #1
 8000f00:	2211      	movs	r2, #17
 8000f02:	21d4      	movs	r1, #212	; 0xd4
 8000f04:	480a      	ldr	r0, [pc, #40]	; (8000f30 <initIMU+0x64>)
 8000f06:	f001 f94f 	bl	80021a8 <HAL_I2C_Mem_Write>

	data = 0x04; // 0b00000100
 8000f0a:	2304      	movs	r3, #4
 8000f0c:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Mem_Write(&hi2c1, DEVICE_ADDRESS, 0x12, 1, &data, 1, 100);
 8000f0e:	2364      	movs	r3, #100	; 0x64
 8000f10:	9302      	str	r3, [sp, #8]
 8000f12:	2301      	movs	r3, #1
 8000f14:	9301      	str	r3, [sp, #4]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	9300      	str	r3, [sp, #0]
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	2212      	movs	r2, #18
 8000f1e:	21d4      	movs	r1, #212	; 0xd4
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <initIMU+0x64>)
 8000f22:	f001 f941 	bl	80021a8 <HAL_I2C_Mem_Write>
}
 8000f26:	bf00      	nop
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	20000258 	.word	0x20000258

08000f34 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000f3c:	1d39      	adds	r1, r7, #4
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	2201      	movs	r2, #1
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <__io_putchar+0x20>)
 8000f46:	f002 fecc 	bl	8003ce2 <HAL_UART_Transmit>
  return ch;
 8000f4a:	687b      	ldr	r3, [r7, #4]
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	3708      	adds	r7, #8
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200002ac 	.word	0x200002ac

08000f58 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* Initialize IMU */
  initIMU();
 8000f5c:	f7ff ffb6 	bl	8000ecc <initIMU>

  /* Create Queue */
  imuMessageQueueHandle = osMessageQueueNew(IMU_QUEUE_SIZE, sizeof(IMU_msg_t), &imuMessageQueue_attributes);
 8000f60:	4a10      	ldr	r2, [pc, #64]	; (8000fa4 <MX_FREERTOS_Init+0x4c>)
 8000f62:	2106      	movs	r1, #6
 8000f64:	200a      	movs	r0, #10
 8000f66:	f003 f997 	bl	8004298 <osMessageQueueNew>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <MX_FREERTOS_Init+0x50>)
 8000f6e:	6013      	str	r3, [r2, #0]

  /* Create the thread(s) */
  blinkledHandle = osThreadNew(StartBlinkLed, NULL, &blinkled_attributes);
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <MX_FREERTOS_Init+0x54>)
 8000f72:	2100      	movs	r1, #0
 8000f74:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_FREERTOS_Init+0x58>)
 8000f76:	f003 f885 	bl	8004084 <osThreadNew>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <MX_FREERTOS_Init+0x5c>)
 8000f7e:	6013      	str	r3, [r2, #0]
  readimuHandle = osThreadNew(StartReadIMU, NULL, &readimu_attributes);
 8000f80:	4a0d      	ldr	r2, [pc, #52]	; (8000fb8 <MX_FREERTOS_Init+0x60>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <MX_FREERTOS_Init+0x64>)
 8000f86:	f003 f87d 	bl	8004084 <osThreadNew>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	4a0c      	ldr	r2, [pc, #48]	; (8000fc0 <MX_FREERTOS_Init+0x68>)
 8000f8e:	6013      	str	r3, [r2, #0]
  transmitdataHandle = osThreadNew(StartTransmitData, NULL, &transmitdata_attributes);
 8000f90:	4a0c      	ldr	r2, [pc, #48]	; (8000fc4 <MX_FREERTOS_Init+0x6c>)
 8000f92:	2100      	movs	r1, #0
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_FREERTOS_Init+0x70>)
 8000f96:	f003 f875 	bl	8004084 <osThreadNew>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <MX_FREERTOS_Init+0x74>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	08009b94 	.word	0x08009b94
 8000fa8:	20000208 	.word	0x20000208
 8000fac:	08009b28 	.word	0x08009b28
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	200001fc 	.word	0x200001fc
 8000fb8:	08009b4c 	.word	0x08009b4c
 8000fbc:	08000ff1 	.word	0x08000ff1
 8000fc0:	20000200 	.word	0x20000200
 8000fc4:	08009b70 	.word	0x08009b70
 8000fc8:	080010ed 	.word	0x080010ed
 8000fcc:	20000204 	.word	0x20000204

08000fd0 <StartBlinkLed>:
  * @param  argument: Not used
  * @retval None
  */

void StartBlinkLed(void *argument)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  while(1)
  {
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fd8:	2120      	movs	r1, #32
 8000fda:	4804      	ldr	r0, [pc, #16]	; (8000fec <StartBlinkLed+0x1c>)
 8000fdc:	f000 ff64 	bl	8001ea8 <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000fe0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fe4:	f003 f92a 	bl	800423c <osDelay>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000fe8:	e7f6      	b.n	8000fd8 <StartBlinkLed+0x8>
 8000fea:	bf00      	nop
 8000fec:	40010800 	.word	0x40010800

08000ff0 <StartReadIMU>:
* @param argument: Not used
* @retval None
*/

__NO_RETURN void StartReadIMU(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  union FloatBytes gy_x, gy_y, gy_z, ax_x, ax_y, ax_z;
  /* Infinite loop */
  while(1)
  {
    float ans = gyro(GYRO_X);
 8000ff8:	2000      	movs	r0, #0
 8000ffa:	f7ff fea5 	bl	8000d48 <gyro>
 8000ffe:	6278      	str	r0, [r7, #36]	; 0x24
    gy_x.float_value = ans;
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	623b      	str	r3, [r7, #32]
    gy_y.float_value = gyro(GYRO_Y);
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fe9f 	bl	8000d48 <gyro>
 800100a:	4603      	mov	r3, r0
 800100c:	61fb      	str	r3, [r7, #28]
    gy_z.float_value = gyro(GYRO_Z);
 800100e:	2002      	movs	r0, #2
 8001010:	f7ff fe9a 	bl	8000d48 <gyro>
 8001014:	4603      	mov	r3, r0
 8001016:	61bb      	str	r3, [r7, #24]
    ax_x.float_value = accel(ACCEL_X);
 8001018:	2000      	movs	r0, #0
 800101a:	f7ff fefd 	bl	8000e18 <accel>
 800101e:	4603      	mov	r3, r0
 8001020:	617b      	str	r3, [r7, #20]
    ax_y.float_value = accel(ACCEL_Y);
 8001022:	2001      	movs	r0, #1
 8001024:	f7ff fef8 	bl	8000e18 <accel>
 8001028:	4603      	mov	r3, r0
 800102a:	613b      	str	r3, [r7, #16]
    ax_z.float_value = accel(ACCEL_Z);
 800102c:	2002      	movs	r0, #2
 800102e:	f7ff fef3 	bl	8000e18 <accel>
 8001032:	4603      	mov	r3, r0
 8001034:	60fb      	str	r3, [r7, #12]

    // IMU DATA: 16 ASCII characters
    addtoIMUQueue("G", "X", gy_x);
 8001036:	6a3a      	ldr	r2, [r7, #32]
 8001038:	4910      	ldr	r1, [pc, #64]	; (800107c <StartReadIMU+0x8c>)
 800103a:	4811      	ldr	r0, [pc, #68]	; (8001080 <StartReadIMU+0x90>)
 800103c:	f000 f828 	bl	8001090 <addtoIMUQueue>
    addtoIMUQueue("G", "Y", gy_y);
 8001040:	69fa      	ldr	r2, [r7, #28]
 8001042:	4910      	ldr	r1, [pc, #64]	; (8001084 <StartReadIMU+0x94>)
 8001044:	480e      	ldr	r0, [pc, #56]	; (8001080 <StartReadIMU+0x90>)
 8001046:	f000 f823 	bl	8001090 <addtoIMUQueue>
    addtoIMUQueue("G", "Z", gy_z);
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	490e      	ldr	r1, [pc, #56]	; (8001088 <StartReadIMU+0x98>)
 800104e:	480c      	ldr	r0, [pc, #48]	; (8001080 <StartReadIMU+0x90>)
 8001050:	f000 f81e 	bl	8001090 <addtoIMUQueue>
    addtoIMUQueue("A", "X", ax_x);
 8001054:	697a      	ldr	r2, [r7, #20]
 8001056:	4909      	ldr	r1, [pc, #36]	; (800107c <StartReadIMU+0x8c>)
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <StartReadIMU+0x9c>)
 800105a:	f000 f819 	bl	8001090 <addtoIMUQueue>
    addtoIMUQueue("A", "Y", ax_y);
 800105e:	693a      	ldr	r2, [r7, #16]
 8001060:	4908      	ldr	r1, [pc, #32]	; (8001084 <StartReadIMU+0x94>)
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <StartReadIMU+0x9c>)
 8001064:	f000 f814 	bl	8001090 <addtoIMUQueue>
    addtoIMUQueue("A", "Z", ax_z);
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4907      	ldr	r1, [pc, #28]	; (8001088 <StartReadIMU+0x98>)
 800106c:	4807      	ldr	r0, [pc, #28]	; (800108c <StartReadIMU+0x9c>)
 800106e:	f000 f80f 	bl	8001090 <addtoIMUQueue>

    osDelay(1000);
 8001072:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001076:	f003 f8e1 	bl	800423c <osDelay>
  {
 800107a:	e7bd      	b.n	8000ff8 <StartReadIMU+0x8>
 800107c:	08009aec 	.word	0x08009aec
 8001080:	08009af0 	.word	0x08009af0
 8001084:	08009af4 	.word	0x08009af4
 8001088:	08009af8 	.word	0x08009af8
 800108c:	08009afc 	.word	0x08009afc

08001090 <addtoIMUQueue>:
  // In case we accidentally exit from task loop
  osThreadTerminate(NULL);

}

void addtoIMUQueue(char* type, char* dimension, union FloatBytes data){
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	60f8      	str	r0, [r7, #12]
 8001098:	60b9      	str	r1, [r7, #8]
 800109a:	607a      	str	r2, [r7, #4]
    IMU_msg_t imu_message;

    imu_message.imu_type = type[0];
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	753b      	strb	r3, [r7, #20]
    imu_message.dimension = dimension[0];
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	757b      	strb	r3, [r7, #21]
    for (int i = 0; i < 4; i++) {
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	e00c      	b.n	80010c8 <addtoIMUQueue+0x38>
        imu_message.data[i] = data.bytes[i];
 80010ae:	1d3a      	adds	r2, r7, #4
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	4413      	add	r3, r2
 80010b4:	7819      	ldrb	r1, [r3, #0]
 80010b6:	f107 0216 	add.w	r2, r7, #22
 80010ba:	69fb      	ldr	r3, [r7, #28]
 80010bc:	4413      	add	r3, r2
 80010be:	460a      	mov	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	3301      	adds	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	69fb      	ldr	r3, [r7, #28]
 80010ca:	2b03      	cmp	r3, #3
 80010cc:	ddef      	ble.n	80010ae <addtoIMUQueue+0x1e>
    }

    osMessageQueuePut(imuMessageQueueHandle, &imu_message, 0U, 0U);
 80010ce:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <addtoIMUQueue+0x58>)
 80010d0:	6818      	ldr	r0, [r3, #0]
 80010d2:	f107 0114 	add.w	r1, r7, #20
 80010d6:	2300      	movs	r3, #0
 80010d8:	2200      	movs	r2, #0
 80010da:	f003 f963 	bl	80043a4 <osMessageQueuePut>
}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000208 	.word	0x20000208

080010ec <StartTransmitData>:

__NO_RETURN void StartTransmitData(void *argument){
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  IMU_msg_t imu_message;

  while(1)
  {
    // Check if there are messages in the queue
    if (osMessageQueueGetCount(imuMessageQueueHandle) == 0) {
 80010f4:	4b23      	ldr	r3, [pc, #140]	; (8001184 <StartTransmitData+0x98>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f003 fa39 	bl	8004570 <osMessageQueueGetCount>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d03c      	beq.n	800117e <StartTransmitData+0x92>
        continue;
    }

    imu_queue_status = osMessageQueueGet(imuMessageQueueHandle, &imu_message, NULL, osWaitForever);
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <StartTransmitData+0x98>)
 8001106:	6818      	ldr	r0, [r3, #0]
 8001108:	f107 0118 	add.w	r1, r7, #24
 800110c:	f04f 33ff 	mov.w	r3, #4294967295
 8001110:	2200      	movs	r2, #0
 8001112:	f003 f9bb 	bl	800448c <osMessageQueueGet>
 8001116:	6238      	str	r0, [r7, #32]

    if (imu_queue_status != osOK){
 8001118:	6a3b      	ldr	r3, [r7, #32]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <StartTransmitData+0x36>
      osThreadYield();
 800111e:	f003 f85b 	bl	80041d8 <osThreadYield>
    }
    uint8_t imu_buffer[9] = {0};
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	f107 0310 	add.w	r3, r7, #16
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	711a      	strb	r2, [r3, #4]

    // IMU ID: 1 ASCII characters
    imu_buffer[0] = '@';
 8001130:	2340      	movs	r3, #64	; 0x40
 8001132:	733b      	strb	r3, [r7, #12]

    //Data from queue
    imu_buffer[1] = imu_message.imu_type;
 8001134:	7e3b      	ldrb	r3, [r7, #24]
 8001136:	737b      	strb	r3, [r7, #13]
    imu_buffer[2] = imu_message.dimension;
 8001138:	7e7b      	ldrb	r3, [r7, #25]
 800113a:	73bb      	strb	r3, [r7, #14]
    for (int i = 0; i < 4; i++) {
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
 8001140:	e00d      	b.n	800115e <StartTransmitData+0x72>
        imu_buffer[i + 3] = imu_message.data[i];
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	3303      	adds	r3, #3
 8001146:	f107 011a 	add.w	r1, r7, #26
 800114a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800114c:	440a      	add	r2, r1
 800114e:	7812      	ldrb	r2, [r2, #0]
 8001150:	3328      	adds	r3, #40	; 0x28
 8001152:	443b      	add	r3, r7
 8001154:	f803 2c1c 	strb.w	r2, [r3, #-28]
    for (int i = 0; i < 4; i++) {
 8001158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115a:	3301      	adds	r3, #1
 800115c:	627b      	str	r3, [r7, #36]	; 0x24
 800115e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001160:	2b03      	cmp	r3, #3
 8001162:	ddee      	ble.n	8001142 <StartTransmitData+0x56>
    }

    // NEW LINE: 1 ASCII character
    imu_buffer[7] = '\n';
 8001164:	230a      	movs	r3, #10
 8001166:	74fb      	strb	r3, [r7, #19]

    // CARRIAGE RETURN: 1 ASCII character
    imu_buffer[8] = '\r';
 8001168:	230d      	movs	r3, #13
 800116a:	753b      	strb	r3, [r7, #20]

    HAL_UART_Transmit(&huart2, imu_buffer, sizeof(imu_buffer), 1000);
 800116c:	f107 010c 	add.w	r1, r7, #12
 8001170:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001174:	2209      	movs	r2, #9
 8001176:	4804      	ldr	r0, [pc, #16]	; (8001188 <StartTransmitData+0x9c>)
 8001178:	f002 fdb3 	bl	8003ce2 <HAL_UART_Transmit>
 800117c:	e7ba      	b.n	80010f4 <StartTransmitData+0x8>
        continue;
 800117e:	bf00      	nop
  {
 8001180:	e7b8      	b.n	80010f4 <StartTransmitData+0x8>
 8001182:	bf00      	nop
 8001184:	20000208 	.word	0x20000208
 8001188:	200002ac 	.word	0x200002ac

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001190:	f000 fbdc 	bl	800194c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001194:	f000 f80f 	bl	80011b6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001198:	f000 f84e 	bl	8001238 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800119c:	f000 fb5c 	bl	8001858 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80011a0:	f000 fb2c 	bl	80017fc <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80011a4:	f000 fb82 	bl	80018ac <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011a8:	f002 ff06 	bl	8003fb8 <osKernelInitialize>

  /* USER CODE BEGIN RTOS_MUTEX */
   MX_FREERTOS_Init();
 80011ac:	f7ff fed4 	bl	8000f58 <MX_FREERTOS_Init>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80011b0:	f002 ff34 	bl	800401c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011b4:	e7fe      	b.n	80011b4 <main+0x28>

080011b6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b6:	b580      	push	{r7, lr}
 80011b8:	b090      	sub	sp, #64	; 0x40
 80011ba:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	2228      	movs	r2, #40	; 0x28
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f005 fff2 	bl	80071ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ca:	1d3b      	adds	r3, r7, #4
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d8:	2302      	movs	r3, #2
 80011da:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e0:	2310      	movs	r3, #16
 80011e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e4:	2302      	movs	r3, #2
 80011e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011e8:	2300      	movs	r3, #0
 80011ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ec:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80011f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f2:	f107 0318 	add.w	r3, r7, #24
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fe92 	bl	8002f20 <HAL_RCC_OscConfig>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001202:	f000 f899 	bl	8001338 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001206:	230f      	movs	r3, #15
 8001208:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120a:	2302      	movs	r3, #2
 800120c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001216:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121c:	1d3b      	adds	r3, r7, #4
 800121e:	2102      	movs	r1, #2
 8001220:	4618      	mov	r0, r3
 8001222:	f002 f8ff 	bl	8003424 <HAL_RCC_ClockConfig>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800122c:	f000 f884 	bl	8001338 <Error_Handler>
  }
}
 8001230:	bf00      	nop
 8001232:	3740      	adds	r7, #64	; 0x40
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b088      	sub	sp, #32
 800123c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123e:	f107 0310 	add.w	r3, r7, #16
 8001242:	2200      	movs	r2, #0
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	605a      	str	r2, [r3, #4]
 8001248:	609a      	str	r2, [r3, #8]
 800124a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0xcc>)
 800124e:	699b      	ldr	r3, [r3, #24]
 8001250:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001252:	f043 0310 	orr.w	r3, r3, #16
 8001256:	6193      	str	r3, [r2, #24]
 8001258:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xcc>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	f003 0310 	and.w	r3, r3, #16
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001264:	4b27      	ldr	r3, [pc, #156]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	4a26      	ldr	r2, [pc, #152]	; (8001304 <MX_GPIO_Init+0xcc>)
 800126a:	f043 0320 	orr.w	r3, r3, #32
 800126e:	6193      	str	r3, [r2, #24]
 8001270:	4b24      	ldr	r3, [pc, #144]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001272:	699b      	ldr	r3, [r3, #24]
 8001274:	f003 0320 	and.w	r3, r3, #32
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800127c:	4b21      	ldr	r3, [pc, #132]	; (8001304 <MX_GPIO_Init+0xcc>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a20      	ldr	r2, [pc, #128]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001282:	f043 0304 	orr.w	r3, r3, #4
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	4b1e      	ldr	r3, [pc, #120]	; (8001304 <MX_GPIO_Init+0xcc>)
 800128a:	699b      	ldr	r3, [r3, #24]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	607b      	str	r3, [r7, #4]
 8001292:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001294:	4b1b      	ldr	r3, [pc, #108]	; (8001304 <MX_GPIO_Init+0xcc>)
 8001296:	699b      	ldr	r3, [r3, #24]
 8001298:	4a1a      	ldr	r2, [pc, #104]	; (8001304 <MX_GPIO_Init+0xcc>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	6193      	str	r3, [r2, #24]
 80012a0:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_GPIO_Init+0xcc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	603b      	str	r3, [r7, #0]
 80012aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ac:	2200      	movs	r2, #0
 80012ae:	2120      	movs	r1, #32
 80012b0:	4815      	ldr	r0, [pc, #84]	; (8001308 <MX_GPIO_Init+0xd0>)
 80012b2:	f000 fde1 	bl	8001e78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <MX_GPIO_Init+0xd4>)
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012c4:	f107 0310 	add.w	r3, r7, #16
 80012c8:	4619      	mov	r1, r3
 80012ca:	4811      	ldr	r0, [pc, #68]	; (8001310 <MX_GPIO_Init+0xd8>)
 80012cc:	f000 fc50 	bl	8001b70 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012d0:	2320      	movs	r3, #32
 80012d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d4:	2301      	movs	r3, #1
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012dc:	2302      	movs	r3, #2
 80012de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012e0:	f107 0310 	add.w	r3, r7, #16
 80012e4:	4619      	mov	r1, r3
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_GPIO_Init+0xd0>)
 80012e8:	f000 fc42 	bl	8001b70 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80012ec:	2200      	movs	r2, #0
 80012ee:	2105      	movs	r1, #5
 80012f0:	2028      	movs	r0, #40	; 0x28
 80012f2:	f000 fc12 	bl	8001b1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80012f6:	2028      	movs	r0, #40	; 0x28
 80012f8:	f000 fc2b 	bl	8001b52 <HAL_NVIC_EnableIRQ>

}
 80012fc:	bf00      	nop
 80012fe:	3720      	adds	r7, #32
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40010800 	.word	0x40010800
 800130c:	10110000 	.word	0x10110000
 8001310:	40011000 	.word	0x40011000

08001314 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a04      	ldr	r2, [pc, #16]	; (8001334 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d101      	bne.n	800132a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001326:	f000 fb27 	bl	8001978 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40000800 	.word	0x40000800

08001338 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800133c:	b672      	cpsid	i
}
 800133e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001340:	e7fe      	b.n	8001340 <Error_Handler+0x8>
	...

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800134a:	4b18      	ldr	r3, [pc, #96]	; (80013ac <HAL_MspInit+0x68>)
 800134c:	699b      	ldr	r3, [r3, #24]
 800134e:	4a17      	ldr	r2, [pc, #92]	; (80013ac <HAL_MspInit+0x68>)
 8001350:	f043 0301 	orr.w	r3, r3, #1
 8001354:	6193      	str	r3, [r2, #24]
 8001356:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_MspInit+0x68>)
 8001358:	699b      	ldr	r3, [r3, #24]
 800135a:	f003 0301 	and.w	r3, r3, #1
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <HAL_MspInit+0x68>)
 8001364:	69db      	ldr	r3, [r3, #28]
 8001366:	4a11      	ldr	r2, [pc, #68]	; (80013ac <HAL_MspInit+0x68>)
 8001368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136c:	61d3      	str	r3, [r2, #28]
 800136e:	4b0f      	ldr	r3, [pc, #60]	; (80013ac <HAL_MspInit+0x68>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001376:	607b      	str	r3, [r7, #4]
 8001378:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	210f      	movs	r1, #15
 800137e:	f06f 0001 	mvn.w	r0, #1
 8001382:	f000 fbca 	bl	8001b1a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <HAL_MspInit+0x6c>)
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	4a04      	ldr	r2, [pc, #16]	; (80013b0 <HAL_MspInit+0x6c>)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013a2:	bf00      	nop
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000
 80013b0:	40010000 	.word	0x40010000

080013b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013bc:	f107 0310 	add.w	r3, r7, #16
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a15      	ldr	r2, [pc, #84]	; (8001424 <HAL_I2C_MspInit+0x70>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d123      	bne.n	800141c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d4:	4b14      	ldr	r3, [pc, #80]	; (8001428 <HAL_I2C_MspInit+0x74>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a13      	ldr	r2, [pc, #76]	; (8001428 <HAL_I2C_MspInit+0x74>)
 80013da:	f043 0308 	orr.w	r3, r3, #8
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <HAL_I2C_MspInit+0x74>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0308 	and.w	r3, r3, #8
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013ec:	23c0      	movs	r3, #192	; 0xc0
 80013ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013f0:	2312      	movs	r3, #18
 80013f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	4619      	mov	r1, r3
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_I2C_MspInit+0x78>)
 8001400:	f000 fbb6 	bl	8001b70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_I2C_MspInit+0x74>)
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	4a07      	ldr	r2, [pc, #28]	; (8001428 <HAL_I2C_MspInit+0x74>)
 800140a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800140e:	61d3      	str	r3, [r2, #28]
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <HAL_I2C_MspInit+0x74>)
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001418:	60bb      	str	r3, [r7, #8]
 800141a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3720      	adds	r7, #32
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40005400 	.word	0x40005400
 8001428:	40021000 	.word	0x40021000
 800142c:	40010c00 	.word	0x40010c00

08001430 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	; 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001438:	f107 0318 	add.w	r3, r7, #24
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
 8001440:	605a      	str	r2, [r3, #4]
 8001442:	609a      	str	r2, [r3, #8]
 8001444:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a31      	ldr	r2, [pc, #196]	; (8001510 <HAL_UART_MspInit+0xe0>)
 800144c:	4293      	cmp	r3, r2
 800144e:	d124      	bne.n	800149a <HAL_UART_MspInit+0x6a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001450:	4b30      	ldr	r3, [pc, #192]	; (8001514 <HAL_UART_MspInit+0xe4>)
 8001452:	69db      	ldr	r3, [r3, #28]
 8001454:	4a2f      	ldr	r2, [pc, #188]	; (8001514 <HAL_UART_MspInit+0xe4>)
 8001456:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145a:	61d3      	str	r3, [r2, #28]
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_UART_MspInit+0xe4>)
 800145e:	69db      	ldr	r3, [r3, #28]
 8001460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001464:	617b      	str	r3, [r7, #20]
 8001466:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_UART_MspInit+0xe4>)
 800146a:	699b      	ldr	r3, [r3, #24]
 800146c:	4a29      	ldr	r2, [pc, #164]	; (8001514 <HAL_UART_MspInit+0xe4>)
 800146e:	f043 0304 	orr.w	r3, r3, #4
 8001472:	6193      	str	r3, [r2, #24]
 8001474:	4b27      	ldr	r3, [pc, #156]	; (8001514 <HAL_UART_MspInit+0xe4>)
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	613b      	str	r3, [r7, #16]
 800147e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001480:	230c      	movs	r3, #12
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2302      	movs	r3, #2
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800148c:	f107 0318 	add.w	r3, r7, #24
 8001490:	4619      	mov	r1, r3
 8001492:	4821      	ldr	r0, [pc, #132]	; (8001518 <HAL_UART_MspInit+0xe8>)
 8001494:	f000 fb6c 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001498:	e036      	b.n	8001508 <HAL_UART_MspInit+0xd8>
  else if(huart->Instance==USART3)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a1f      	ldr	r2, [pc, #124]	; (800151c <HAL_UART_MspInit+0xec>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d131      	bne.n	8001508 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a4:	4b1b      	ldr	r3, [pc, #108]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014a6:	69db      	ldr	r3, [r3, #28]
 80014a8:	4a1a      	ldr	r2, [pc, #104]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014ae:	61d3      	str	r3, [r2, #28]
 80014b0:	4b18      	ldr	r3, [pc, #96]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014bc:	4b15      	ldr	r3, [pc, #84]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014be:	699b      	ldr	r3, [r3, #24]
 80014c0:	4a14      	ldr	r2, [pc, #80]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014c2:	f043 0308 	orr.w	r3, r3, #8
 80014c6:	6193      	str	r3, [r2, #24]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_UART_MspInit+0xe4>)
 80014ca:	699b      	ldr	r3, [r3, #24]
 80014cc:	f003 0308 	and.w	r3, r3, #8
 80014d0:	60bb      	str	r3, [r7, #8]
 80014d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80014d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014da:	2302      	movs	r3, #2
 80014dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014de:	2303      	movs	r3, #3
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e2:	f107 0318 	add.w	r3, r7, #24
 80014e6:	4619      	mov	r1, r3
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <HAL_UART_MspInit+0xf0>)
 80014ea:	f000 fb41 	bl	8001b70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80014ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80014f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f8:	2300      	movs	r3, #0
 80014fa:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	4619      	mov	r1, r3
 8001502:	4807      	ldr	r0, [pc, #28]	; (8001520 <HAL_UART_MspInit+0xf0>)
 8001504:	f000 fb34 	bl	8001b70 <HAL_GPIO_Init>
}
 8001508:	bf00      	nop
 800150a:	3728      	adds	r7, #40	; 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	40004400 	.word	0x40004400
 8001514:	40021000 	.word	0x40021000
 8001518:	40010800 	.word	0x40010800
 800151c:	40004800 	.word	0x40004800
 8001520:	40010c00 	.word	0x40010c00

08001524 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b08e      	sub	sp, #56	; 0x38
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800152c:	2300      	movs	r3, #0
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001534:	2300      	movs	r3, #0
 8001536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800153a:	4b34      	ldr	r3, [pc, #208]	; (800160c <HAL_InitTick+0xe8>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a33      	ldr	r2, [pc, #204]	; (800160c <HAL_InitTick+0xe8>)
 8001540:	f043 0304 	orr.w	r3, r3, #4
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b31      	ldr	r3, [pc, #196]	; (800160c <HAL_InitTick+0xe8>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001552:	f107 0210 	add.w	r2, r7, #16
 8001556:	f107 0314 	add.w	r3, r7, #20
 800155a:	4611      	mov	r1, r2
 800155c:	4618      	mov	r0, r3
 800155e:	f002 f8db 	bl	8003718 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001562:	6a3b      	ldr	r3, [r7, #32]
 8001564:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001568:	2b00      	cmp	r3, #0
 800156a:	d103      	bne.n	8001574 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800156c:	f002 f8ac 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8001570:	6378      	str	r0, [r7, #52]	; 0x34
 8001572:	e004      	b.n	800157e <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001574:	f002 f8a8 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8001578:	4603      	mov	r3, r0
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	4a23      	ldr	r2, [pc, #140]	; (8001610 <HAL_InitTick+0xec>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	0c9b      	lsrs	r3, r3, #18
 8001588:	3b01      	subs	r3, #1
 800158a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800158c:	4b21      	ldr	r3, [pc, #132]	; (8001614 <HAL_InitTick+0xf0>)
 800158e:	4a22      	ldr	r2, [pc, #136]	; (8001618 <HAL_InitTick+0xf4>)
 8001590:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001592:	4b20      	ldr	r3, [pc, #128]	; (8001614 <HAL_InitTick+0xf0>)
 8001594:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001598:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800159a:	4a1e      	ldr	r2, [pc, #120]	; (8001614 <HAL_InitTick+0xf0>)
 800159c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800159e:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015a0:	4b1c      	ldr	r3, [pc, #112]	; (8001614 <HAL_InitTick+0xf0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_InitTick+0xf0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <HAL_InitTick+0xf0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80015b2:	4818      	ldr	r0, [pc, #96]	; (8001614 <HAL_InitTick+0xf0>)
 80015b4:	f002 f8fe 	bl	80037b4 <HAL_TIM_Base_Init>
 80015b8:	4603      	mov	r3, r0
 80015ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80015be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d11b      	bne.n	80015fe <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80015c6:	4813      	ldr	r0, [pc, #76]	; (8001614 <HAL_InitTick+0xf0>)
 80015c8:	f002 f94c 	bl	8003864 <HAL_TIM_Base_Start_IT>
 80015cc:	4603      	mov	r3, r0
 80015ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80015d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d111      	bne.n	80015fe <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015da:	201e      	movs	r0, #30
 80015dc:	f000 fab9 	bl	8001b52 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2b0f      	cmp	r3, #15
 80015e4:	d808      	bhi.n	80015f8 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80015e6:	2200      	movs	r2, #0
 80015e8:	6879      	ldr	r1, [r7, #4]
 80015ea:	201e      	movs	r0, #30
 80015ec:	f000 fa95 	bl	8001b1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015f0:	4a0a      	ldr	r2, [pc, #40]	; (800161c <HAL_InitTick+0xf8>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e002      	b.n	80015fe <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80015fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001602:	4618      	mov	r0, r3
 8001604:	3738      	adds	r7, #56	; 0x38
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000
 8001610:	431bde83 	.word	0x431bde83
 8001614:	2000020c 	.word	0x2000020c
 8001618:	40000800 	.word	0x40000800
 800161c:	20000004 	.word	0x20000004

08001620 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001624:	e7fe      	b.n	8001624 <NMI_Handler+0x4>

08001626 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001626:	b480      	push	{r7}
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800162a:	e7fe      	b.n	800162a <HardFault_Handler+0x4>

0800162c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001630:	e7fe      	b.n	8001630 <MemManage_Handler+0x4>

08001632 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001632:	b480      	push	{r7}
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001636:	e7fe      	b.n	8001636 <BusFault_Handler+0x4>

08001638 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800163c:	e7fe      	b.n	800163c <UsageFault_Handler+0x4>

0800163e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr
	...

0800164c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001650:	4802      	ldr	r0, [pc, #8]	; (800165c <TIM4_IRQHandler+0x10>)
 8001652:	f002 f959 	bl	8003908 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001656:	bf00      	nop
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	2000020c 	.word	0x2000020c

08001660 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001664:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001668:	f000 fc38 	bl	8001edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	bd80      	pop	{r7, pc}

08001670 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
	return 1;
 8001674:	2301      	movs	r3, #1
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	bc80      	pop	{r7}
 800167c:	4770      	bx	lr

0800167e <_kill>:

int _kill(int pid, int sig)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001688:	f005 fc60 	bl	8006f4c <__errno>
 800168c:	4603      	mov	r3, r0
 800168e:	2216      	movs	r2, #22
 8001690:	601a      	str	r2, [r3, #0]
	return -1;
 8001692:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <_exit>:

void _exit (int status)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a6:	f04f 31ff 	mov.w	r1, #4294967295
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffe7 	bl	800167e <_kill>
	while (1) {}		/* Make sure we hang here */
 80016b0:	e7fe      	b.n	80016b0 <_exit+0x12>

080016b2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b086      	sub	sp, #24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	e00a      	b.n	80016da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c4:	f3af 8000 	nop.w
 80016c8:	4601      	mov	r1, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	b2ca      	uxtb	r2, r1
 80016d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	3301      	adds	r3, #1
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	429a      	cmp	r2, r3
 80016e0:	dbf0      	blt.n	80016c4 <_read+0x12>
	}

return len;
 80016e2:	687b      	ldr	r3, [r7, #4]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}

080016ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e009      	b.n	8001712 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fc14 	bl	8000f34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3301      	adds	r3, #1
 8001710:	617b      	str	r3, [r7, #20]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	429a      	cmp	r2, r3
 8001718:	dbf1      	blt.n	80016fe <_write+0x12>
	}
	return len;
 800171a:	687b      	ldr	r3, [r7, #4]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3718      	adds	r7, #24
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_close>:

int _close(int file)
{
 8001724:	b480      	push	{r7}
 8001726:	b083      	sub	sp, #12
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	return -1;
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001730:	4618      	mov	r0, r3
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174a:	605a      	str	r2, [r3, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	bc80      	pop	{r7}
 8001756:	4770      	bx	lr

08001758 <_isatty>:

int _isatty(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	return 1;
 8001760:	2301      	movs	r3, #1
}
 8001762:	4618      	mov	r0, r3
 8001764:	370c      	adds	r7, #12
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	607a      	str	r2, [r7, #4]
	return 0;
 8001778:	2300      	movs	r3, #0
}
 800177a:	4618      	mov	r0, r3
 800177c:	3714      	adds	r7, #20
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b086      	sub	sp, #24
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800178c:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <_sbrk+0x5c>)
 800178e:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <_sbrk+0x60>)
 8001790:	1ad3      	subs	r3, r2, r3
 8001792:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001798:	4b13      	ldr	r3, [pc, #76]	; (80017e8 <_sbrk+0x64>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d102      	bne.n	80017a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a0:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <_sbrk+0x64>)
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <_sbrk+0x68>)
 80017a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <_sbrk+0x64>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4413      	add	r3, r2
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d207      	bcs.n	80017c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b4:	f005 fbca 	bl	8006f4c <__errno>
 80017b8:	4603      	mov	r3, r0
 80017ba:	220c      	movs	r2, #12
 80017bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017be:	f04f 33ff 	mov.w	r3, #4294967295
 80017c2:	e009      	b.n	80017d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c4:	4b08      	ldr	r3, [pc, #32]	; (80017e8 <_sbrk+0x64>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ca:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <_sbrk+0x64>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	4413      	add	r3, r2
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <_sbrk+0x64>)
 80017d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3718      	adds	r7, #24
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	20005000 	.word	0x20005000
 80017e4:	00000400 	.word	0x00000400
 80017e8:	20000254 	.word	0x20000254
 80017ec:	20001d50 	.word	0x20001d50

080017f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr

080017fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <MX_I2C1_Init+0x50>)
 8001802:	4a13      	ldr	r2, [pc, #76]	; (8001850 <MX_I2C1_Init+0x54>)
 8001804:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_I2C1_Init+0x50>)
 8001808:	4a12      	ldr	r2, [pc, #72]	; (8001854 <MX_I2C1_Init+0x58>)
 800180a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_I2C1_Init+0x50>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_I2C1_Init+0x50>)
 8001814:	2200      	movs	r2, #0
 8001816:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_I2C1_Init+0x50>)
 800181a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800181e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001820:	4b0a      	ldr	r3, [pc, #40]	; (800184c <MX_I2C1_Init+0x50>)
 8001822:	2200      	movs	r2, #0
 8001824:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_I2C1_Init+0x50>)
 8001828:	2200      	movs	r2, #0
 800182a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800182c:	4b07      	ldr	r3, [pc, #28]	; (800184c <MX_I2C1_Init+0x50>)
 800182e:	2200      	movs	r2, #0
 8001830:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_I2C1_Init+0x50>)
 8001834:	2200      	movs	r2, #0
 8001836:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001838:	4804      	ldr	r0, [pc, #16]	; (800184c <MX_I2C1_Init+0x50>)
 800183a:	f000 fb71 	bl	8001f20 <HAL_I2C_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001844:	f7ff fd78 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}
 800184c:	20000258 	.word	0x20000258
 8001850:	40005400 	.word	0x40005400
 8001854:	000186a0 	.word	0x000186a0

08001858 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART2_UART_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 800185e:	4a12      	ldr	r2, [pc, #72]	; (80018a8 <MX_USART2_UART_Init+0x50>)
 8001860:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001862:	4b10      	ldr	r3, [pc, #64]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 8001864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001868:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 800186c:	2200      	movs	r2, #0
 800186e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 8001872:	2200      	movs	r2, #0
 8001874:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 8001878:	2200      	movs	r2, #0
 800187a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 800187e:	220c      	movs	r2, #12
 8001880:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 800188a:	2200      	movs	r2, #0
 800188c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_USART2_UART_Init+0x4c>)
 8001890:	f002 f9da 	bl	8003c48 <HAL_UART_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800189a:	f7ff fd4d 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200002ac 	.word	0x200002ac
 80018a8:	40004400 	.word	0x40004400

080018ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018b0:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018b2:	4a12      	ldr	r2, [pc, #72]	; (80018fc <MX_USART3_UART_Init+0x50>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018b6:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018e2:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_USART3_UART_Init+0x4c>)
 80018e4:	f002 f9b0 	bl	8003c48 <HAL_UART_Init>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018ee:	f7ff fd23 	bl	8001338 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200002f0 	.word	0x200002f0
 80018fc:	40004800 	.word	0x40004800

08001900 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001900:	480c      	ldr	r0, [pc, #48]	; (8001934 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001902:	490d      	ldr	r1, [pc, #52]	; (8001938 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001904:	4a0d      	ldr	r2, [pc, #52]	; (800193c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001906:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001908:	e002      	b.n	8001910 <LoopCopyDataInit>

0800190a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800190a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800190c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190e:	3304      	adds	r3, #4

08001910 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001910:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001912:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001914:	d3f9      	bcc.n	800190a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001916:	4a0a      	ldr	r2, [pc, #40]	; (8001940 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001918:	4c0a      	ldr	r4, [pc, #40]	; (8001944 <LoopFillZerobss+0x22>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800191c:	e001      	b.n	8001922 <LoopFillZerobss>

0800191e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001920:	3204      	adds	r2, #4

08001922 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001922:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001924:	d3fb      	bcc.n	800191e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001926:	f7ff ff63 	bl	80017f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800192a:	f005 fc0b 	bl	8007144 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800192e:	f7ff fc2d 	bl	800118c <main>
  bx lr
 8001932:	4770      	bx	lr
  ldr r0, =_sdata
 8001934:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001938:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800193c:	08009fa4 	.word	0x08009fa4
  ldr r2, =_sbss
 8001940:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001944:	20001d50 	.word	0x20001d50

08001948 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001948:	e7fe      	b.n	8001948 <ADC1_2_IRQHandler>
	...

0800194c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <HAL_Init+0x28>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a07      	ldr	r2, [pc, #28]	; (8001974 <HAL_Init+0x28>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800195c:	2003      	movs	r0, #3
 800195e:	f000 f8d1 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001962:	200f      	movs	r0, #15
 8001964:	f7ff fdde 	bl	8001524 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001968:	f7ff fcec 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800196c:	2300      	movs	r3, #0
}
 800196e:	4618      	mov	r0, r3
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40022000 	.word	0x40022000

08001978 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800197c:	4b05      	ldr	r3, [pc, #20]	; (8001994 <HAL_IncTick+0x1c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	461a      	mov	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_IncTick+0x20>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4413      	add	r3, r2
 8001988:	4a03      	ldr	r2, [pc, #12]	; (8001998 <HAL_IncTick+0x20>)
 800198a:	6013      	str	r3, [r2, #0]
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	20000008 	.word	0x20000008
 8001998:	20000334 	.word	0x20000334

0800199c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return uwTick;
 80019a0:	4b02      	ldr	r3, [pc, #8]	; (80019ac <HAL_GetTick+0x10>)
 80019a2:	681b      	ldr	r3, [r3, #0]
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bc80      	pop	{r7}
 80019aa:	4770      	bx	lr
 80019ac:	20000334 	.word	0x20000334

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bc80      	pop	{r7}
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4906      	ldr	r1, [pc, #24]	; (8001a48 <__NVIC_EnableIRQ+0x34>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bc80      	pop	{r7}
 8001a46:	4770      	bx	lr
 8001a48:	e000e100 	.word	0xe000e100

08001a4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	6039      	str	r1, [r7, #0]
 8001a56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db0a      	blt.n	8001a76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	490c      	ldr	r1, [pc, #48]	; (8001a98 <__NVIC_SetPriority+0x4c>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	0112      	lsls	r2, r2, #4
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	440b      	add	r3, r1
 8001a70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a74:	e00a      	b.n	8001a8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	b2da      	uxtb	r2, r3
 8001a7a:	4908      	ldr	r1, [pc, #32]	; (8001a9c <__NVIC_SetPriority+0x50>)
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	f003 030f 	and.w	r3, r3, #15
 8001a82:	3b04      	subs	r3, #4
 8001a84:	0112      	lsls	r2, r2, #4
 8001a86:	b2d2      	uxtb	r2, r2
 8001a88:	440b      	add	r3, r1
 8001a8a:	761a      	strb	r2, [r3, #24]
}
 8001a8c:	bf00      	nop
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bc80      	pop	{r7}
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	e000e100 	.word	0xe000e100
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b089      	sub	sp, #36	; 0x24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f003 0307 	and.w	r3, r3, #7
 8001ab2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f1c3 0307 	rsb	r3, r3, #7
 8001aba:	2b04      	cmp	r3, #4
 8001abc:	bf28      	it	cs
 8001abe:	2304      	movcs	r3, #4
 8001ac0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	2b06      	cmp	r3, #6
 8001ac8:	d902      	bls.n	8001ad0 <NVIC_EncodePriority+0x30>
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	3b03      	subs	r3, #3
 8001ace:	e000      	b.n	8001ad2 <NVIC_EncodePriority+0x32>
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad8:	69bb      	ldr	r3, [r7, #24]
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	43da      	mvns	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae8:	f04f 31ff 	mov.w	r1, #4294967295
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	fa01 f303 	lsl.w	r3, r1, r3
 8001af2:	43d9      	mvns	r1, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af8:	4313      	orrs	r3, r2
         );
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3724      	adds	r7, #36	; 0x24
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff4f 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff64 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ffb2 	bl	8001aa0 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff81 	bl	8001a4c <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff57 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b08b      	sub	sp, #44	; 0x2c
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b82:	e169      	b.n	8001e58 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b84:	2201      	movs	r2, #1
 8001b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	69fa      	ldr	r2, [r7, #28]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	f040 8158 	bne.w	8001e52 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4a9a      	ldr	r2, [pc, #616]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d05e      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bac:	4a98      	ldr	r2, [pc, #608]	; (8001e10 <HAL_GPIO_Init+0x2a0>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d875      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bb2:	4a98      	ldr	r2, [pc, #608]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d058      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bb8:	4a96      	ldr	r2, [pc, #600]	; (8001e14 <HAL_GPIO_Init+0x2a4>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d86f      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bbe:	4a96      	ldr	r2, [pc, #600]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d052      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bc4:	4a94      	ldr	r2, [pc, #592]	; (8001e18 <HAL_GPIO_Init+0x2a8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d869      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bca:	4a94      	ldr	r2, [pc, #592]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d04c      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bd0:	4a92      	ldr	r2, [pc, #584]	; (8001e1c <HAL_GPIO_Init+0x2ac>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d863      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bd6:	4a92      	ldr	r2, [pc, #584]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d046      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
 8001bdc:	4a90      	ldr	r2, [pc, #576]	; (8001e20 <HAL_GPIO_Init+0x2b0>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d85d      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001be2:	2b12      	cmp	r3, #18
 8001be4:	d82a      	bhi.n	8001c3c <HAL_GPIO_Init+0xcc>
 8001be6:	2b12      	cmp	r3, #18
 8001be8:	d859      	bhi.n	8001c9e <HAL_GPIO_Init+0x12e>
 8001bea:	a201      	add	r2, pc, #4	; (adr r2, 8001bf0 <HAL_GPIO_Init+0x80>)
 8001bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bf0:	08001c6b 	.word	0x08001c6b
 8001bf4:	08001c45 	.word	0x08001c45
 8001bf8:	08001c57 	.word	0x08001c57
 8001bfc:	08001c99 	.word	0x08001c99
 8001c00:	08001c9f 	.word	0x08001c9f
 8001c04:	08001c9f 	.word	0x08001c9f
 8001c08:	08001c9f 	.word	0x08001c9f
 8001c0c:	08001c9f 	.word	0x08001c9f
 8001c10:	08001c9f 	.word	0x08001c9f
 8001c14:	08001c9f 	.word	0x08001c9f
 8001c18:	08001c9f 	.word	0x08001c9f
 8001c1c:	08001c9f 	.word	0x08001c9f
 8001c20:	08001c9f 	.word	0x08001c9f
 8001c24:	08001c9f 	.word	0x08001c9f
 8001c28:	08001c9f 	.word	0x08001c9f
 8001c2c:	08001c9f 	.word	0x08001c9f
 8001c30:	08001c9f 	.word	0x08001c9f
 8001c34:	08001c4d 	.word	0x08001c4d
 8001c38:	08001c61 	.word	0x08001c61
 8001c3c:	4a79      	ldr	r2, [pc, #484]	; (8001e24 <HAL_GPIO_Init+0x2b4>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d013      	beq.n	8001c6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c42:	e02c      	b.n	8001c9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	623b      	str	r3, [r7, #32]
          break;
 8001c4a:	e029      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	3304      	adds	r3, #4
 8001c52:	623b      	str	r3, [r7, #32]
          break;
 8001c54:	e024      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	68db      	ldr	r3, [r3, #12]
 8001c5a:	3308      	adds	r3, #8
 8001c5c:	623b      	str	r3, [r7, #32]
          break;
 8001c5e:	e01f      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	330c      	adds	r3, #12
 8001c66:	623b      	str	r3, [r7, #32]
          break;
 8001c68:	e01a      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d102      	bne.n	8001c78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c72:	2304      	movs	r3, #4
 8001c74:	623b      	str	r3, [r7, #32]
          break;
 8001c76:	e013      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c80:	2308      	movs	r3, #8
 8001c82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	69fa      	ldr	r2, [r7, #28]
 8001c88:	611a      	str	r2, [r3, #16]
          break;
 8001c8a:	e009      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c8c:	2308      	movs	r3, #8
 8001c8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69fa      	ldr	r2, [r7, #28]
 8001c94:	615a      	str	r2, [r3, #20]
          break;
 8001c96:	e003      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	623b      	str	r3, [r7, #32]
          break;
 8001c9c:	e000      	b.n	8001ca0 <HAL_GPIO_Init+0x130>
          break;
 8001c9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ca0:	69bb      	ldr	r3, [r7, #24]
 8001ca2:	2bff      	cmp	r3, #255	; 0xff
 8001ca4:	d801      	bhi.n	8001caa <HAL_GPIO_Init+0x13a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_Init+0x13e>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	3304      	adds	r3, #4
 8001cae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2bff      	cmp	r3, #255	; 0xff
 8001cb4:	d802      	bhi.n	8001cbc <HAL_GPIO_Init+0x14c>
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	e002      	b.n	8001cc2 <HAL_GPIO_Init+0x152>
 8001cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbe:	3b08      	subs	r3, #8
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	210f      	movs	r1, #15
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	fa01 f303 	lsl.w	r3, r1, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	401a      	ands	r2, r3
 8001cd4:	6a39      	ldr	r1, [r7, #32]
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001cdc:	431a      	orrs	r2, r3
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f000 80b1 	beq.w	8001e52 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cf0:	4b4d      	ldr	r3, [pc, #308]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	4a4c      	ldr	r2, [pc, #304]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	6193      	str	r3, [r2, #24]
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <HAL_GPIO_Init+0x2b8>)
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	60bb      	str	r3, [r7, #8]
 8001d06:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d08:	4a48      	ldr	r2, [pc, #288]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0c:	089b      	lsrs	r3, r3, #2
 8001d0e:	3302      	adds	r3, #2
 8001d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d14:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	009b      	lsls	r3, r3, #2
 8001d1e:	220f      	movs	r2, #15
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	43db      	mvns	r3, r3
 8001d26:	68fa      	ldr	r2, [r7, #12]
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	4a40      	ldr	r2, [pc, #256]	; (8001e30 <HAL_GPIO_Init+0x2c0>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d013      	beq.n	8001d5c <HAL_GPIO_Init+0x1ec>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	4a3f      	ldr	r2, [pc, #252]	; (8001e34 <HAL_GPIO_Init+0x2c4>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00d      	beq.n	8001d58 <HAL_GPIO_Init+0x1e8>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	4a3e      	ldr	r2, [pc, #248]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d007      	beq.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	4a3d      	ldr	r2, [pc, #244]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d101      	bne.n	8001d50 <HAL_GPIO_Init+0x1e0>
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e006      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d50:	2304      	movs	r3, #4
 8001d52:	e004      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d54:	2302      	movs	r3, #2
 8001d56:	e002      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e000      	b.n	8001d5e <HAL_GPIO_Init+0x1ee>
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d60:	f002 0203 	and.w	r2, r2, #3
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	4093      	lsls	r3, r2
 8001d68:	68fa      	ldr	r2, [r7, #12]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d6e:	492f      	ldr	r1, [pc, #188]	; (8001e2c <HAL_GPIO_Init+0x2bc>)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	089b      	lsrs	r3, r3, #2
 8001d74:	3302      	adds	r3, #2
 8001d76:	68fa      	ldr	r2, [r7, #12]
 8001d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b2d      	ldr	r3, [pc, #180]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	492c      	ldr	r1, [pc, #176]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d96:	4b2a      	ldr	r3, [pc, #168]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	4928      	ldr	r1, [pc, #160]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db0:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4922      	ldr	r1, [pc, #136]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dbe:	4b20      	ldr	r3, [pc, #128]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	491e      	ldr	r1, [pc, #120]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001dd8:	4b19      	ldr	r3, [pc, #100]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dda:	689a      	ldr	r2, [r3, #8]
 8001ddc:	4918      	ldr	r1, [pc, #96]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	608b      	str	r3, [r1, #8]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001de6:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	4914      	ldr	r1, [pc, #80]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d021      	beq.n	8001e44 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e00:	4b0f      	ldr	r3, [pc, #60]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	60cb      	str	r3, [r1, #12]
 8001e0c:	e021      	b.n	8001e52 <HAL_GPIO_Init+0x2e2>
 8001e0e:	bf00      	nop
 8001e10:	10320000 	.word	0x10320000
 8001e14:	10310000 	.word	0x10310000
 8001e18:	10220000 	.word	0x10220000
 8001e1c:	10210000 	.word	0x10210000
 8001e20:	10120000 	.word	0x10120000
 8001e24:	10110000 	.word	0x10110000
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40010800 	.word	0x40010800
 8001e34:	40010c00 	.word	0x40010c00
 8001e38:	40011000 	.word	0x40011000
 8001e3c:	40011400 	.word	0x40011400
 8001e40:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e44:	4b0b      	ldr	r3, [pc, #44]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	4909      	ldr	r1, [pc, #36]	; (8001e74 <HAL_GPIO_Init+0x304>)
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e54:	3301      	adds	r3, #1
 8001e56:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f47f ae8e 	bne.w	8001b84 <HAL_GPIO_Init+0x14>
  }
}
 8001e68:	bf00      	nop
 8001e6a:	bf00      	nop
 8001e6c:	372c      	adds	r7, #44	; 0x2c
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	40010400 	.word	0x40010400

08001e78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	460b      	mov	r3, r1
 8001e82:	807b      	strh	r3, [r7, #2]
 8001e84:	4613      	mov	r3, r2
 8001e86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e88:	787b      	ldrb	r3, [r7, #1]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e8e:	887a      	ldrh	r2, [r7, #2]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e94:	e003      	b.n	8001e9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e96:	887b      	ldrh	r3, [r7, #2]
 8001e98:	041a      	lsls	r2, r3, #16
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b085      	sub	sp, #20
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001eba:	887a      	ldrh	r2, [r7, #2]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	43d9      	mvns	r1, r3
 8001ec6:	887b      	ldrh	r3, [r7, #2]
 8001ec8:	400b      	ands	r3, r1
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	611a      	str	r2, [r3, #16]
}
 8001ed0:	bf00      	nop
 8001ed2:	3714      	adds	r7, #20
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001ee6:	4b08      	ldr	r3, [pc, #32]	; (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	695a      	ldr	r2, [r3, #20]
 8001eea:	88fb      	ldrh	r3, [r7, #6]
 8001eec:	4013      	ands	r3, r2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d006      	beq.n	8001f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ef2:	4a05      	ldr	r2, [pc, #20]	; (8001f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	88fb      	ldrh	r3, [r7, #6]
 8001ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef8:	88fb      	ldrh	r3, [r7, #6]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f806 	bl	8001f0c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f00:	bf00      	nop
 8001f02:	3708      	adds	r7, #8
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40010400 	.word	0x40010400

08001f0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	4603      	mov	r3, r0
 8001f14:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f16:	bf00      	nop
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d101      	bne.n	8001f32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e12b      	b.n	800218a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d106      	bne.n	8001f4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f7ff fa34 	bl	80013b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	2224      	movs	r2, #36	; 0x24
 8001f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0201 	bic.w	r2, r2, #1
 8001f62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f84:	f001 fba0 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8001f88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4a81      	ldr	r2, [pc, #516]	; (8002194 <HAL_I2C_Init+0x274>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d807      	bhi.n	8001fa4 <HAL_I2C_Init+0x84>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	4a80      	ldr	r2, [pc, #512]	; (8002198 <HAL_I2C_Init+0x278>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	bf94      	ite	ls
 8001f9c:	2301      	movls	r3, #1
 8001f9e:	2300      	movhi	r3, #0
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	e006      	b.n	8001fb2 <HAL_I2C_Init+0x92>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a7d      	ldr	r2, [pc, #500]	; (800219c <HAL_I2C_Init+0x27c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	e0e7      	b.n	800218a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	4a78      	ldr	r2, [pc, #480]	; (80021a0 <HAL_I2C_Init+0x280>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	0c9b      	lsrs	r3, r3, #18
 8001fc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	4a6a      	ldr	r2, [pc, #424]	; (8002194 <HAL_I2C_Init+0x274>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d802      	bhi.n	8001ff4 <HAL_I2C_Init+0xd4>
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	e009      	b.n	8002008 <HAL_I2C_Init+0xe8>
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ffa:	fb02 f303 	mul.w	r3, r2, r3
 8001ffe:	4a69      	ldr	r2, [pc, #420]	; (80021a4 <HAL_I2C_Init+0x284>)
 8002000:	fba2 2303 	umull	r2, r3, r2, r3
 8002004:	099b      	lsrs	r3, r3, #6
 8002006:	3301      	adds	r3, #1
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	430b      	orrs	r3, r1
 800200e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800201a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	495c      	ldr	r1, [pc, #368]	; (8002194 <HAL_I2C_Init+0x274>)
 8002024:	428b      	cmp	r3, r1
 8002026:	d819      	bhi.n	800205c <HAL_I2C_Init+0x13c>
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	1e59      	subs	r1, r3, #1
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fbb1 f3f3 	udiv	r3, r1, r3
 8002036:	1c59      	adds	r1, r3, #1
 8002038:	f640 73fc 	movw	r3, #4092	; 0xffc
 800203c:	400b      	ands	r3, r1
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00a      	beq.n	8002058 <HAL_I2C_Init+0x138>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	1e59      	subs	r1, r3, #1
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002050:	3301      	adds	r3, #1
 8002052:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002056:	e051      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 8002058:	2304      	movs	r3, #4
 800205a:	e04f      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d111      	bne.n	8002088 <HAL_I2C_Init+0x168>
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1e58      	subs	r0, r3, #1
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6859      	ldr	r1, [r3, #4]
 800206c:	460b      	mov	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	fbb0 f3f3 	udiv	r3, r0, r3
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e012      	b.n	80020ae <HAL_I2C_Init+0x18e>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	0099      	lsls	r1, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	bf0c      	ite	eq
 80020a8:	2301      	moveq	r3, #1
 80020aa:	2300      	movne	r3, #0
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_I2C_Init+0x196>
 80020b2:	2301      	movs	r3, #1
 80020b4:	e022      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d10e      	bne.n	80020dc <HAL_I2C_Init+0x1bc>
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	1e58      	subs	r0, r3, #1
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	440b      	add	r3, r1
 80020cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020d0:	3301      	adds	r3, #1
 80020d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020da:	e00f      	b.n	80020fc <HAL_I2C_Init+0x1dc>
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	1e58      	subs	r0, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	460b      	mov	r3, r1
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	0099      	lsls	r1, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f2:	3301      	adds	r3, #1
 80020f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020fc:	6879      	ldr	r1, [r7, #4]
 80020fe:	6809      	ldr	r1, [r1, #0]
 8002100:	4313      	orrs	r3, r2
 8002102:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69da      	ldr	r2, [r3, #28]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	430a      	orrs	r2, r1
 800211e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800212a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	6911      	ldr	r1, [r2, #16]
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	68d2      	ldr	r2, [r2, #12]
 8002136:	4311      	orrs	r1, r2
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	6812      	ldr	r2, [r2, #0]
 800213c:	430b      	orrs	r3, r1
 800213e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	430a      	orrs	r2, r1
 800215a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	2200      	movs	r2, #0
 8002170:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2220      	movs	r2, #32
 8002176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	000186a0 	.word	0x000186a0
 8002198:	001e847f 	.word	0x001e847f
 800219c:	003d08ff 	.word	0x003d08ff
 80021a0:	431bde83 	.word	0x431bde83
 80021a4:	10624dd3 	.word	0x10624dd3

080021a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	4608      	mov	r0, r1
 80021b2:	4611      	mov	r1, r2
 80021b4:	461a      	mov	r2, r3
 80021b6:	4603      	mov	r3, r0
 80021b8:	817b      	strh	r3, [r7, #10]
 80021ba:	460b      	mov	r3, r1
 80021bc:	813b      	strh	r3, [r7, #8]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021c2:	f7ff fbeb 	bl	800199c <HAL_GetTick>
 80021c6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	f040 80d9 	bne.w	8002388 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2319      	movs	r3, #25
 80021dc:	2201      	movs	r2, #1
 80021de:	496d      	ldr	r1, [pc, #436]	; (8002394 <HAL_I2C_Mem_Write+0x1ec>)
 80021e0:	68f8      	ldr	r0, [r7, #12]
 80021e2:	f000 fcc1 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0cc      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d101      	bne.n	80021fe <HAL_I2C_Mem_Write+0x56>
 80021fa:	2302      	movs	r3, #2
 80021fc:	e0c5      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0301 	and.w	r3, r3, #1
 8002210:	2b01      	cmp	r3, #1
 8002212:	d007      	beq.n	8002224 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0201 	orr.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002232:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2221      	movs	r2, #33	; 0x21
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2240      	movs	r2, #64	; 0x40
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2200      	movs	r2, #0
 8002248:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a3a      	ldr	r2, [r7, #32]
 800224e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002254:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	4a4d      	ldr	r2, [pc, #308]	; (8002398 <HAL_I2C_Mem_Write+0x1f0>)
 8002264:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002266:	88f8      	ldrh	r0, [r7, #6]
 8002268:	893a      	ldrh	r2, [r7, #8]
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 faf8 	bl	800286c <I2C_RequestMemoryWrite>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d052      	beq.n	8002328 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e081      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 fd42 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00d      	beq.n	80022b2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b04      	cmp	r3, #4
 800229c:	d107      	bne.n	80022ae <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e06b      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022cc:	3b01      	subs	r3, #1
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	3b01      	subs	r3, #1
 80022dc:	b29a      	uxth	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	695b      	ldr	r3, [r3, #20]
 80022e8:	f003 0304 	and.w	r3, r3, #4
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d11b      	bne.n	8002328 <HAL_I2C_Mem_Write+0x180>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fc:	781a      	ldrb	r2, [r3, #0]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	1c5a      	adds	r2, r3, #1
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002312:	3b01      	subs	r3, #1
 8002314:	b29a      	uxth	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1aa      	bne.n	8002286 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002334:	68f8      	ldr	r0, [r7, #12]
 8002336:	f000 fd2e 	bl	8002d96 <I2C_WaitOnBTFFlagUntilTimeout>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b04      	cmp	r3, #4
 8002346:	d107      	bne.n	8002358 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002356:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e016      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800236a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2220      	movs	r2, #32
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002384:	2300      	movs	r3, #0
 8002386:	e000      	b.n	800238a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002388:	2302      	movs	r3, #2
  }
}
 800238a:	4618      	mov	r0, r3
 800238c:	3718      	adds	r7, #24
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	00100002 	.word	0x00100002
 8002398:	ffff0000 	.word	0xffff0000

0800239c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af02      	add	r7, sp, #8
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	4608      	mov	r0, r1
 80023a6:	4611      	mov	r1, r2
 80023a8:	461a      	mov	r2, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	817b      	strh	r3, [r7, #10]
 80023ae:	460b      	mov	r3, r1
 80023b0:	813b      	strh	r3, [r7, #8]
 80023b2:	4613      	mov	r3, r2
 80023b4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80023b6:	2300      	movs	r3, #0
 80023b8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80023ba:	f7ff faef 	bl	800199c <HAL_GetTick>
 80023be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	2b20      	cmp	r3, #32
 80023ca:	f040 8244 	bne.w	8002856 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80023ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d0:	9300      	str	r3, [sp, #0]
 80023d2:	2319      	movs	r3, #25
 80023d4:	2201      	movs	r2, #1
 80023d6:	4982      	ldr	r1, [pc, #520]	; (80025e0 <HAL_I2C_Mem_Read+0x244>)
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 fbc5 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80023de:	4603      	mov	r3, r0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d001      	beq.n	80023e8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80023e4:	2302      	movs	r3, #2
 80023e6:	e237      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_I2C_Mem_Read+0x5a>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e230      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	d007      	beq.n	800241c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f042 0201 	orr.w	r2, r2, #1
 800241a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800242a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2222      	movs	r2, #34	; 0x22
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2240      	movs	r2, #64	; 0x40
 8002438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	2200      	movs	r2, #0
 8002440:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002446:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800244c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002452:	b29a      	uxth	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	4a62      	ldr	r2, [pc, #392]	; (80025e4 <HAL_I2C_Mem_Read+0x248>)
 800245c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800245e:	88f8      	ldrh	r0, [r7, #6]
 8002460:	893a      	ldrh	r2, [r7, #8]
 8002462:	8979      	ldrh	r1, [r7, #10]
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	4603      	mov	r3, r0
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	f000 fa92 	bl	8002998 <I2C_RequestMemoryRead>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e1ec      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	d113      	bne.n	80024ae <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	699b      	ldr	r3, [r3, #24]
 8002498:	61fb      	str	r3, [r7, #28]
 800249a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e1c0      	b.n	8002830 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d11e      	bne.n	80024f4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80024c6:	b672      	cpsid	i
}
 80024c8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	2300      	movs	r3, #0
 80024cc:	61bb      	str	r3, [r7, #24]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	695b      	ldr	r3, [r3, #20]
 80024d4:	61bb      	str	r3, [r7, #24]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	61bb      	str	r3, [r7, #24]
 80024de:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024ee:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80024f0:	b662      	cpsie	i
}
 80024f2:	e035      	b.n	8002560 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d11e      	bne.n	800253a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800250a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800250c:	b672      	cpsid	i
}
 800250e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002510:	2300      	movs	r3, #0
 8002512:	617b      	str	r3, [r7, #20]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	695b      	ldr	r3, [r3, #20]
 800251a:	617b      	str	r3, [r7, #20]
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002534:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002536:	b662      	cpsie	i
}
 8002538:	e012      	b.n	8002560 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002548:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800254a:	2300      	movs	r3, #0
 800254c:	613b      	str	r3, [r7, #16]
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	695b      	ldr	r3, [r3, #20]
 8002554:	613b      	str	r3, [r7, #16]
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	699b      	ldr	r3, [r3, #24]
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002560:	e166      	b.n	8002830 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002566:	2b03      	cmp	r3, #3
 8002568:	f200 811f 	bhi.w	80027aa <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	2b01      	cmp	r3, #1
 8002572:	d123      	bne.n	80025bc <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002576:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 fc4d 	bl	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e167      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a4:	3b01      	subs	r3, #1
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	3b01      	subs	r3, #1
 80025b4:	b29a      	uxth	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80025ba:	e139      	b.n	8002830 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d152      	bne.n	800266a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025ca:	2200      	movs	r2, #0
 80025cc:	4906      	ldr	r1, [pc, #24]	; (80025e8 <HAL_I2C_Mem_Read+0x24c>)
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 faca 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d008      	beq.n	80025ec <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e13c      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
 80025de:	bf00      	nop
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80025ec:	b672      	cpsid	i
}
 80025ee:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	691a      	ldr	r2, [r3, #16]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	b2d2      	uxtb	r2, r2
 800260c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002612:	1c5a      	adds	r2, r3, #1
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800261c:	3b01      	subs	r3, #1
 800261e:	b29a      	uxth	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002628:	b29b      	uxth	r3, r3
 800262a:	3b01      	subs	r3, #1
 800262c:	b29a      	uxth	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002632:	b662      	cpsie	i
}
 8002634:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002640:	b2d2      	uxtb	r2, r2
 8002642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002648:	1c5a      	adds	r2, r3, #1
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002652:	3b01      	subs	r3, #1
 8002654:	b29a      	uxth	r2, r3
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29a      	uxth	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002668:	e0e2      	b.n	8002830 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002670:	2200      	movs	r2, #0
 8002672:	497b      	ldr	r1, [pc, #492]	; (8002860 <HAL_I2C_Mem_Read+0x4c4>)
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	f000 fa77 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e0e9      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002694:	b672      	cpsid	i
}
 8002696:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691a      	ldr	r2, [r3, #16]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	1c5a      	adds	r2, r3, #1
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026b4:	3b01      	subs	r3, #1
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026c0:	b29b      	uxth	r3, r3
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80026ca:	4b66      	ldr	r3, [pc, #408]	; (8002864 <HAL_I2C_Mem_Read+0x4c8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	08db      	lsrs	r3, r3, #3
 80026d0:	4a65      	ldr	r2, [pc, #404]	; (8002868 <HAL_I2C_Mem_Read+0x4cc>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	0a1a      	lsrs	r2, r3, #8
 80026d8:	4613      	mov	r3, r2
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	4413      	add	r3, r2
 80026de:	00da      	lsls	r2, r3, #3
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80026e4:	6a3b      	ldr	r3, [r7, #32]
 80026e6:	3b01      	subs	r3, #1
 80026e8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d118      	bne.n	8002722 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2200      	movs	r2, #0
 80026f4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f043 0220 	orr.w	r2, r3, #32
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002712:	b662      	cpsie	i
}
 8002714:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e09a      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b04      	cmp	r3, #4
 800272e:	d1d9      	bne.n	80026e4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	691a      	ldr	r2, [r3, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	b2d2      	uxtb	r2, r2
 800274c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	1c5a      	adds	r2, r3, #1
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	3b01      	subs	r3, #1
 800275e:	b29a      	uxth	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002772:	b662      	cpsie	i
}
 8002774:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	691a      	ldr	r2, [r3, #16]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	b2d2      	uxtb	r2, r2
 8002782:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002788:	1c5a      	adds	r2, r3, #1
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002792:	3b01      	subs	r3, #1
 8002794:	b29a      	uxth	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279e:	b29b      	uxth	r3, r3
 80027a0:	3b01      	subs	r3, #1
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027a8:	e042      	b.n	8002830 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fb32 	bl	8002e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e04c      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	691a      	ldr	r2, [r3, #16]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	1c5a      	adds	r2, r3, #1
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027da:	3b01      	subs	r3, #1
 80027dc:	b29a      	uxth	r2, r3
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027e6:	b29b      	uxth	r3, r3
 80027e8:	3b01      	subs	r3, #1
 80027ea:	b29a      	uxth	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	f003 0304 	and.w	r3, r3, #4
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d118      	bne.n	8002830 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691a      	ldr	r2, [r3, #16]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	b2d2      	uxtb	r2, r2
 800280a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002810:	1c5a      	adds	r2, r3, #1
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	3b01      	subs	r3, #1
 800282a:	b29a      	uxth	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	f47f ae94 	bne.w	8002562 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2220      	movs	r2, #32
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002856:	2302      	movs	r3, #2
  }
}
 8002858:	4618      	mov	r0, r3
 800285a:	3728      	adds	r7, #40	; 0x28
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	00010004 	.word	0x00010004
 8002864:	20000000 	.word	0x20000000
 8002868:	14f8b589 	.word	0x14f8b589

0800286c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b088      	sub	sp, #32
 8002870:	af02      	add	r7, sp, #8
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	4608      	mov	r0, r1
 8002876:	4611      	mov	r1, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4603      	mov	r3, r0
 800287c:	817b      	strh	r3, [r7, #10]
 800287e:	460b      	mov	r3, r1
 8002880:	813b      	strh	r3, [r7, #8]
 8002882:	4613      	mov	r3, r2
 8002884:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002894:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f960 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00d      	beq.n	80028ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028bc:	d103      	bne.n	80028c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e05f      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80028ca:	897b      	ldrh	r3, [r7, #10]
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	461a      	mov	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80028d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	6a3a      	ldr	r2, [r7, #32]
 80028de:	492d      	ldr	r1, [pc, #180]	; (8002994 <I2C_RequestMemoryWrite+0x128>)
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f998 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e04c      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	617b      	str	r3, [r7, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	617b      	str	r3, [r7, #20]
 8002904:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002908:	6a39      	ldr	r1, [r7, #32]
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fa02 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00d      	beq.n	8002932 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	2b04      	cmp	r3, #4
 800291c:	d107      	bne.n	800292e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800292c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e02b      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002932:	88fb      	ldrh	r3, [r7, #6]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002938:	893b      	ldrh	r3, [r7, #8]
 800293a:	b2da      	uxtb	r2, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	611a      	str	r2, [r3, #16]
 8002942:	e021      	b.n	8002988 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002944:	893b      	ldrh	r3, [r7, #8]
 8002946:	0a1b      	lsrs	r3, r3, #8
 8002948:	b29b      	uxth	r3, r3
 800294a:	b2da      	uxtb	r2, r3
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002952:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002954:	6a39      	ldr	r1, [r7, #32]
 8002956:	68f8      	ldr	r0, [r7, #12]
 8002958:	f000 f9dc 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 800295c:	4603      	mov	r3, r0
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00d      	beq.n	800297e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	2b04      	cmp	r3, #4
 8002968:	d107      	bne.n	800297a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002978:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e005      	b.n	800298a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800297e:	893b      	ldrh	r3, [r7, #8]
 8002980:	b2da      	uxtb	r2, r3
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	00010002 	.word	0x00010002

08002998 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b088      	sub	sp, #32
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	4608      	mov	r0, r1
 80029a2:	4611      	mov	r1, r2
 80029a4:	461a      	mov	r2, r3
 80029a6:	4603      	mov	r3, r0
 80029a8:	817b      	strh	r3, [r7, #10]
 80029aa:	460b      	mov	r3, r1
 80029ac:	813b      	strh	r3, [r7, #8]
 80029ae:	4613      	mov	r3, r2
 80029b0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029c0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	9300      	str	r3, [sp, #0]
 80029d6:	6a3b      	ldr	r3, [r7, #32]
 80029d8:	2200      	movs	r2, #0
 80029da:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f8c2 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d00d      	beq.n	8002a06 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f8:	d103      	bne.n	8002a02 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	e0aa      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002a06:	897b      	ldrh	r3, [r7, #10]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	461a      	mov	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a14:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	6a3a      	ldr	r2, [r7, #32]
 8002a1a:	4952      	ldr	r1, [pc, #328]	; (8002b64 <I2C_RequestMemoryRead+0x1cc>)
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 f8fa 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e097      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	617b      	str	r3, [r7, #20]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	617b      	str	r3, [r7, #20]
 8002a40:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a44:	6a39      	ldr	r1, [r7, #32]
 8002a46:	68f8      	ldr	r0, [r7, #12]
 8002a48:	f000 f964 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d00d      	beq.n	8002a6e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	2b04      	cmp	r3, #4
 8002a58:	d107      	bne.n	8002a6a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a68:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e076      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002a6e:	88fb      	ldrh	r3, [r7, #6]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d105      	bne.n	8002a80 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002a74:	893b      	ldrh	r3, [r7, #8]
 8002a76:	b2da      	uxtb	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	e021      	b.n	8002ac4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002a80:	893b      	ldrh	r3, [r7, #8]
 8002a82:	0a1b      	lsrs	r3, r3, #8
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	b2da      	uxtb	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	6a39      	ldr	r1, [r7, #32]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 f93e 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00d      	beq.n	8002aba <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d107      	bne.n	8002ab6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ab4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e050      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002aba:	893b      	ldrh	r3, [r7, #8]
 8002abc:	b2da      	uxtb	r2, r3
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac6:	6a39      	ldr	r1, [r7, #32]
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f000 f923 	bl	8002d14 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00d      	beq.n	8002af0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d107      	bne.n	8002aec <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aea:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002aec:	2301      	movs	r3, #1
 8002aee:	e035      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002afe:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b0c:	68f8      	ldr	r0, [r7, #12]
 8002b0e:	f000 f82b 	bl	8002b68 <I2C_WaitOnFlagUntilTimeout>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00d      	beq.n	8002b34 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b26:	d103      	bne.n	8002b30 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e013      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002b34:	897b      	ldrh	r3, [r7, #10]
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	b2da      	uxtb	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	6a3a      	ldr	r2, [r7, #32]
 8002b48:	4906      	ldr	r1, [pc, #24]	; (8002b64 <I2C_RequestMemoryRead+0x1cc>)
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f863 	bl	8002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d001      	beq.n	8002b5a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e000      	b.n	8002b5c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3718      	adds	r7, #24
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	00010002 	.word	0x00010002

08002b68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	60f8      	str	r0, [r7, #12]
 8002b70:	60b9      	str	r1, [r7, #8]
 8002b72:	603b      	str	r3, [r7, #0]
 8002b74:	4613      	mov	r3, r2
 8002b76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002b78:	e025      	b.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b80:	d021      	beq.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b82:	f7fe ff0b 	bl	800199c <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	683a      	ldr	r2, [r7, #0]
 8002b8e:	429a      	cmp	r2, r3
 8002b90:	d302      	bcc.n	8002b98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d116      	bne.n	8002bc6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	2220      	movs	r2, #32
 8002ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0220 	orr.w	r2, r3, #32
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e023      	b.n	8002c0e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	0c1b      	lsrs	r3, r3, #16
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d10d      	bne.n	8002bec <I2C_WaitOnFlagUntilTimeout+0x84>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	43da      	mvns	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	bf0c      	ite	eq
 8002be2:	2301      	moveq	r3, #1
 8002be4:	2300      	movne	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	461a      	mov	r2, r3
 8002bea:	e00c      	b.n	8002c06 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	43da      	mvns	r2, r3
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	bf0c      	ite	eq
 8002bfe:	2301      	moveq	r3, #1
 8002c00:	2300      	movne	r3, #0
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d0b6      	beq.n	8002b7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b084      	sub	sp, #16
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c24:	e051      	b.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c34:	d123      	bne.n	8002c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c44:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c4e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2220      	movs	r2, #32
 8002c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	f043 0204 	orr.w	r2, r3, #4
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2200      	movs	r2, #0
 8002c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e046      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d021      	beq.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c86:	f7fe fe89 	bl	800199c <HAL_GetTick>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	1ad3      	subs	r3, r2, r3
 8002c90:	687a      	ldr	r2, [r7, #4]
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d302      	bcc.n	8002c9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d116      	bne.n	8002cca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f043 0220 	orr.w	r2, r3, #32
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e020      	b.n	8002d0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	0c1b      	lsrs	r3, r3, #16
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d10c      	bne.n	8002cee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	4013      	ands	r3, r2
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	bf14      	ite	ne
 8002ce6:	2301      	movne	r3, #1
 8002ce8:	2300      	moveq	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	e00b      	b.n	8002d06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	bf14      	ite	ne
 8002d00:	2301      	movne	r3, #1
 8002d02:	2300      	moveq	r3, #0
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d18d      	bne.n	8002c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d20:	e02d      	b.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f8ce 	bl	8002ec4 <I2C_IsAcknowledgeFailed>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e02d      	b.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d021      	beq.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe fe2f 	bl	800199c <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d116      	bne.n	8002d7e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2200      	movs	r2, #0
 8002d54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6a:	f043 0220 	orr.w	r2, r3, #32
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e007      	b.n	8002d8e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
 8002d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d88:	2b80      	cmp	r3, #128	; 0x80
 8002d8a:	d1ca      	bne.n	8002d22 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d96:	b580      	push	{r7, lr}
 8002d98:	b084      	sub	sp, #16
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	60f8      	str	r0, [r7, #12]
 8002d9e:	60b9      	str	r1, [r7, #8]
 8002da0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002da2:	e02d      	b.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	f000 f88d 	bl	8002ec4 <I2C_IsAcknowledgeFailed>
 8002daa:	4603      	mov	r3, r0
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d001      	beq.n	8002db4 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e02d      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dba:	d021      	beq.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dbc:	f7fe fdee 	bl	800199c <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	68ba      	ldr	r2, [r7, #8]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d302      	bcc.n	8002dd2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d116      	bne.n	8002e00 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e007      	b.n	8002e10 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	f003 0304 	and.w	r3, r3, #4
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	d1ca      	bne.n	8002da4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b084      	sub	sp, #16
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002e24:	e042      	b.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	695b      	ldr	r3, [r3, #20]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d119      	bne.n	8002e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f06f 0210 	mvn.w	r2, #16
 8002e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e029      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e68:	f7fe fd98 	bl	800199c <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68ba      	ldr	r2, [r7, #8]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d302      	bcc.n	8002e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d116      	bne.n	8002eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2220      	movs	r2, #32
 8002e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	f043 0220 	orr.w	r2, r3, #32
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	695b      	ldr	r3, [r3, #20]
 8002eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eb6:	2b40      	cmp	r3, #64	; 0x40
 8002eb8:	d1b5      	bne.n	8002e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002eba:	2300      	movs	r3, #0
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eda:	d11b      	bne.n	8002f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2220      	movs	r2, #32
 8002ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f00:	f043 0204 	orr.w	r2, r3, #4
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e000      	b.n	8002f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bc80      	pop	{r7}
 8002f1e:	4770      	bx	lr

08002f20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e272      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0301 	and.w	r3, r3, #1
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f000 8087 	beq.w	800304e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f40:	4b92      	ldr	r3, [pc, #584]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f003 030c 	and.w	r3, r3, #12
 8002f48:	2b04      	cmp	r3, #4
 8002f4a:	d00c      	beq.n	8002f66 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f4c:	4b8f      	ldr	r3, [pc, #572]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 030c 	and.w	r3, r3, #12
 8002f54:	2b08      	cmp	r3, #8
 8002f56:	d112      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
 8002f58:	4b8c      	ldr	r3, [pc, #560]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d10b      	bne.n	8002f7e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f66:	4b89      	ldr	r3, [pc, #548]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d06c      	beq.n	800304c <HAL_RCC_OscConfig+0x12c>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d168      	bne.n	800304c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e24c      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x76>
 8002f88:	4b80      	ldr	r3, [pc, #512]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a7f      	ldr	r2, [pc, #508]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f92:	6013      	str	r3, [r2, #0]
 8002f94:	e02e      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x98>
 8002f9e:	4b7b      	ldr	r3, [pc, #492]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7a      	ldr	r2, [pc, #488]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b78      	ldr	r3, [pc, #480]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a77      	ldr	r2, [pc, #476]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb4:	6013      	str	r3, [r2, #0]
 8002fb6:	e01d      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fc0:	d10c      	bne.n	8002fdc <HAL_RCC_OscConfig+0xbc>
 8002fc2:	4b72      	ldr	r3, [pc, #456]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a71      	ldr	r2, [pc, #452]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fcc:	6013      	str	r3, [r2, #0]
 8002fce:	4b6f      	ldr	r3, [pc, #444]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a6e      	ldr	r2, [pc, #440]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e00b      	b.n	8002ff4 <HAL_RCC_OscConfig+0xd4>
 8002fdc:	4b6b      	ldr	r3, [pc, #428]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a6a      	ldr	r2, [pc, #424]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	6013      	str	r3, [r2, #0]
 8002fe8:	4b68      	ldr	r3, [pc, #416]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a67      	ldr	r2, [pc, #412]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8002fee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ff2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d013      	beq.n	8003024 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ffc:	f7fe fcce 	bl	800199c <HAL_GetTick>
 8003000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003002:	e008      	b.n	8003016 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003004:	f7fe fcca 	bl	800199c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b64      	cmp	r3, #100	; 0x64
 8003010:	d901      	bls.n	8003016 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	e200      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003016:	4b5d      	ldr	r3, [pc, #372]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0f0      	beq.n	8003004 <HAL_RCC_OscConfig+0xe4>
 8003022:	e014      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003024:	f7fe fcba 	bl	800199c <HAL_GetTick>
 8003028:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800302a:	e008      	b.n	800303e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800302c:	f7fe fcb6 	bl	800199c <HAL_GetTick>
 8003030:	4602      	mov	r2, r0
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	1ad3      	subs	r3, r2, r3
 8003036:	2b64      	cmp	r3, #100	; 0x64
 8003038:	d901      	bls.n	800303e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e1ec      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800303e:	4b53      	ldr	r3, [pc, #332]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d1f0      	bne.n	800302c <HAL_RCC_OscConfig+0x10c>
 800304a:	e000      	b.n	800304e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800304c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d063      	beq.n	8003122 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800305a:	4b4c      	ldr	r3, [pc, #304]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 030c 	and.w	r3, r3, #12
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00b      	beq.n	800307e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003066:	4b49      	ldr	r3, [pc, #292]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	f003 030c 	and.w	r3, r3, #12
 800306e:	2b08      	cmp	r3, #8
 8003070:	d11c      	bne.n	80030ac <HAL_RCC_OscConfig+0x18c>
 8003072:	4b46      	ldr	r3, [pc, #280]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d116      	bne.n	80030ac <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	4b43      	ldr	r3, [pc, #268]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d005      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	2b01      	cmp	r3, #1
 8003090:	d001      	beq.n	8003096 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e1c0      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003096:	4b3d      	ldr	r3, [pc, #244]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4939      	ldr	r1, [pc, #228]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030aa:	e03a      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	691b      	ldr	r3, [r3, #16]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d020      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030b4:	4b36      	ldr	r3, [pc, #216]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030ba:	f7fe fc6f 	bl	800199c <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c2:	f7fe fc6b 	bl	800199c <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e1a1      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0302 	and.w	r3, r3, #2
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b2a      	ldr	r3, [pc, #168]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	4927      	ldr	r1, [pc, #156]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]
 80030f4:	e015      	b.n	8003122 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030f6:	4b26      	ldr	r3, [pc, #152]	; (8003190 <HAL_RCC_OscConfig+0x270>)
 80030f8:	2200      	movs	r2, #0
 80030fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fc:	f7fe fc4e 	bl	800199c <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003104:	f7fe fc4a 	bl	800199c <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e180      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003116:	4b1d      	ldr	r3, [pc, #116]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f0      	bne.n	8003104 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0308 	and.w	r3, r3, #8
 800312a:	2b00      	cmp	r3, #0
 800312c:	d03a      	beq.n	80031a4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d019      	beq.n	800316a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 8003138:	2201      	movs	r2, #1
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fe fc2e 	bl	800199c <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe fc2a 	bl	800199c <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e160      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003156:	4b0d      	ldr	r3, [pc, #52]	; (800318c <HAL_RCC_OscConfig+0x26c>)
 8003158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d0f0      	beq.n	8003144 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003162:	2001      	movs	r0, #1
 8003164:	f000 fb08 	bl	8003778 <RCC_Delay>
 8003168:	e01c      	b.n	80031a4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800316a:	4b0a      	ldr	r3, [pc, #40]	; (8003194 <HAL_RCC_OscConfig+0x274>)
 800316c:	2200      	movs	r2, #0
 800316e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003170:	f7fe fc14 	bl	800199c <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003176:	e00f      	b.n	8003198 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003178:	f7fe fc10 	bl	800199c <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d908      	bls.n	8003198 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e146      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
 800318a:	bf00      	nop
 800318c:	40021000 	.word	0x40021000
 8003190:	42420000 	.word	0x42420000
 8003194:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003198:	4b92      	ldr	r3, [pc, #584]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319c:	f003 0302 	and.w	r3, r3, #2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e9      	bne.n	8003178 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	f000 80a6 	beq.w	80032fe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031b6:	4b8b      	ldr	r3, [pc, #556]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10d      	bne.n	80031de <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031c2:	4b88      	ldr	r3, [pc, #544]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	69db      	ldr	r3, [r3, #28]
 80031c6:	4a87      	ldr	r2, [pc, #540]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031cc:	61d3      	str	r3, [r2, #28]
 80031ce:	4b85      	ldr	r3, [pc, #532]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d6:	60bb      	str	r3, [r7, #8]
 80031d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031da:	2301      	movs	r3, #1
 80031dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031de:	4b82      	ldr	r3, [pc, #520]	; (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d118      	bne.n	800321c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ea:	4b7f      	ldr	r3, [pc, #508]	; (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a7e      	ldr	r2, [pc, #504]	; (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 80031f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f6:	f7fe fbd1 	bl	800199c <HAL_GetTick>
 80031fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fc:	e008      	b.n	8003210 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fe:	f7fe fbcd 	bl	800199c <HAL_GetTick>
 8003202:	4602      	mov	r2, r0
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	2b64      	cmp	r3, #100	; 0x64
 800320a:	d901      	bls.n	8003210 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800320c:	2303      	movs	r3, #3
 800320e:	e103      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003210:	4b75      	ldr	r3, [pc, #468]	; (80033e8 <HAL_RCC_OscConfig+0x4c8>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003218:	2b00      	cmp	r3, #0
 800321a:	d0f0      	beq.n	80031fe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d106      	bne.n	8003232 <HAL_RCC_OscConfig+0x312>
 8003224:	4b6f      	ldr	r3, [pc, #444]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003226:	6a1b      	ldr	r3, [r3, #32]
 8003228:	4a6e      	ldr	r2, [pc, #440]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	f043 0301 	orr.w	r3, r3, #1
 800322e:	6213      	str	r3, [r2, #32]
 8003230:	e02d      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x334>
 800323a:	4b6a      	ldr	r3, [pc, #424]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	6a1b      	ldr	r3, [r3, #32]
 800323e:	4a69      	ldr	r2, [pc, #420]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	f023 0301 	bic.w	r3, r3, #1
 8003244:	6213      	str	r3, [r2, #32]
 8003246:	4b67      	ldr	r3, [pc, #412]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	4a66      	ldr	r2, [pc, #408]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800324c:	f023 0304 	bic.w	r3, r3, #4
 8003250:	6213      	str	r3, [r2, #32]
 8003252:	e01c      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	2b05      	cmp	r3, #5
 800325a:	d10c      	bne.n	8003276 <HAL_RCC_OscConfig+0x356>
 800325c:	4b61      	ldr	r3, [pc, #388]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800325e:	6a1b      	ldr	r3, [r3, #32]
 8003260:	4a60      	ldr	r2, [pc, #384]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003262:	f043 0304 	orr.w	r3, r3, #4
 8003266:	6213      	str	r3, [r2, #32]
 8003268:	4b5e      	ldr	r3, [pc, #376]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	4a5d      	ldr	r2, [pc, #372]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800326e:	f043 0301 	orr.w	r3, r3, #1
 8003272:	6213      	str	r3, [r2, #32]
 8003274:	e00b      	b.n	800328e <HAL_RCC_OscConfig+0x36e>
 8003276:	4b5b      	ldr	r3, [pc, #364]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	4a5a      	ldr	r2, [pc, #360]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 0301 	bic.w	r3, r3, #1
 8003280:	6213      	str	r3, [r2, #32]
 8003282:	4b58      	ldr	r3, [pc, #352]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003284:	6a1b      	ldr	r3, [r3, #32]
 8003286:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003288:	f023 0304 	bic.w	r3, r3, #4
 800328c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d015      	beq.n	80032c2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003296:	f7fe fb81 	bl	800199c <HAL_GetTick>
 800329a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329c:	e00a      	b.n	80032b4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800329e:	f7fe fb7d 	bl	800199c <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d901      	bls.n	80032b4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e0b1      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b4:	4b4b      	ldr	r3, [pc, #300]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d0ee      	beq.n	800329e <HAL_RCC_OscConfig+0x37e>
 80032c0:	e014      	b.n	80032ec <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c2:	f7fe fb6b 	bl	800199c <HAL_GetTick>
 80032c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c8:	e00a      	b.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ca:	f7fe fb67 	bl	800199c <HAL_GetTick>
 80032ce:	4602      	mov	r2, r0
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	1ad3      	subs	r3, r2, r3
 80032d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d8:	4293      	cmp	r3, r2
 80032da:	d901      	bls.n	80032e0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032dc:	2303      	movs	r3, #3
 80032de:	e09b      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e0:	4b40      	ldr	r3, [pc, #256]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032e2:	6a1b      	ldr	r3, [r3, #32]
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d1ee      	bne.n	80032ca <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d105      	bne.n	80032fe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f2:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	4a3b      	ldr	r2, [pc, #236]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80032f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	2b00      	cmp	r3, #0
 8003304:	f000 8087 	beq.w	8003416 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003308:	4b36      	ldr	r3, [pc, #216]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f003 030c 	and.w	r3, r3, #12
 8003310:	2b08      	cmp	r3, #8
 8003312:	d061      	beq.n	80033d8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	69db      	ldr	r3, [r3, #28]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d146      	bne.n	80033aa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b33      	ldr	r3, [pc, #204]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800331e:	2200      	movs	r2, #0
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003322:	f7fe fb3b 	bl	800199c <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fb37 	bl	800199c <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e06d      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333c:	4b29      	ldr	r3, [pc, #164]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1f0      	bne.n	800332a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d108      	bne.n	8003364 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003352:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	4921      	ldr	r1, [pc, #132]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003364:	4b1f      	ldr	r3, [pc, #124]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a19      	ldr	r1, [r3, #32]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003374:	430b      	orrs	r3, r1
 8003376:	491b      	ldr	r1, [pc, #108]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 8003378:	4313      	orrs	r3, r2
 800337a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 800337e:	2201      	movs	r2, #1
 8003380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003382:	f7fe fb0b 	bl	800199c <HAL_GetTick>
 8003386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003388:	e008      	b.n	800339c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800338a:	f7fe fb07 	bl	800199c <HAL_GetTick>
 800338e:	4602      	mov	r2, r0
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	1ad3      	subs	r3, r2, r3
 8003394:	2b02      	cmp	r3, #2
 8003396:	d901      	bls.n	800339c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003398:	2303      	movs	r3, #3
 800339a:	e03d      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800339c:	4b11      	ldr	r3, [pc, #68]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d0f0      	beq.n	800338a <HAL_RCC_OscConfig+0x46a>
 80033a8:	e035      	b.n	8003416 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <HAL_RCC_OscConfig+0x4cc>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033b0:	f7fe faf4 	bl	800199c <HAL_GetTick>
 80033b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033b6:	e008      	b.n	80033ca <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033b8:	f7fe faf0 	bl	800199c <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d901      	bls.n	80033ca <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e026      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033ca:	4b06      	ldr	r3, [pc, #24]	; (80033e4 <HAL_RCC_OscConfig+0x4c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d1f0      	bne.n	80033b8 <HAL_RCC_OscConfig+0x498>
 80033d6:	e01e      	b.n	8003416 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d107      	bne.n	80033f0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e019      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
 80033e4:	40021000 	.word	0x40021000
 80033e8:	40007000 	.word	0x40007000
 80033ec:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <HAL_RCC_OscConfig+0x500>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	429a      	cmp	r2, r3
 8003402:	d106      	bne.n	8003412 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	429a      	cmp	r2, r3
 8003410:	d001      	beq.n	8003416 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e000      	b.n	8003418 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3718      	adds	r7, #24
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}
 8003420:	40021000 	.word	0x40021000

08003424 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d101      	bne.n	8003438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e0d0      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0307 	and.w	r3, r3, #7
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	429a      	cmp	r2, r3
 8003444:	d910      	bls.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 0207 	bic.w	r2, r3, #7
 800344e:	4965      	ldr	r1, [pc, #404]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	4313      	orrs	r3, r2
 8003454:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b63      	ldr	r3, [pc, #396]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e0b8      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0302 	and.w	r3, r3, #2
 8003470:	2b00      	cmp	r3, #0
 8003472:	d020      	beq.n	80034b6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f003 0304 	and.w	r3, r3, #4
 800347c:	2b00      	cmp	r3, #0
 800347e:	d005      	beq.n	800348c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003480:	4b59      	ldr	r3, [pc, #356]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	4a58      	ldr	r2, [pc, #352]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003486:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800348a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0308 	and.w	r3, r3, #8
 8003494:	2b00      	cmp	r3, #0
 8003496:	d005      	beq.n	80034a4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003498:	4b53      	ldr	r3, [pc, #332]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	4a52      	ldr	r2, [pc, #328]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800349e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80034a2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034a4:	4b50      	ldr	r3, [pc, #320]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	494d      	ldr	r1, [pc, #308]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d040      	beq.n	8003544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d115      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e07f      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034e2:	4b41      	ldr	r3, [pc, #260]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e073      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f2:	4b3d      	ldr	r3, [pc, #244]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0302 	and.w	r3, r3, #2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e06b      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003502:	4b39      	ldr	r3, [pc, #228]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f023 0203 	bic.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	4936      	ldr	r1, [pc, #216]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003514:	f7fe fa42 	bl	800199c <HAL_GetTick>
 8003518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	e00a      	b.n	8003532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800351c:	f7fe fa3e 	bl	800199c <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e053      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003532:	4b2d      	ldr	r3, [pc, #180]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f003 020c 	and.w	r2, r3, #12
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	429a      	cmp	r2, r3
 8003542:	d1eb      	bne.n	800351c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003544:	4b27      	ldr	r3, [pc, #156]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	683a      	ldr	r2, [r7, #0]
 800354e:	429a      	cmp	r2, r3
 8003550:	d210      	bcs.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003552:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 0207 	bic.w	r2, r3, #7
 800355a:	4922      	ldr	r1, [pc, #136]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	4313      	orrs	r3, r2
 8003560:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b20      	ldr	r3, [pc, #128]	; (80035e4 <HAL_RCC_ClockConfig+0x1c0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0307 	and.w	r3, r3, #7
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e032      	b.n	80035da <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0304 	and.w	r3, r3, #4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d008      	beq.n	8003592 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003580:	4b19      	ldr	r3, [pc, #100]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	4916      	ldr	r1, [pc, #88]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	d009      	beq.n	80035b2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800359e:	4b12      	ldr	r3, [pc, #72]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	490e      	ldr	r1, [pc, #56]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035b2:	f000 f821 	bl	80035f8 <HAL_RCC_GetSysClockFreq>
 80035b6:	4602      	mov	r2, r0
 80035b8:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	091b      	lsrs	r3, r3, #4
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	490a      	ldr	r1, [pc, #40]	; (80035ec <HAL_RCC_ClockConfig+0x1c8>)
 80035c4:	5ccb      	ldrb	r3, [r1, r3]
 80035c6:	fa22 f303 	lsr.w	r3, r2, r3
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_ClockConfig+0x1cc>)
 80035cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80035ce:	4b09      	ldr	r3, [pc, #36]	; (80035f4 <HAL_RCC_ClockConfig+0x1d0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd ffa6 	bl	8001524 <HAL_InitTick>

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40022000 	.word	0x40022000
 80035e8:	40021000 	.word	0x40021000
 80035ec:	08009bac 	.word	0x08009bac
 80035f0:	20000000 	.word	0x20000000
 80035f4:	20000004 	.word	0x20000004

080035f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035f8:	b490      	push	{r4, r7}
 80035fa:	b08a      	sub	sp, #40	; 0x28
 80035fc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035fe:	4b29      	ldr	r3, [pc, #164]	; (80036a4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003600:	1d3c      	adds	r4, r7, #4
 8003602:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003604:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003608:	f240 2301 	movw	r3, #513	; 0x201
 800360c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800360e:	2300      	movs	r3, #0
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	2300      	movs	r3, #0
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	2300      	movs	r3, #0
 8003618:	627b      	str	r3, [r7, #36]	; 0x24
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003622:	4b21      	ldr	r3, [pc, #132]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003628:	69fb      	ldr	r3, [r7, #28]
 800362a:	f003 030c 	and.w	r3, r3, #12
 800362e:	2b04      	cmp	r3, #4
 8003630:	d002      	beq.n	8003638 <HAL_RCC_GetSysClockFreq+0x40>
 8003632:	2b08      	cmp	r3, #8
 8003634:	d003      	beq.n	800363e <HAL_RCC_GetSysClockFreq+0x46>
 8003636:	e02b      	b.n	8003690 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003638:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb4>)
 800363a:	623b      	str	r3, [r7, #32]
      break;
 800363c:	e02b      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	0c9b      	lsrs	r3, r3, #18
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	3328      	adds	r3, #40	; 0x28
 8003648:	443b      	add	r3, r7
 800364a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800364e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d012      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800365a:	4b13      	ldr	r3, [pc, #76]	; (80036a8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	0c5b      	lsrs	r3, r3, #17
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	3328      	adds	r3, #40	; 0x28
 8003666:	443b      	add	r3, r7
 8003668:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800366c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800366e:	697b      	ldr	r3, [r7, #20]
 8003670:	4a0e      	ldr	r2, [pc, #56]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003672:	fb03 f202 	mul.w	r2, r3, r2
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	627b      	str	r3, [r7, #36]	; 0x24
 800367e:	e004      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	4a0b      	ldr	r2, [pc, #44]	; (80036b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003684:	fb02 f303 	mul.w	r3, r2, r3
 8003688:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800368a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368c:	623b      	str	r3, [r7, #32]
      break;
 800368e:	e002      	b.n	8003696 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003690:	4b06      	ldr	r3, [pc, #24]	; (80036ac <HAL_RCC_GetSysClockFreq+0xb4>)
 8003692:	623b      	str	r3, [r7, #32]
      break;
 8003694:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003696:	6a3b      	ldr	r3, [r7, #32]
}
 8003698:	4618      	mov	r0, r3
 800369a:	3728      	adds	r7, #40	; 0x28
 800369c:	46bd      	mov	sp, r7
 800369e:	bc90      	pop	{r4, r7}
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	08009b00 	.word	0x08009b00
 80036a8:	40021000 	.word	0x40021000
 80036ac:	007a1200 	.word	0x007a1200
 80036b0:	003d0900 	.word	0x003d0900

080036b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b4:	b480      	push	{r7}
 80036b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036b8:	4b02      	ldr	r3, [pc, #8]	; (80036c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80036ba:	681b      	ldr	r3, [r3, #0]
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	bc80      	pop	{r7}
 80036c2:	4770      	bx	lr
 80036c4:	20000000 	.word	0x20000000

080036c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80036cc:	f7ff fff2 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036d0:	4602      	mov	r2, r0
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	0a1b      	lsrs	r3, r3, #8
 80036d8:	f003 0307 	and.w	r3, r3, #7
 80036dc:	4903      	ldr	r1, [pc, #12]	; (80036ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80036de:	5ccb      	ldrb	r3, [r1, r3]
 80036e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	08009bbc 	.word	0x08009bbc

080036f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036f4:	f7ff ffde 	bl	80036b4 <HAL_RCC_GetHCLKFreq>
 80036f8:	4602      	mov	r2, r0
 80036fa:	4b05      	ldr	r3, [pc, #20]	; (8003710 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0adb      	lsrs	r3, r3, #11
 8003700:	f003 0307 	and.w	r3, r3, #7
 8003704:	4903      	ldr	r1, [pc, #12]	; (8003714 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003706:	5ccb      	ldrb	r3, [r1, r3]
 8003708:	fa22 f303 	lsr.w	r3, r2, r3
}
 800370c:	4618      	mov	r0, r3
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000
 8003714:	08009bbc 	.word	0x08009bbc

08003718 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	220f      	movs	r2, #15
 8003726:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003728:	4b11      	ldr	r3, [pc, #68]	; (8003770 <HAL_RCC_GetClockConfig+0x58>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 0203 	and.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003734:	4b0e      	ldr	r3, [pc, #56]	; (8003770 <HAL_RCC_GetClockConfig+0x58>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003740:	4b0b      	ldr	r3, [pc, #44]	; (8003770 <HAL_RCC_GetClockConfig+0x58>)
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800374c:	4b08      	ldr	r3, [pc, #32]	; (8003770 <HAL_RCC_GetClockConfig+0x58>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	08db      	lsrs	r3, r3, #3
 8003752:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800375a:	4b06      	ldr	r3, [pc, #24]	; (8003774 <HAL_RCC_GetClockConfig+0x5c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0207 	and.w	r2, r3, #7
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003766:	bf00      	nop
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr
 8003770:	40021000 	.word	0x40021000
 8003774:	40022000 	.word	0x40022000

08003778 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <RCC_Delay+0x34>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a0a      	ldr	r2, [pc, #40]	; (80037b0 <RCC_Delay+0x38>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0a5b      	lsrs	r3, r3, #9
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	fb02 f303 	mul.w	r3, r2, r3
 8003792:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003794:	bf00      	nop
  }
  while (Delay --);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	1e5a      	subs	r2, r3, #1
 800379a:	60fa      	str	r2, [r7, #12]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d1f9      	bne.n	8003794 <RCC_Delay+0x1c>
}
 80037a0:	bf00      	nop
 80037a2:	bf00      	nop
 80037a4:	3714      	adds	r7, #20
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bc80      	pop	{r7}
 80037aa:	4770      	bx	lr
 80037ac:	20000000 	.word	0x20000000
 80037b0:	10624dd3 	.word	0x10624dd3

080037b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e041      	b.n	800384a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d106      	bne.n	80037e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 f839 	bl	8003852 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2202      	movs	r2, #2
 80037e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3304      	adds	r3, #4
 80037f0:	4619      	mov	r1, r3
 80037f2:	4610      	mov	r0, r2
 80037f4:	f000 f9b4 	bl	8003b60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003848:	2300      	movs	r3, #0
}
 800384a:	4618      	mov	r0, r3
 800384c:	3708      	adds	r7, #8
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}

08003852 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	bc80      	pop	{r7}
 8003862:	4770      	bx	lr

08003864 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003864:	b480      	push	{r7}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d001      	beq.n	800387c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e03a      	b.n	80038f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2202      	movs	r2, #2
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a18      	ldr	r2, [pc, #96]	; (80038fc <HAL_TIM_Base_Start_IT+0x98>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d00e      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a6:	d009      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a14      	ldr	r2, [pc, #80]	; (8003900 <HAL_TIM_Base_Start_IT+0x9c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d004      	beq.n	80038bc <HAL_TIM_Base_Start_IT+0x58>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_TIM_Base_Start_IT+0xa0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d111      	bne.n	80038e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2b06      	cmp	r3, #6
 80038cc:	d010      	beq.n	80038f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f042 0201 	orr.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038de:	e007      	b.n	80038f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f042 0201 	orr.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3714      	adds	r7, #20
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bc80      	pop	{r7}
 80038fa:	4770      	bx	lr
 80038fc:	40012c00 	.word	0x40012c00
 8003900:	40000400 	.word	0x40000400
 8003904:	40000800 	.word	0x40000800

08003908 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b02      	cmp	r3, #2
 800391c:	d122      	bne.n	8003964 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	f003 0302 	and.w	r3, r3, #2
 8003928:	2b02      	cmp	r3, #2
 800392a:	d11b      	bne.n	8003964 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0202 	mvn.w	r2, #2
 8003934:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	699b      	ldr	r3, [r3, #24]
 8003942:	f003 0303 	and.w	r3, r3, #3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d003      	beq.n	8003952 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 f8ed 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 8003950:	e005      	b.n	800395e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 f8e0 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f8ef 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	f003 0304 	and.w	r3, r3, #4
 800396e:	2b04      	cmp	r3, #4
 8003970:	d122      	bne.n	80039b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	f003 0304 	and.w	r3, r3, #4
 800397c:	2b04      	cmp	r3, #4
 800397e:	d11b      	bne.n	80039b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f06f 0204 	mvn.w	r2, #4
 8003988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2202      	movs	r2, #2
 800398e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	699b      	ldr	r3, [r3, #24]
 8003996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8c3 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 80039a4:	e005      	b.n	80039b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 f8b6 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f8c5 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b08      	cmp	r3, #8
 80039c4:	d122      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	f003 0308 	and.w	r3, r3, #8
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d11b      	bne.n	8003a0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f06f 0208 	mvn.w	r2, #8
 80039dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2204      	movs	r2, #4
 80039e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f003 0303 	and.w	r3, r3, #3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f000 f899 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 80039f8:	e005      	b.n	8003a06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 f88c 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 f89b 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b10      	cmp	r3, #16
 8003a18:	d122      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d11b      	bne.n	8003a60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f06f 0210 	mvn.w	r2, #16
 8003a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2208      	movs	r2, #8
 8003a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f000 f86f 	bl	8003b2a <HAL_TIM_IC_CaptureCallback>
 8003a4c:	e005      	b.n	8003a5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f000 f862 	bl	8003b18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f871 	bl	8003b3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d10e      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d107      	bne.n	8003a8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f06f 0201 	mvn.w	r2, #1
 8003a84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7fd fc44 	bl	8001314 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b80      	cmp	r3, #128	; 0x80
 8003a98:	d10e      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d107      	bne.n	8003ab8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ab0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	f000 f8bf 	bl	8003c36 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d107      	bne.n	8003ae4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f835 	bl	8003b4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0320 	and.w	r3, r3, #32
 8003aee:	2b20      	cmp	r3, #32
 8003af0:	d10e      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b20      	cmp	r3, #32
 8003afe:	d107      	bne.n	8003b10 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0220 	mvn.w	r2, #32
 8003b08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f88a 	bl	8003c24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bc80      	pop	{r7}
 8003b28:	4770      	bx	lr

08003b2a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	b083      	sub	sp, #12
 8003b2e:	af00      	add	r7, sp, #0
 8003b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b083      	sub	sp, #12
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003b44:	bf00      	nop
 8003b46:	370c      	adds	r7, #12
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bc80      	pop	{r7}
 8003b4c:	4770      	bx	lr

08003b4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr

08003b60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <TIM_Base_SetConfig+0xb8>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_Base_SetConfig+0x30>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7e:	d007      	beq.n	8003b90 <TIM_Base_SetConfig+0x30>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a26      	ldr	r2, [pc, #152]	; (8003c1c <TIM_Base_SetConfig+0xbc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_Base_SetConfig+0x30>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a25      	ldr	r2, [pc, #148]	; (8003c20 <TIM_Base_SetConfig+0xc0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d108      	bne.n	8003ba2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a1c      	ldr	r2, [pc, #112]	; (8003c18 <TIM_Base_SetConfig+0xb8>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00b      	beq.n	8003bc2 <TIM_Base_SetConfig+0x62>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb0:	d007      	beq.n	8003bc2 <TIM_Base_SetConfig+0x62>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a19      	ldr	r2, [pc, #100]	; (8003c1c <TIM_Base_SetConfig+0xbc>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d003      	beq.n	8003bc2 <TIM_Base_SetConfig+0x62>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a18      	ldr	r2, [pc, #96]	; (8003c20 <TIM_Base_SetConfig+0xc0>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d108      	bne.n	8003bd4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a07      	ldr	r2, [pc, #28]	; (8003c18 <TIM_Base_SetConfig+0xb8>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d103      	bne.n	8003c08 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	691a      	ldr	r2, [r3, #16]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	615a      	str	r2, [r3, #20]
}
 8003c0e:	bf00      	nop
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr
 8003c18:	40012c00 	.word	0x40012c00
 8003c1c:	40000400 	.word	0x40000400
 8003c20:	40000800 	.word	0x40000800

08003c24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c24:	b480      	push	{r7}
 8003c26:	b083      	sub	sp, #12
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bc80      	pop	{r7}
 8003c34:	4770      	bx	lr

08003c36 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c36:	b480      	push	{r7}
 8003c38:	b083      	sub	sp, #12
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c3e:	bf00      	nop
 8003c40:	370c      	adds	r7, #12
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bc80      	pop	{r7}
 8003c46:	4770      	bx	lr

08003c48 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d101      	bne.n	8003c5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e03f      	b.n	8003cda <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d106      	bne.n	8003c74 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7fd fbde 	bl	8001430 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2224      	movs	r2, #36	; 0x24
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c8a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f000 f905 	bl	8003e9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691a      	ldr	r2, [r3, #16]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	695a      	ldr	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	68da      	ldr	r2, [r3, #12]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cc0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b08a      	sub	sp, #40	; 0x28
 8003ce6:	af02      	add	r7, sp, #8
 8003ce8:	60f8      	str	r0, [r7, #12]
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	603b      	str	r3, [r7, #0]
 8003cee:	4613      	mov	r3, r2
 8003cf0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	2b20      	cmp	r3, #32
 8003d00:	d17c      	bne.n	8003dfc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d002      	beq.n	8003d0e <HAL_UART_Transmit+0x2c>
 8003d08:	88fb      	ldrh	r3, [r7, #6]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d101      	bne.n	8003d12 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e075      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d18:	2b01      	cmp	r3, #1
 8003d1a:	d101      	bne.n	8003d20 <HAL_UART_Transmit+0x3e>
 8003d1c:	2302      	movs	r3, #2
 8003d1e:	e06e      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2221      	movs	r2, #33	; 0x21
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d36:	f7fd fe31 	bl	800199c <HAL_GetTick>
 8003d3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	88fa      	ldrh	r2, [r7, #6]
 8003d46:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d50:	d108      	bne.n	8003d64 <HAL_UART_Transmit+0x82>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	691b      	ldr	r3, [r3, #16]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d104      	bne.n	8003d64 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	e003      	b.n	8003d6c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d74:	e02a      	b.n	8003dcc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2180      	movs	r1, #128	; 0x80
 8003d80:	68f8      	ldr	r0, [r7, #12]
 8003d82:	f000 f840 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d001      	beq.n	8003d90 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e036      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10b      	bne.n	8003dae <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	881b      	ldrh	r3, [r3, #0]
 8003d9a:	461a      	mov	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003da4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003da6:	69bb      	ldr	r3, [r7, #24]
 8003da8:	3302      	adds	r3, #2
 8003daa:	61bb      	str	r3, [r7, #24]
 8003dac:	e007      	b.n	8003dbe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dc2:	b29b      	uxth	r3, r3
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1cf      	bne.n	8003d76 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2140      	movs	r1, #64	; 0x40
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f000 f810 	bl	8003e06 <UART_WaitOnFlagUntilTimeout>
 8003de6:	4603      	mov	r3, r0
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d001      	beq.n	8003df0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e006      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	e000      	b.n	8003dfe <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dfc:	2302      	movs	r3, #2
  }
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3720      	adds	r7, #32
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e06:	b580      	push	{r7, lr}
 8003e08:	b084      	sub	sp, #16
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	60f8      	str	r0, [r7, #12]
 8003e0e:	60b9      	str	r1, [r7, #8]
 8003e10:	603b      	str	r3, [r7, #0]
 8003e12:	4613      	mov	r3, r2
 8003e14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e16:	e02c      	b.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1e:	d028      	beq.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d007      	beq.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e26:	f7fd fdb9 	bl	800199c <HAL_GetTick>
 8003e2a:	4602      	mov	r2, r0
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d21d      	bcs.n	8003e72 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e44:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695a      	ldr	r2, [r3, #20]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f022 0201 	bic.w	r2, r2, #1
 8003e54:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	e00f      	b.n	8003e92 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	429a      	cmp	r2, r3
 8003e80:	bf0c      	ite	eq
 8003e82:	2301      	moveq	r3, #1
 8003e84:	2300      	movne	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	79fb      	ldrb	r3, [r7, #7]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	d0c3      	beq.n	8003e18 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68da      	ldr	r2, [r3, #12]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	431a      	orrs	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003ed6:	f023 030c 	bic.w	r3, r3, #12
 8003eda:	687a      	ldr	r2, [r7, #4]
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	68b9      	ldr	r1, [r7, #8]
 8003ee0:	430b      	orrs	r3, r1
 8003ee2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	699a      	ldr	r2, [r3, #24]
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a2c      	ldr	r2, [pc, #176]	; (8003fb0 <UART_SetConfig+0x114>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d103      	bne.n	8003f0c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7ff fbf4 	bl	80036f0 <HAL_RCC_GetPCLK2Freq>
 8003f08:	60f8      	str	r0, [r7, #12]
 8003f0a:	e002      	b.n	8003f12 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f0c:	f7ff fbdc 	bl	80036c8 <HAL_RCC_GetPCLK1Freq>
 8003f10:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f12:	68fa      	ldr	r2, [r7, #12]
 8003f14:	4613      	mov	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	4413      	add	r3, r2
 8003f1a:	009a      	lsls	r2, r3, #2
 8003f1c:	441a      	add	r2, r3
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f28:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	0119      	lsls	r1, r3, #4
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4613      	mov	r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	4413      	add	r3, r2
 8003f3a:	009a      	lsls	r2, r3, #2
 8003f3c:	441a      	add	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	009b      	lsls	r3, r3, #2
 8003f44:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f48:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f4a:	fba3 0302 	umull	r0, r3, r3, r2
 8003f4e:	095b      	lsrs	r3, r3, #5
 8003f50:	2064      	movs	r0, #100	; 0x64
 8003f52:	fb00 f303 	mul.w	r3, r0, r3
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	3332      	adds	r3, #50	; 0x32
 8003f5c:	4a15      	ldr	r2, [pc, #84]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	095b      	lsrs	r3, r3, #5
 8003f64:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f68:	4419      	add	r1, r3
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	4413      	add	r3, r2
 8003f72:	009a      	lsls	r2, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f80:	4b0c      	ldr	r3, [pc, #48]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f82:	fba3 0302 	umull	r0, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2064      	movs	r0, #100	; 0x64
 8003f8a:	fb00 f303 	mul.w	r3, r0, r3
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	011b      	lsls	r3, r3, #4
 8003f92:	3332      	adds	r3, #50	; 0x32
 8003f94:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <UART_SetConfig+0x118>)
 8003f96:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9a:	095b      	lsrs	r3, r3, #5
 8003f9c:	f003 020f 	and.w	r2, r3, #15
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	440a      	add	r2, r1
 8003fa6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003fa8:	bf00      	nop
 8003faa:	3710      	adds	r7, #16
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	51eb851f 	.word	0x51eb851f

08003fb8 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fbe:	f3ef 8305 	mrs	r3, IPSR
 8003fc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10f      	bne.n	8003fea <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fca:	f3ef 8310 	mrs	r3, PRIMASK
 8003fce:	607b      	str	r3, [r7, #4]
  return(result);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <osKernelInitialize+0x32>
 8003fd6:	4b10      	ldr	r3, [pc, #64]	; (8004018 <osKernelInitialize+0x60>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d109      	bne.n	8003ff2 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003fde:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe2:	603b      	str	r3, [r7, #0]
  return(result);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d003      	beq.n	8003ff2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003fea:	f06f 0305 	mvn.w	r3, #5
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e00c      	b.n	800400c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <osKernelInitialize+0x60>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d105      	bne.n	8004006 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003ffa:	4b07      	ldr	r3, [pc, #28]	; (8004018 <osKernelInitialize+0x60>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004000:	2300      	movs	r3, #0
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	e002      	b.n	800400c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800400c:	68fb      	ldr	r3, [r7, #12]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3714      	adds	r7, #20
 8004012:	46bd      	mov	sp, r7
 8004014:	bc80      	pop	{r7}
 8004016:	4770      	bx	lr
 8004018:	20000338 	.word	0x20000338

0800401c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004022:	f3ef 8305 	mrs	r3, IPSR
 8004026:	60bb      	str	r3, [r7, #8]
  return(result);
 8004028:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10f      	bne.n	800404e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800402e:	f3ef 8310 	mrs	r3, PRIMASK
 8004032:	607b      	str	r3, [r7, #4]
  return(result);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d109      	bne.n	800404e <osKernelStart+0x32>
 800403a:	4b11      	ldr	r3, [pc, #68]	; (8004080 <osKernelStart+0x64>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2b02      	cmp	r3, #2
 8004040:	d109      	bne.n	8004056 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004042:	f3ef 8311 	mrs	r3, BASEPRI
 8004046:	603b      	str	r3, [r7, #0]
  return(result);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <osKernelStart+0x3a>
    stat = osErrorISR;
 800404e:	f06f 0305 	mvn.w	r3, #5
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	e00e      	b.n	8004074 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8004056:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <osKernelStart+0x64>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 800405e:	4b08      	ldr	r3, [pc, #32]	; (8004080 <osKernelStart+0x64>)
 8004060:	2202      	movs	r2, #2
 8004062:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8004064:	f001 fb58 	bl	8005718 <vTaskStartScheduler>
      stat = osOK;
 8004068:	2300      	movs	r3, #0
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	e002      	b.n	8004074 <osKernelStart+0x58>
    } else {
      stat = osError;
 800406e:	f04f 33ff 	mov.w	r3, #4294967295
 8004072:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004074:	68fb      	ldr	r3, [r7, #12]
}
 8004076:	4618      	mov	r0, r3
 8004078:	3710      	adds	r7, #16
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000338 	.word	0x20000338

08004084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004084:	b580      	push	{r7, lr}
 8004086:	b092      	sub	sp, #72	; 0x48
 8004088:	af04      	add	r7, sp, #16
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004090:	2300      	movs	r3, #0
 8004092:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004094:	f3ef 8305 	mrs	r3, IPSR
 8004098:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800409a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800409c:	2b00      	cmp	r3, #0
 800409e:	f040 8094 	bne.w	80041ca <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040a2:	f3ef 8310 	mrs	r3, PRIMASK
 80040a6:	623b      	str	r3, [r7, #32]
  return(result);
 80040a8:	6a3b      	ldr	r3, [r7, #32]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	f040 808d 	bne.w	80041ca <osThreadNew+0x146>
 80040b0:	4b48      	ldr	r3, [pc, #288]	; (80041d4 <osThreadNew+0x150>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d106      	bne.n	80040c6 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80040b8:	f3ef 8311 	mrs	r3, BASEPRI
 80040bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f040 8082 	bne.w	80041ca <osThreadNew+0x146>
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d07e      	beq.n	80041ca <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 80040d0:	2318      	movs	r3, #24
 80040d2:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 80040d4:	2300      	movs	r3, #0
 80040d6:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 80040d8:	f107 031b 	add.w	r3, r7, #27
 80040dc:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 80040de:	f04f 33ff 	mov.w	r3, #4294967295
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d045      	beq.n	8004176 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <osThreadNew+0x74>
        name = attr->name;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	699b      	ldr	r3, [r3, #24]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d002      	beq.n	8004106 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004108:	2b00      	cmp	r3, #0
 800410a:	d008      	beq.n	800411e <osThreadNew+0x9a>
 800410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410e:	2b38      	cmp	r3, #56	; 0x38
 8004110:	d805      	bhi.n	800411e <osThreadNew+0x9a>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <osThreadNew+0x9e>
        return (NULL);
 800411e:	2300      	movs	r3, #0
 8004120:	e054      	b.n	80041cc <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d003      	beq.n	8004132 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	089b      	lsrs	r3, r3, #2
 8004130:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00e      	beq.n	8004158 <osThreadNew+0xd4>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	2bbb      	cmp	r3, #187	; 0xbb
 8004140:	d90a      	bls.n	8004158 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004146:	2b00      	cmp	r3, #0
 8004148:	d006      	beq.n	8004158 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d002      	beq.n	8004158 <osThreadNew+0xd4>
        mem = 1;
 8004152:	2301      	movs	r3, #1
 8004154:	62bb      	str	r3, [r7, #40]	; 0x28
 8004156:	e010      	b.n	800417a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d10c      	bne.n	800417a <osThreadNew+0xf6>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d108      	bne.n	800417a <osThreadNew+0xf6>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	691b      	ldr	r3, [r3, #16]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d104      	bne.n	800417a <osThreadNew+0xf6>
          mem = 0;
 8004170:	2300      	movs	r3, #0
 8004172:	62bb      	str	r3, [r7, #40]	; 0x28
 8004174:	e001      	b.n	800417a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800417a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800417c:	2b01      	cmp	r3, #1
 800417e:	d110      	bne.n	80041a2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004188:	9202      	str	r2, [sp, #8]
 800418a:	9301      	str	r3, [sp, #4]
 800418c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800418e:	9300      	str	r3, [sp, #0]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004194:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f001 f8da 	bl	8005350 <xTaskCreateStatic>
 800419c:	4603      	mov	r3, r0
 800419e:	617b      	str	r3, [r7, #20]
 80041a0:	e013      	b.n	80041ca <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 80041a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d110      	bne.n	80041ca <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	b29a      	uxth	r2, r3
 80041ac:	f107 0314 	add.w	r3, r7, #20
 80041b0:	9301      	str	r3, [sp, #4]
 80041b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80041ba:	68f8      	ldr	r0, [r7, #12]
 80041bc:	f001 f924 	bl	8005408 <xTaskCreate>
 80041c0:	4603      	mov	r3, r0
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d001      	beq.n	80041ca <osThreadNew+0x146>
          hTask = NULL;
 80041c6:	2300      	movs	r3, #0
 80041c8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041ca:	697b      	ldr	r3, [r7, #20]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3738      	adds	r7, #56	; 0x38
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}
 80041d4:	20000338 	.word	0x20000338

080041d8 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041de:	f3ef 8305 	mrs	r3, IPSR
 80041e2:	60bb      	str	r3, [r7, #8]
  return(result);
 80041e4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <osThreadYield+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ea:	f3ef 8310 	mrs	r3, PRIMASK
 80041ee:	607b      	str	r3, [r7, #4]
  return(result);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d109      	bne.n	800420a <osThreadYield+0x32>
 80041f6:	4b0f      	ldr	r3, [pc, #60]	; (8004234 <osThreadYield+0x5c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2b02      	cmp	r3, #2
 80041fc:	d109      	bne.n	8004212 <osThreadYield+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80041fe:	f3ef 8311 	mrs	r3, BASEPRI
 8004202:	603b      	str	r3, [r7, #0]
  return(result);
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <osThreadYield+0x3a>
    stat = osErrorISR;
 800420a:	f06f 0305 	mvn.w	r3, #5
 800420e:	60fb      	str	r3, [r7, #12]
 8004210:	e009      	b.n	8004226 <osThreadYield+0x4e>
  } else {
    stat = osOK;
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
    taskYIELD();
 8004216:	4b08      	ldr	r3, [pc, #32]	; (8004238 <osThreadYield+0x60>)
 8004218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f3bf 8f4f 	dsb	sy
 8004222:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8004226:	68fb      	ldr	r3, [r7, #12]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3714      	adds	r7, #20
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	20000338 	.word	0x20000338
 8004238:	e000ed04 	.word	0xe000ed04

0800423c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b086      	sub	sp, #24
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004244:	f3ef 8305 	mrs	r3, IPSR
 8004248:	613b      	str	r3, [r7, #16]
  return(result);
 800424a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004250:	f3ef 8310 	mrs	r3, PRIMASK
 8004254:	60fb      	str	r3, [r7, #12]
  return(result);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d109      	bne.n	8004270 <osDelay+0x34>
 800425c:	4b0d      	ldr	r3, [pc, #52]	; (8004294 <osDelay+0x58>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d109      	bne.n	8004278 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004264:	f3ef 8311 	mrs	r3, BASEPRI
 8004268:	60bb      	str	r3, [r7, #8]
  return(result);
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <osDelay+0x3c>
    stat = osErrorISR;
 8004270:	f06f 0305 	mvn.w	r3, #5
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e007      	b.n	8004288 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8004278:	2300      	movs	r3, #0
 800427a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d002      	beq.n	8004288 <osDelay+0x4c>
      vTaskDelay(ticks);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f001 fa14 	bl	80056b0 <vTaskDelay>
    }
  }

  return (stat);
 8004288:	697b      	ldr	r3, [r7, #20]
}
 800428a:	4618      	mov	r0, r3
 800428c:	3718      	adds	r7, #24
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000338 	.word	0x20000338

08004298 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af02      	add	r7, sp, #8
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80042a4:	2300      	movs	r3, #0
 80042a6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a8:	f3ef 8305 	mrs	r3, IPSR
 80042ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80042ae:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d16f      	bne.n	8004394 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042b4:	f3ef 8310 	mrs	r3, PRIMASK
 80042b8:	617b      	str	r3, [r7, #20]
  return(result);
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d169      	bne.n	8004394 <osMessageQueueNew+0xfc>
 80042c0:	4b37      	ldr	r3, [pc, #220]	; (80043a0 <osMessageQueueNew+0x108>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d105      	bne.n	80042d4 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80042c8:	f3ef 8311 	mrs	r3, BASEPRI
 80042cc:	613b      	str	r3, [r7, #16]
  return(result);
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d15f      	bne.n	8004394 <osMessageQueueNew+0xfc>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d05c      	beq.n	8004394 <osMessageQueueNew+0xfc>
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d059      	beq.n	8004394 <osMessageQueueNew+0xfc>
    mem = -1;
 80042e0:	f04f 33ff 	mov.w	r3, #4294967295
 80042e4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d029      	beq.n	8004340 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d012      	beq.n	800431a <osMessageQueueNew+0x82>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	2b4f      	cmp	r3, #79	; 0x4f
 80042fa:	d90e      	bls.n	800431a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004300:	2b00      	cmp	r3, #0
 8004302:	d00a      	beq.n	800431a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695a      	ldr	r2, [r3, #20]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	68b9      	ldr	r1, [r7, #8]
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	429a      	cmp	r2, r3
 8004312:	d302      	bcc.n	800431a <osMessageQueueNew+0x82>
        mem = 1;
 8004314:	2301      	movs	r3, #1
 8004316:	623b      	str	r3, [r7, #32]
 8004318:	e014      	b.n	8004344 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d110      	bne.n	8004344 <osMessageQueueNew+0xac>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d10c      	bne.n	8004344 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d108      	bne.n	8004344 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d104      	bne.n	8004344 <osMessageQueueNew+0xac>
          mem = 0;
 800433a:	2300      	movs	r3, #0
 800433c:	623b      	str	r3, [r7, #32]
 800433e:	e001      	b.n	8004344 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10b      	bne.n	8004362 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	691a      	ldr	r2, [r3, #16]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	2100      	movs	r1, #0
 8004354:	9100      	str	r1, [sp, #0]
 8004356:	68b9      	ldr	r1, [r7, #8]
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa85 	bl	8004868 <xQueueGenericCreateStatic>
 800435e:	6278      	str	r0, [r7, #36]	; 0x24
 8004360:	e008      	b.n	8004374 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8004368:	2200      	movs	r2, #0
 800436a:	68b9      	ldr	r1, [r7, #8]
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 faf2 	bl	8004956 <xQueueGenericCreate>
 8004372:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	2b00      	cmp	r3, #0
 8004378:	d00c      	beq.n	8004394 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d003      	beq.n	8004388 <osMessageQueueNew+0xf0>
        name = attr->name;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	61fb      	str	r3, [r7, #28]
 8004386:	e001      	b.n	800438c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8004388:	2300      	movs	r3, #0
 800438a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800438c:	69f9      	ldr	r1, [r7, #28]
 800438e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004390:	f000 ff82 	bl	8005298 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004396:	4618      	mov	r0, r3
 8004398:	3728      	adds	r7, #40	; 0x28
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000338 	.word	0x20000338

080043a4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b08a      	sub	sp, #40	; 0x28
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	603b      	str	r3, [r7, #0]
 80043b0:	4613      	mov	r3, r2
 80043b2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043bc:	f3ef 8305 	mrs	r3, IPSR
 80043c0:	61fb      	str	r3, [r7, #28]
  return(result);
 80043c2:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d10f      	bne.n	80043e8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c8:	f3ef 8310 	mrs	r3, PRIMASK
 80043cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d109      	bne.n	80043e8 <osMessageQueuePut+0x44>
 80043d4:	4b2b      	ldr	r3, [pc, #172]	; (8004484 <osMessageQueuePut+0xe0>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d12e      	bne.n	800443a <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80043dc:	f3ef 8311 	mrs	r3, BASEPRI
 80043e0:	617b      	str	r3, [r7, #20]
  return(result);
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d028      	beq.n	800443a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80043e8:	6a3b      	ldr	r3, [r7, #32]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d005      	beq.n	80043fa <osMessageQueuePut+0x56>
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d002      	beq.n	80043fa <osMessageQueuePut+0x56>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 80043fa:	f06f 0303 	mvn.w	r3, #3
 80043fe:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004400:	e039      	b.n	8004476 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004406:	f107 0210 	add.w	r2, r7, #16
 800440a:	2300      	movs	r3, #0
 800440c:	68b9      	ldr	r1, [r7, #8]
 800440e:	6a38      	ldr	r0, [r7, #32]
 8004410:	f000 fc00 	bl	8004c14 <xQueueGenericSendFromISR>
 8004414:	4603      	mov	r3, r0
 8004416:	2b01      	cmp	r3, #1
 8004418:	d003      	beq.n	8004422 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800441a:	f06f 0302 	mvn.w	r3, #2
 800441e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004420:	e029      	b.n	8004476 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d026      	beq.n	8004476 <osMessageQueuePut+0xd2>
 8004428:	4b17      	ldr	r3, [pc, #92]	; (8004488 <osMessageQueuePut+0xe4>)
 800442a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800442e:	601a      	str	r2, [r3, #0]
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004438:	e01d      	b.n	8004476 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d002      	beq.n	8004446 <osMessageQueuePut+0xa2>
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d103      	bne.n	800444e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8004446:	f06f 0303 	mvn.w	r3, #3
 800444a:	627b      	str	r3, [r7, #36]	; 0x24
 800444c:	e014      	b.n	8004478 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800444e:	2300      	movs	r3, #0
 8004450:	683a      	ldr	r2, [r7, #0]
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	6a38      	ldr	r0, [r7, #32]
 8004456:	f000 fadf 	bl	8004a18 <xQueueGenericSend>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d00b      	beq.n	8004478 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8004466:	f06f 0301 	mvn.w	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	e004      	b.n	8004478 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800446e:	f06f 0302 	mvn.w	r3, #2
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
 8004474:	e000      	b.n	8004478 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004476:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800447a:	4618      	mov	r0, r3
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	20000338 	.word	0x20000338
 8004488:	e000ed04 	.word	0xe000ed04

0800448c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800448c:	b580      	push	{r7, lr}
 800448e:	b08a      	sub	sp, #40	; 0x28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	61fb      	str	r3, [r7, #28]
  return(result);
 80044a8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044ae:	f3ef 8310 	mrs	r3, PRIMASK
 80044b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <osMessageQueueGet+0x42>
 80044ba:	4b2b      	ldr	r3, [pc, #172]	; (8004568 <osMessageQueueGet+0xdc>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d12e      	bne.n	8004520 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80044c2:	f3ef 8311 	mrs	r3, BASEPRI
 80044c6:	617b      	str	r3, [r7, #20]
  return(result);
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d028      	beq.n	8004520 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d005      	beq.n	80044e0 <osMessageQueueGet+0x54>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d002      	beq.n	80044e0 <osMessageQueueGet+0x54>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d003      	beq.n	80044e8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 80044e0:	f06f 0303 	mvn.w	r3, #3
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80044e6:	e038      	b.n	800455a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 80044e8:	2300      	movs	r3, #0
 80044ea:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80044ec:	f107 0310 	add.w	r3, r7, #16
 80044f0:	461a      	mov	r2, r3
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	6a38      	ldr	r0, [r7, #32]
 80044f6:	f000 fd05 	bl	8004f04 <xQueueReceiveFromISR>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d003      	beq.n	8004508 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8004500:	f06f 0302 	mvn.w	r3, #2
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004506:	e028      	b.n	800455a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d025      	beq.n	800455a <osMessageQueueGet+0xce>
 800450e:	4b17      	ldr	r3, [pc, #92]	; (800456c <osMessageQueueGet+0xe0>)
 8004510:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	f3bf 8f4f 	dsb	sy
 800451a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800451e:	e01c      	b.n	800455a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004520:	6a3b      	ldr	r3, [r7, #32]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d002      	beq.n	800452c <osMessageQueueGet+0xa0>
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d103      	bne.n	8004534 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800452c:	f06f 0303 	mvn.w	r3, #3
 8004530:	627b      	str	r3, [r7, #36]	; 0x24
 8004532:	e013      	b.n	800455c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	6a38      	ldr	r0, [r7, #32]
 800453a:	f000 fc03 	bl	8004d44 <xQueueReceive>
 800453e:	4603      	mov	r3, r0
 8004540:	2b01      	cmp	r3, #1
 8004542:	d00b      	beq.n	800455c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800454a:	f06f 0301 	mvn.w	r3, #1
 800454e:	627b      	str	r3, [r7, #36]	; 0x24
 8004550:	e004      	b.n	800455c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8004552:	f06f 0302 	mvn.w	r3, #2
 8004556:	627b      	str	r3, [r7, #36]	; 0x24
 8004558:	e000      	b.n	800455c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800455a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800455e:	4618      	mov	r0, r3
 8004560:	3728      	adds	r7, #40	; 0x28
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	20000338 	.word	0x20000338
 800456c:	e000ed04 	.word	0xe000ed04

08004570 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b088      	sub	sp, #32
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	61bb      	str	r3, [r7, #24]
  UBaseType_t count;

  if (hQueue == NULL) {
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d102      	bne.n	8004588 <osMessageQueueGetCount+0x18>
    count = 0U;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
 8004586:	e01e      	b.n	80045c6 <osMessageQueueGetCount+0x56>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004588:	f3ef 8305 	mrs	r3, IPSR
 800458c:	617b      	str	r3, [r7, #20]
  return(result);
 800458e:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <osMessageQueueGetCount+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004594:	f3ef 8310 	mrs	r3, PRIMASK
 8004598:	613b      	str	r3, [r7, #16]
  return(result);
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	2b00      	cmp	r3, #0
 800459e:	d109      	bne.n	80045b4 <osMessageQueueGetCount+0x44>
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <osMessageQueueGetCount+0x60>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b02      	cmp	r3, #2
 80045a6:	d10a      	bne.n	80045be <osMessageQueueGetCount+0x4e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80045a8:	f3ef 8311 	mrs	r3, BASEPRI
 80045ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d004      	beq.n	80045be <osMessageQueueGetCount+0x4e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80045b4:	69b8      	ldr	r0, [r7, #24]
 80045b6:	f000 fd43 	bl	8005040 <uxQueueMessagesWaitingFromISR>
 80045ba:	61f8      	str	r0, [r7, #28]
 80045bc:	e003      	b.n	80045c6 <osMessageQueueGetCount+0x56>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80045be:	69b8      	ldr	r0, [r7, #24]
 80045c0:	f000 fd20 	bl	8005004 <uxQueueMessagesWaiting>
 80045c4:	61f8      	str	r0, [r7, #28]
  }

  return ((uint32_t)count);
 80045c6:	69fb      	ldr	r3, [r7, #28]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3720      	adds	r7, #32
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	20000338 	.word	0x20000338

080045d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	4a06      	ldr	r2, [pc, #24]	; (80045fc <vApplicationGetIdleTaskMemory+0x28>)
 80045e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	4a05      	ldr	r2, [pc, #20]	; (8004600 <vApplicationGetIdleTaskMemory+0x2c>)
 80045ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2280      	movs	r2, #128	; 0x80
 80045f0:	601a      	str	r2, [r3, #0]
}
 80045f2:	bf00      	nop
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	2000033c 	.word	0x2000033c
 8004600:	200003f8 	.word	0x200003f8

08004604 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004604:	b480      	push	{r7}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a07      	ldr	r2, [pc, #28]	; (8004630 <vApplicationGetTimerTaskMemory+0x2c>)
 8004614:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	4a06      	ldr	r2, [pc, #24]	; (8004634 <vApplicationGetTimerTaskMemory+0x30>)
 800461a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004622:	601a      	str	r2, [r3, #0]
}
 8004624:	bf00      	nop
 8004626:	3714      	adds	r7, #20
 8004628:	46bd      	mov	sp, r7
 800462a:	bc80      	pop	{r7}
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200005f8 	.word	0x200005f8
 8004634:	200006b4 	.word	0x200006b4

08004638 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f103 0208 	add.w	r2, r3, #8
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f04f 32ff 	mov.w	r2, #4294967295
 8004650:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	f103 0208 	add.w	r2, r3, #8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f103 0208 	add.w	r2, r3, #8
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr

08004676 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	bc80      	pop	{r7}
 800468c:	4770      	bx	lr

0800468e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800468e:	b480      	push	{r7}
 8004690:	b085      	sub	sp, #20
 8004692:	af00      	add	r7, sp, #0
 8004694:	6078      	str	r0, [r7, #4]
 8004696:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	68fa      	ldr	r2, [r7, #12]
 80046a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	683a      	ldr	r2, [r7, #0]
 80046b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	683a      	ldr	r2, [r7, #0]
 80046b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	1c5a      	adds	r2, r3, #1
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	601a      	str	r2, [r3, #0]
}
 80046ca:	bf00      	nop
 80046cc:	3714      	adds	r7, #20
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bc80      	pop	{r7}
 80046d2:	4770      	bx	lr

080046d4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80046d4:	b480      	push	{r7}
 80046d6:	b085      	sub	sp, #20
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d103      	bne.n	80046f4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	691b      	ldr	r3, [r3, #16]
 80046f0:	60fb      	str	r3, [r7, #12]
 80046f2:	e00c      	b.n	800470e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	3308      	adds	r3, #8
 80046f8:	60fb      	str	r3, [r7, #12]
 80046fa:	e002      	b.n	8004702 <vListInsert+0x2e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	60fb      	str	r3, [r7, #12]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	429a      	cmp	r2, r3
 800470c:	d2f6      	bcs.n	80046fc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	685a      	ldr	r2, [r3, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	683a      	ldr	r2, [r7, #0]
 800471c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	683a      	ldr	r2, [r7, #0]
 8004728:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	601a      	str	r2, [r3, #0]
}
 800473a:	bf00      	nop
 800473c:	3714      	adds	r7, #20
 800473e:	46bd      	mov	sp, r7
 8004740:	bc80      	pop	{r7}
 8004742:	4770      	bx	lr

08004744 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6892      	ldr	r2, [r2, #8]
 800475a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	6852      	ldr	r2, [r2, #4]
 8004764:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	687a      	ldr	r2, [r7, #4]
 800476c:	429a      	cmp	r2, r3
 800476e:	d103      	bne.n	8004778 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	1e5a      	subs	r2, r3, #1
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
}
 800478c:	4618      	mov	r0, r3
 800478e:	3714      	adds	r7, #20
 8004790:	46bd      	mov	sp, r7
 8004792:	bc80      	pop	{r7}
 8004794:	4770      	bx	lr
	...

08004798 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b084      	sub	sp, #16
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10a      	bne.n	80047c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80047be:	bf00      	nop
 80047c0:	e7fe      	b.n	80047c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80047c2:	f002 f8eb 	bl	800699c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	68f9      	ldr	r1, [r7, #12]
 80047d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	441a      	add	r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f2:	3b01      	subs	r3, #1
 80047f4:	68f9      	ldr	r1, [r7, #12]
 80047f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80047f8:	fb01 f303 	mul.w	r3, r1, r3
 80047fc:	441a      	add	r2, r3
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	22ff      	movs	r2, #255	; 0xff
 8004806:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	22ff      	movs	r2, #255	; 0xff
 800480e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d114      	bne.n	8004842 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d01a      	beq.n	8004856 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	3310      	adds	r3, #16
 8004824:	4618      	mov	r0, r3
 8004826:	f001 fa13 	bl	8005c50 <xTaskRemoveFromEventList>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d012      	beq.n	8004856 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <xQueueGenericReset+0xcc>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	f3bf 8f4f 	dsb	sy
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	e009      	b.n	8004856 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	3310      	adds	r3, #16
 8004846:	4618      	mov	r0, r3
 8004848:	f7ff fef6 	bl	8004638 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	3324      	adds	r3, #36	; 0x24
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff fef1 	bl	8004638 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004856:	f002 f8d1 	bl	80069fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800485a:	2301      	movs	r3, #1
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	e000ed04 	.word	0xe000ed04

08004868 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004868:	b580      	push	{r7, lr}
 800486a:	b08e      	sub	sp, #56	; 0x38
 800486c:	af02      	add	r7, sp, #8
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d10a      	bne.n	8004892 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	f383 8811 	msr	BASEPRI, r3
 8004884:	f3bf 8f6f 	isb	sy
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800488e:	bf00      	nop
 8004890:	e7fe      	b.n	8004890 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d10a      	bne.n	80048ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80048aa:	bf00      	nop
 80048ac:	e7fe      	b.n	80048ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d002      	beq.n	80048ba <xQueueGenericCreateStatic+0x52>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <xQueueGenericCreateStatic+0x56>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericCreateStatic+0x58>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	623b      	str	r3, [r7, #32]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d102      	bne.n	80048e6 <xQueueGenericCreateStatic+0x7e>
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d101      	bne.n	80048ea <xQueueGenericCreateStatic+0x82>
 80048e6:	2301      	movs	r3, #1
 80048e8:	e000      	b.n	80048ec <xQueueGenericCreateStatic+0x84>
 80048ea:	2300      	movs	r3, #0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10a      	bne.n	8004906 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	61fb      	str	r3, [r7, #28]
}
 8004902:	bf00      	nop
 8004904:	e7fe      	b.n	8004904 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004906:	2350      	movs	r3, #80	; 0x50
 8004908:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800490a:	697b      	ldr	r3, [r7, #20]
 800490c:	2b50      	cmp	r3, #80	; 0x50
 800490e:	d00a      	beq.n	8004926 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	61bb      	str	r3, [r7, #24]
}
 8004922:	bf00      	nop
 8004924:	e7fe      	b.n	8004924 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800492a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00d      	beq.n	800494c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004932:	2201      	movs	r2, #1
 8004934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004938:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800493e:	9300      	str	r3, [sp, #0]
 8004940:	4613      	mov	r3, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	68b9      	ldr	r1, [r7, #8]
 8004946:	68f8      	ldr	r0, [r7, #12]
 8004948:	f000 f843 	bl	80049d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800494c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800494e:	4618      	mov	r0, r3
 8004950:	3730      	adds	r7, #48	; 0x30
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	4613      	mov	r3, r2
 8004962:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10a      	bne.n	8004980 <xQueueGenericCreate+0x2a>
	__asm volatile
 800496a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496e:	f383 8811 	msr	BASEPRI, r3
 8004972:	f3bf 8f6f 	isb	sy
 8004976:	f3bf 8f4f 	dsb	sy
 800497a:	613b      	str	r3, [r7, #16]
}
 800497c:	bf00      	nop
 800497e:	e7fe      	b.n	800497e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d102      	bne.n	800498c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004986:	2300      	movs	r3, #0
 8004988:	61fb      	str	r3, [r7, #28]
 800498a:	e004      	b.n	8004996 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	fb02 f303 	mul.w	r3, r2, r3
 8004994:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004996:	69fb      	ldr	r3, [r7, #28]
 8004998:	3350      	adds	r3, #80	; 0x50
 800499a:	4618      	mov	r0, r3
 800499c:	f002 f8fe 	bl	8006b9c <pvPortMalloc>
 80049a0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	3350      	adds	r3, #80	; 0x50
 80049ac:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2200      	movs	r2, #0
 80049b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049b6:	79fa      	ldrb	r2, [r7, #7]
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	9300      	str	r3, [sp, #0]
 80049bc:	4613      	mov	r3, r2
 80049be:	697a      	ldr	r2, [r7, #20]
 80049c0:	68b9      	ldr	r1, [r7, #8]
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f000 f805 	bl	80049d2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80049c8:	69bb      	ldr	r3, [r7, #24]
	}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	607a      	str	r2, [r7, #4]
 80049de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	601a      	str	r2, [r3, #0]
 80049ec:	e002      	b.n	80049f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049fa:	69bb      	ldr	r3, [r7, #24]
 80049fc:	68ba      	ldr	r2, [r7, #8]
 80049fe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004a00:	2101      	movs	r1, #1
 8004a02:	69b8      	ldr	r0, [r7, #24]
 8004a04:	f7ff fec8 	bl	8004798 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	78fa      	ldrb	r2, [r7, #3]
 8004a0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a10:	bf00      	nop
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08e      	sub	sp, #56	; 0x38
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a26:	2300      	movs	r3, #0
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xQueueGenericSend+0x32>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a4a:	68bb      	ldr	r3, [r7, #8]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <xQueueGenericSend+0x40>
 8004a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d101      	bne.n	8004a5c <xQueueGenericSend+0x44>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e000      	b.n	8004a5e <xQueueGenericSend+0x46>
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10a      	bne.n	8004a78 <xQueueGenericSend+0x60>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d103      	bne.n	8004a86 <xQueueGenericSend+0x6e>
 8004a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d101      	bne.n	8004a8a <xQueueGenericSend+0x72>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <xQueueGenericSend+0x74>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	623b      	str	r3, [r7, #32]
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aa6:	f001 fa99 	bl	8005fdc <xTaskGetSchedulerState>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d102      	bne.n	8004ab6 <xQueueGenericSend+0x9e>
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d101      	bne.n	8004aba <xQueueGenericSend+0xa2>
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	e000      	b.n	8004abc <xQueueGenericSend+0xa4>
 8004aba:	2300      	movs	r3, #0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004ac0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ac4:	f383 8811 	msr	BASEPRI, r3
 8004ac8:	f3bf 8f6f 	isb	sy
 8004acc:	f3bf 8f4f 	dsb	sy
 8004ad0:	61fb      	str	r3, [r7, #28]
}
 8004ad2:	bf00      	nop
 8004ad4:	e7fe      	b.n	8004ad4 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ad6:	f001 ff61 	bl	800699c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d302      	bcc.n	8004aec <xQueueGenericSend+0xd4>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d129      	bne.n	8004b40 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004aec:	683a      	ldr	r2, [r7, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004af2:	f000 fac0 	bl	8005076 <prvCopyDataToQueue>
 8004af6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d010      	beq.n	8004b22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f001 f8a3 	bl	8005c50 <xTaskRemoveFromEventList>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d013      	beq.n	8004b38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b10:	4b3f      	ldr	r3, [pc, #252]	; (8004c10 <xQueueGenericSend+0x1f8>)
 8004b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	f3bf 8f4f 	dsb	sy
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	e00a      	b.n	8004b38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d007      	beq.n	8004b38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b28:	4b39      	ldr	r3, [pc, #228]	; (8004c10 <xQueueGenericSend+0x1f8>)
 8004b2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2e:	601a      	str	r2, [r3, #0]
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b38:	f001 ff60 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e063      	b.n	8004c08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d103      	bne.n	8004b4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b46:	f001 ff59 	bl	80069fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	e05c      	b.n	8004c08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d106      	bne.n	8004b62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f001 f8dd 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b62:	f001 ff4b 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b66:	f000 fe47 	bl	80057f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b6a:	f001 ff17 	bl	800699c <vPortEnterCritical>
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b74:	b25b      	sxtb	r3, r3
 8004b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b7a:	d103      	bne.n	8004b84 <xQueueGenericSend+0x16c>
 8004b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7e:	2200      	movs	r2, #0
 8004b80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b90:	d103      	bne.n	8004b9a <xQueueGenericSend+0x182>
 8004b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004b9a:	f001 ff2f 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004b9e:	1d3a      	adds	r2, r7, #4
 8004ba0:	f107 0314 	add.w	r3, r7, #20
 8004ba4:	4611      	mov	r1, r2
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f001 f8cc 	bl	8005d44 <xTaskCheckForTimeOut>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d124      	bne.n	8004bfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bb4:	f000 fb57 	bl	8005266 <prvIsQueueFull>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d018      	beq.n	8004bf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	3310      	adds	r3, #16
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	4611      	mov	r1, r2
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 fff2 	bl	8005bb0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004bcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bce:	f000 fae2 	bl	8005196 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004bd2:	f000 fe1f 	bl	8005814 <xTaskResumeAll>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	f47f af7c 	bne.w	8004ad6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bde:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <xQueueGenericSend+0x1f8>)
 8004be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004be4:	601a      	str	r2, [r3, #0]
 8004be6:	f3bf 8f4f 	dsb	sy
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	e772      	b.n	8004ad6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004bf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bf2:	f000 fad0 	bl	8005196 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004bf6:	f000 fe0d 	bl	8005814 <xTaskResumeAll>
 8004bfa:	e76c      	b.n	8004ad6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004bfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bfe:	f000 faca 	bl	8005196 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c02:	f000 fe07 	bl	8005814 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c06:	2300      	movs	r3, #0
		}
	}
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3738      	adds	r7, #56	; 0x38
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}
 8004c10:	e000ed04 	.word	0xe000ed04

08004c14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08e      	sub	sp, #56	; 0x38
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d10a      	bne.n	8004c42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d103      	bne.n	8004c50 <xQueueGenericSendFromISR+0x3c>
 8004c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <xQueueGenericSendFromISR+0x40>
 8004c50:	2301      	movs	r3, #1
 8004c52:	e000      	b.n	8004c56 <xQueueGenericSendFromISR+0x42>
 8004c54:	2300      	movs	r3, #0
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d10a      	bne.n	8004c70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5e:	f383 8811 	msr	BASEPRI, r3
 8004c62:	f3bf 8f6f 	isb	sy
 8004c66:	f3bf 8f4f 	dsb	sy
 8004c6a:	623b      	str	r3, [r7, #32]
}
 8004c6c:	bf00      	nop
 8004c6e:	e7fe      	b.n	8004c6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d103      	bne.n	8004c7e <xQueueGenericSendFromISR+0x6a>
 8004c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericSendFromISR+0x6e>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericSendFromISR+0x70>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	61fb      	str	r3, [r7, #28]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004c9e:	f001 ff3f 	bl	8006b20 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ca2:	f3ef 8211 	mrs	r2, BASEPRI
 8004ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004caa:	f383 8811 	msr	BASEPRI, r3
 8004cae:	f3bf 8f6f 	isb	sy
 8004cb2:	f3bf 8f4f 	dsb	sy
 8004cb6:	61ba      	str	r2, [r7, #24]
 8004cb8:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cba:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d302      	bcc.n	8004cd0 <xQueueGenericSendFromISR+0xbc>
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d12c      	bne.n	8004d2a <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	68b9      	ldr	r1, [r7, #8]
 8004cde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ce0:	f000 f9c9 	bl	8005076 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ce4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cec:	d112      	bne.n	8004d14 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	3324      	adds	r3, #36	; 0x24
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f000 ffa8 	bl	8005c50 <xTaskRemoveFromEventList>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d00e      	beq.n	8004d24 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d00b      	beq.n	8004d24 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	601a      	str	r2, [r3, #0]
 8004d12:	e007      	b.n	8004d24 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d18:	3301      	adds	r3, #1
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	b25a      	sxtb	r2, r3
 8004d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d24:	2301      	movs	r3, #1
 8004d26:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004d28:	e001      	b.n	8004d2e <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d30:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3738      	adds	r7, #56	; 0x38
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08c      	sub	sp, #48	; 0x30
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004d50:	2300      	movs	r3, #0
 8004d52:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10a      	bne.n	8004d74 <xQueueReceive+0x30>
	__asm volatile
 8004d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d62:	f383 8811 	msr	BASEPRI, r3
 8004d66:	f3bf 8f6f 	isb	sy
 8004d6a:	f3bf 8f4f 	dsb	sy
 8004d6e:	623b      	str	r3, [r7, #32]
}
 8004d70:	bf00      	nop
 8004d72:	e7fe      	b.n	8004d72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <xQueueReceive+0x3e>
 8004d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <xQueueReceive+0x42>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueReceive+0x44>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueReceive+0x5e>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	61fb      	str	r3, [r7, #28]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004da2:	f001 f91b 	bl	8005fdc <xTaskGetSchedulerState>
 8004da6:	4603      	mov	r3, r0
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d102      	bne.n	8004db2 <xQueueReceive+0x6e>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <xQueueReceive+0x72>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <xQueueReceive+0x74>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xQueueReceive+0x8e>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	61bb      	str	r3, [r7, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004dd2:	f001 fde3 	bl	800699c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d01f      	beq.n	8004e22 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004de2:	68b9      	ldr	r1, [r7, #8]
 8004de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004de6:	f000 f9b0 	bl	800514a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	1e5a      	subs	r2, r3, #1
 8004dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00f      	beq.n	8004e1a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dfc:	3310      	adds	r3, #16
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f000 ff26 	bl	8005c50 <xTaskRemoveFromEventList>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d007      	beq.n	8004e1a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004e0a:	4b3d      	ldr	r3, [pc, #244]	; (8004f00 <xQueueReceive+0x1bc>)
 8004e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	f3bf 8f4f 	dsb	sy
 8004e16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004e1a:	f001 fdef 	bl	80069fc <vPortExitCritical>
				return pdPASS;
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e069      	b.n	8004ef6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d103      	bne.n	8004e30 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e28:	f001 fde8 	bl	80069fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	e062      	b.n	8004ef6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d106      	bne.n	8004e44 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e36:	f107 0310 	add.w	r3, r7, #16
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 ff6c 	bl	8005d18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e44:	f001 fdda 	bl	80069fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e48:	f000 fcd6 	bl	80057f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e4c:	f001 fda6 	bl	800699c <vPortEnterCritical>
 8004e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d103      	bne.n	8004e66 <xQueueReceive+0x122>
 8004e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6c:	b25b      	sxtb	r3, r3
 8004e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e72:	d103      	bne.n	8004e7c <xQueueReceive+0x138>
 8004e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e76:	2200      	movs	r2, #0
 8004e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7c:	f001 fdbe 	bl	80069fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e80:	1d3a      	adds	r2, r7, #4
 8004e82:	f107 0310 	add.w	r3, r7, #16
 8004e86:	4611      	mov	r1, r2
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f000 ff5b 	bl	8005d44 <xTaskCheckForTimeOut>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d123      	bne.n	8004edc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004e96:	f000 f9d0 	bl	800523a <prvIsQueueEmpty>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d017      	beq.n	8004ed0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ea2:	3324      	adds	r3, #36	; 0x24
 8004ea4:	687a      	ldr	r2, [r7, #4]
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 fe81 	bl	8005bb0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004eae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004eb0:	f000 f971 	bl	8005196 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004eb4:	f000 fcae 	bl	8005814 <xTaskResumeAll>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d189      	bne.n	8004dd2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ebe:	4b10      	ldr	r3, [pc, #64]	; (8004f00 <xQueueReceive+0x1bc>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	e780      	b.n	8004dd2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ed0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ed2:	f000 f960 	bl	8005196 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ed6:	f000 fc9d 	bl	8005814 <xTaskResumeAll>
 8004eda:	e77a      	b.n	8004dd2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004edc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ede:	f000 f95a 	bl	8005196 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ee2:	f000 fc97 	bl	8005814 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ee6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ee8:	f000 f9a7 	bl	800523a <prvIsQueueEmpty>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	f43f af6f 	beq.w	8004dd2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ef4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3730      	adds	r7, #48	; 0x30
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	; 0x38
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10a      	bne.n	8004f30 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	623b      	str	r3, [r7, #32]
}
 8004f2c:	bf00      	nop
 8004f2e:	e7fe      	b.n	8004f2e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d103      	bne.n	8004f3e <xQueueReceiveFromISR+0x3a>
 8004f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d101      	bne.n	8004f42 <xQueueReceiveFromISR+0x3e>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueueReceiveFromISR+0x40>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10a      	bne.n	8004f5e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	61fb      	str	r3, [r7, #28]
}
 8004f5a:	bf00      	nop
 8004f5c:	e7fe      	b.n	8004f5c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f5e:	f001 fddf 	bl	8006b20 <vPortValidateInterruptPriority>
	__asm volatile
 8004f62:	f3ef 8211 	mrs	r2, BASEPRI
 8004f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6a:	f383 8811 	msr	BASEPRI, r3
 8004f6e:	f3bf 8f6f 	isb	sy
 8004f72:	f3bf 8f4f 	dsb	sy
 8004f76:	61ba      	str	r2, [r7, #24]
 8004f78:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004f7a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f82:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d02f      	beq.n	8004fea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f94:	68b9      	ldr	r1, [r7, #8]
 8004f96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f98:	f000 f8d7 	bl	800514a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9e:	1e5a      	subs	r2, r3, #1
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004fa4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fac:	d112      	bne.n	8004fd4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d016      	beq.n	8004fe4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3310      	adds	r3, #16
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f000 fe48 	bl	8005c50 <xTaskRemoveFromEventList>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00b      	beq.n	8004fe4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	e007      	b.n	8004fe4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fd8:	3301      	adds	r3, #1
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	b25a      	sxtb	r2, r3
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	637b      	str	r3, [r7, #52]	; 0x34
 8004fe8:	e001      	b.n	8004fee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004fea:	2300      	movs	r3, #0
 8004fec:	637b      	str	r3, [r7, #52]	; 0x34
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f383 8811 	msr	BASEPRI, r3
}
 8004ff8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3738      	adds	r7, #56	; 0x38
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}

08005004 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005004:	b580      	push	{r7, lr}
 8005006:	b084      	sub	sp, #16
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d10a      	bne.n	8005028 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8005012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005016:	f383 8811 	msr	BASEPRI, r3
 800501a:	f3bf 8f6f 	isb	sy
 800501e:	f3bf 8f4f 	dsb	sy
 8005022:	60bb      	str	r3, [r7, #8]
}
 8005024:	bf00      	nop
 8005026:	e7fe      	b.n	8005026 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 8005028:	f001 fcb8 	bl	800699c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005032:	f001 fce3 	bl	80069fc <vPortExitCritical>

	return uxReturn;
 8005036:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005038:	4618      	mov	r0, r3
 800503a:	3710      	adds	r7, #16
 800503c:	46bd      	mov	sp, r7
 800503e:	bd80      	pop	{r7, pc}

08005040 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8005040:	b480      	push	{r7}
 8005042:	b085      	sub	sp, #20
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d10a      	bne.n	8005064 <uxQueueMessagesWaitingFromISR+0x24>
	__asm volatile
 800504e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005052:	f383 8811 	msr	BASEPRI, r3
 8005056:	f3bf 8f6f 	isb	sy
 800505a:	f3bf 8f4f 	dsb	sy
 800505e:	60bb      	str	r3, [r7, #8]
}
 8005060:	bf00      	nop
 8005062:	e7fe      	b.n	8005062 <uxQueueMessagesWaitingFromISR+0x22>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005068:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800506a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800506c:	4618      	mov	r0, r3
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr

08005076 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005076:	b580      	push	{r7, lr}
 8005078:	b086      	sub	sp, #24
 800507a:	af00      	add	r7, sp, #0
 800507c:	60f8      	str	r0, [r7, #12]
 800507e:	60b9      	str	r1, [r7, #8]
 8005080:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10d      	bne.n	80050b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d14d      	bne.n	8005138 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4618      	mov	r0, r3
 80050a2:	f000 ffb9 	bl	8006018 <xTaskPriorityDisinherit>
 80050a6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2200      	movs	r2, #0
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	e043      	b.n	8005138 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d119      	bne.n	80050ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6898      	ldr	r0, [r3, #8]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050be:	461a      	mov	r2, r3
 80050c0:	68b9      	ldr	r1, [r7, #8]
 80050c2:	f002 f866 	bl	8007192 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	689a      	ldr	r2, [r3, #8]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ce:	441a      	add	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	689a      	ldr	r2, [r3, #8]
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d32b      	bcc.n	8005138 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681a      	ldr	r2, [r3, #0]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	609a      	str	r2, [r3, #8]
 80050e8:	e026      	b.n	8005138 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	68d8      	ldr	r0, [r3, #12]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f2:	461a      	mov	r2, r3
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	f002 f84c 	bl	8007192 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005102:	425b      	negs	r3, r3
 8005104:	441a      	add	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	68da      	ldr	r2, [r3, #12]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	429a      	cmp	r2, r3
 8005114:	d207      	bcs.n	8005126 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	685a      	ldr	r2, [r3, #4]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	425b      	negs	r3, r3
 8005120:	441a      	add	r2, r3
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b02      	cmp	r3, #2
 800512a:	d105      	bne.n	8005138 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d002      	beq.n	8005138 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3b01      	subs	r3, #1
 8005136:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	1c5a      	adds	r2, r3, #1
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005140:	697b      	ldr	r3, [r7, #20]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b082      	sub	sp, #8
 800514e:	af00      	add	r7, sp, #0
 8005150:	6078      	str	r0, [r7, #4]
 8005152:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d018      	beq.n	800518e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	429a      	cmp	r2, r3
 8005174:	d303      	bcc.n	800517e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68d9      	ldr	r1, [r3, #12]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005186:	461a      	mov	r2, r3
 8005188:	6838      	ldr	r0, [r7, #0]
 800518a:	f002 f802 	bl	8007192 <memcpy>
	}
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b084      	sub	sp, #16
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800519e:	f001 fbfd 	bl	800699c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051aa:	e011      	b.n	80051d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3324      	adds	r3, #36	; 0x24
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fd49 	bl	8005c50 <xTaskRemoveFromEventList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051c4:	f000 fe20 	bl	8005e08 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dce9      	bgt.n	80051ac <prvUnlockQueue+0x16>
 80051d8:	e000      	b.n	80051dc <prvUnlockQueue+0x46>
					break;
 80051da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80051e4:	f001 fc0a 	bl	80069fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e8:	f001 fbd8 	bl	800699c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f4:	e011      	b.n	800521a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	691b      	ldr	r3, [r3, #16]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d012      	beq.n	8005224 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	3310      	adds	r3, #16
 8005202:	4618      	mov	r0, r3
 8005204:	f000 fd24 	bl	8005c50 <xTaskRemoveFromEventList>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800520e:	f000 fdfb 	bl	8005e08 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005212:	7bbb      	ldrb	r3, [r7, #14]
 8005214:	3b01      	subs	r3, #1
 8005216:	b2db      	uxtb	r3, r3
 8005218:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800521e:	2b00      	cmp	r3, #0
 8005220:	dce9      	bgt.n	80051f6 <prvUnlockQueue+0x60>
 8005222:	e000      	b.n	8005226 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005224:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	22ff      	movs	r2, #255	; 0xff
 800522a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800522e:	f001 fbe5 	bl	80069fc <vPortExitCritical>
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b084      	sub	sp, #16
 800523e:	af00      	add	r7, sp, #0
 8005240:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005242:	f001 fbab 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800524e:	2301      	movs	r3, #1
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	e001      	b.n	8005258 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005254:	2300      	movs	r3, #0
 8005256:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005258:	f001 fbd0 	bl	80069fc <vPortExitCritical>

	return xReturn;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800526e:	f001 fb95 	bl	800699c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527a:	429a      	cmp	r2, r3
 800527c:	d102      	bne.n	8005284 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800527e:	2301      	movs	r3, #1
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e001      	b.n	8005288 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005288:	f001 fbb8 	bl	80069fc <vPortExitCritical>

	return xReturn;
 800528c:	68fb      	ldr	r3, [r7, #12]
}
 800528e:	4618      	mov	r0, r3
 8005290:	3710      	adds	r7, #16
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
	...

08005298 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052a2:	2300      	movs	r3, #0
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e014      	b.n	80052d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80052a8:	4a0e      	ldr	r2, [pc, #56]	; (80052e4 <vQueueAddToRegistry+0x4c>)
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10b      	bne.n	80052cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80052b4:	490b      	ldr	r1, [pc, #44]	; (80052e4 <vQueueAddToRegistry+0x4c>)
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80052be:	4a09      	ldr	r2, [pc, #36]	; (80052e4 <vQueueAddToRegistry+0x4c>)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80052ca:	e006      	b.n	80052da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	3301      	adds	r3, #1
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2b07      	cmp	r3, #7
 80052d6:	d9e7      	bls.n	80052a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052d8:	bf00      	nop
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	20000ab4 	.word	0x20000ab4

080052e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b086      	sub	sp, #24
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052f8:	f001 fb50 	bl	800699c <vPortEnterCritical>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005302:	b25b      	sxtb	r3, r3
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d103      	bne.n	8005312 <vQueueWaitForMessageRestricted+0x2a>
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005318:	b25b      	sxtb	r3, r3
 800531a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800531e:	d103      	bne.n	8005328 <vQueueWaitForMessageRestricted+0x40>
 8005320:	697b      	ldr	r3, [r7, #20]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005328:	f001 fb68 	bl	80069fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800532c:	697b      	ldr	r3, [r7, #20]
 800532e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3324      	adds	r3, #36	; 0x24
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	68b9      	ldr	r1, [r7, #8]
 800533c:	4618      	mov	r0, r3
 800533e:	f000 fc5b 	bl	8005bf8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005342:	6978      	ldr	r0, [r7, #20]
 8005344:	f7ff ff27 	bl	8005196 <prvUnlockQueue>
	}
 8005348:	bf00      	nop
 800534a:	3718      	adds	r7, #24
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005350:	b580      	push	{r7, lr}
 8005352:	b08e      	sub	sp, #56	; 0x38
 8005354:	af04      	add	r7, sp, #16
 8005356:	60f8      	str	r0, [r7, #12]
 8005358:	60b9      	str	r1, [r7, #8]
 800535a:	607a      	str	r2, [r7, #4]
 800535c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800535e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005360:	2b00      	cmp	r3, #0
 8005362:	d10a      	bne.n	800537a <xTaskCreateStatic+0x2a>
	__asm volatile
 8005364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005368:	f383 8811 	msr	BASEPRI, r3
 800536c:	f3bf 8f6f 	isb	sy
 8005370:	f3bf 8f4f 	dsb	sy
 8005374:	623b      	str	r3, [r7, #32]
}
 8005376:	bf00      	nop
 8005378:	e7fe      	b.n	8005378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800537a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d10a      	bne.n	8005396 <xTaskCreateStatic+0x46>
	__asm volatile
 8005380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005384:	f383 8811 	msr	BASEPRI, r3
 8005388:	f3bf 8f6f 	isb	sy
 800538c:	f3bf 8f4f 	dsb	sy
 8005390:	61fb      	str	r3, [r7, #28]
}
 8005392:	bf00      	nop
 8005394:	e7fe      	b.n	8005394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005396:	23bc      	movs	r3, #188	; 0xbc
 8005398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800539a:	693b      	ldr	r3, [r7, #16]
 800539c:	2bbc      	cmp	r3, #188	; 0xbc
 800539e:	d00a      	beq.n	80053b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80053a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053a4:	f383 8811 	msr	BASEPRI, r3
 80053a8:	f3bf 8f6f 	isb	sy
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	61bb      	str	r3, [r7, #24]
}
 80053b2:	bf00      	nop
 80053b4:	e7fe      	b.n	80053b4 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80053b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d01e      	beq.n	80053fa <xTaskCreateStatic+0xaa>
 80053bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d01b      	beq.n	80053fa <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053c4:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80053c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80053ca:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80053cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80053d4:	2300      	movs	r3, #0
 80053d6:	9303      	str	r3, [sp, #12]
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	9302      	str	r3, [sp, #8]
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68b9      	ldr	r1, [r7, #8]
 80053ec:	68f8      	ldr	r0, [r7, #12]
 80053ee:	f000 f851 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053f4:	f000 f8ec 	bl	80055d0 <prvAddNewTaskToReadyList>
 80053f8:	e001      	b.n	80053fe <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053fe:	697b      	ldr	r3, [r7, #20]
	}
 8005400:	4618      	mov	r0, r3
 8005402:	3728      	adds	r7, #40	; 0x28
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}

08005408 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08c      	sub	sp, #48	; 0x30
 800540c:	af04      	add	r7, sp, #16
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	603b      	str	r3, [r7, #0]
 8005414:	4613      	mov	r3, r2
 8005416:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005418:	88fb      	ldrh	r3, [r7, #6]
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4618      	mov	r0, r3
 800541e:	f001 fbbd 	bl	8006b9c <pvPortMalloc>
 8005422:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00e      	beq.n	8005448 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800542a:	20bc      	movs	r0, #188	; 0xbc
 800542c:	f001 fbb6 	bl	8006b9c <pvPortMalloc>
 8005430:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d003      	beq.n	8005440 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	631a      	str	r2, [r3, #48]	; 0x30
 800543e:	e005      	b.n	800544c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005440:	6978      	ldr	r0, [r7, #20]
 8005442:	f001 fc6f 	bl	8006d24 <vPortFree>
 8005446:	e001      	b.n	800544c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800544c:	69fb      	ldr	r3, [r7, #28]
 800544e:	2b00      	cmp	r3, #0
 8005450:	d017      	beq.n	8005482 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800545a:	88fa      	ldrh	r2, [r7, #6]
 800545c:	2300      	movs	r3, #0
 800545e:	9303      	str	r3, [sp, #12]
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	9302      	str	r3, [sp, #8]
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800546a:	9300      	str	r3, [sp, #0]
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	68f8      	ldr	r0, [r7, #12]
 8005472:	f000 f80f 	bl	8005494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005476:	69f8      	ldr	r0, [r7, #28]
 8005478:	f000 f8aa 	bl	80055d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800547c:	2301      	movs	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
 8005480:	e002      	b.n	8005488 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005482:	f04f 33ff 	mov.w	r3, #4294967295
 8005486:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005488:	69bb      	ldr	r3, [r7, #24]
	}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b088      	sub	sp, #32
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	607a      	str	r2, [r7, #4]
 80054a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80054a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	461a      	mov	r2, r3
 80054ac:	21a5      	movs	r1, #165	; 0xa5
 80054ae:	f001 fe7e 	bl	80071ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80054b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80054bc:	3b01      	subs	r3, #1
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f023 0307 	bic.w	r3, r3, #7
 80054ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00a      	beq.n	80054ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80054d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054da:	f383 8811 	msr	BASEPRI, r3
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	f3bf 8f4f 	dsb	sy
 80054e6:	617b      	str	r3, [r7, #20]
}
 80054e8:	bf00      	nop
 80054ea:	e7fe      	b.n	80054ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054ec:	2300      	movs	r3, #0
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e012      	b.n	8005518 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054f2:	68ba      	ldr	r2, [r7, #8]
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	4413      	add	r3, r2
 80054f8:	7819      	ldrb	r1, [r3, #0]
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	69fb      	ldr	r3, [r7, #28]
 80054fe:	4413      	add	r3, r2
 8005500:	3334      	adds	r3, #52	; 0x34
 8005502:	460a      	mov	r2, r1
 8005504:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	4413      	add	r3, r2
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d006      	beq.n	8005520 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005512:	69fb      	ldr	r3, [r7, #28]
 8005514:	3301      	adds	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	2b0f      	cmp	r3, #15
 800551c:	d9e9      	bls.n	80054f2 <prvInitialiseNewTask+0x5e>
 800551e:	e000      	b.n	8005522 <prvInitialiseNewTask+0x8e>
		{
			break;
 8005520:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	2200      	movs	r2, #0
 8005526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800552a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552c:	2b37      	cmp	r3, #55	; 0x37
 800552e:	d901      	bls.n	8005534 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005530:	2337      	movs	r3, #55	; 0x37
 8005532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800553a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005542:	2200      	movs	r2, #0
 8005544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	3304      	adds	r3, #4
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f893 	bl	8004676 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005552:	3318      	adds	r3, #24
 8005554:	4618      	mov	r0, r3
 8005556:	f7ff f88e 	bl	8004676 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800555a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800555c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800555e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800556e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557a:	2200      	movs	r2, #0
 800557c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005582:	3354      	adds	r3, #84	; 0x54
 8005584:	2260      	movs	r2, #96	; 0x60
 8005586:	2100      	movs	r1, #0
 8005588:	4618      	mov	r0, r3
 800558a:	f001 fe10 	bl	80071ae <memset>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	4a0c      	ldr	r2, [pc, #48]	; (80055c4 <prvInitialiseNewTask+0x130>)
 8005592:	659a      	str	r2, [r3, #88]	; 0x58
 8005594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005596:	4a0c      	ldr	r2, [pc, #48]	; (80055c8 <prvInitialiseNewTask+0x134>)
 8005598:	65da      	str	r2, [r3, #92]	; 0x5c
 800559a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559c:	4a0b      	ldr	r2, [pc, #44]	; (80055cc <prvInitialiseNewTask+0x138>)
 800559e:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80055a0:	683a      	ldr	r2, [r7, #0]
 80055a2:	68f9      	ldr	r1, [r7, #12]
 80055a4:	69b8      	ldr	r0, [r7, #24]
 80055a6:	f001 f90b 	bl	80067c0 <pxPortInitialiseStack>
 80055aa:	4602      	mov	r2, r0
 80055ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ae:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d002      	beq.n	80055bc <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80055b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80055bc:	bf00      	nop
 80055be:	3720      	adds	r7, #32
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	08009be4 	.word	0x08009be4
 80055c8:	08009c04 	.word	0x08009c04
 80055cc:	08009bc4 	.word	0x08009bc4

080055d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80055d8:	f001 f9e0 	bl	800699c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80055dc:	4b2d      	ldr	r3, [pc, #180]	; (8005694 <prvAddNewTaskToReadyList+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3301      	adds	r3, #1
 80055e2:	4a2c      	ldr	r2, [pc, #176]	; (8005694 <prvAddNewTaskToReadyList+0xc4>)
 80055e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80055e6:	4b2c      	ldr	r3, [pc, #176]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d109      	bne.n	8005602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80055ee:	4a2a      	ldr	r2, [pc, #168]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80055f4:	4b27      	ldr	r3, [pc, #156]	; (8005694 <prvAddNewTaskToReadyList+0xc4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d110      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80055fc:	f000 fc28 	bl	8005e50 <prvInitialiseTaskLists>
 8005600:	e00d      	b.n	800561e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005602:	4b26      	ldr	r3, [pc, #152]	; (800569c <prvAddNewTaskToReadyList+0xcc>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800560a:	4b23      	ldr	r3, [pc, #140]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005614:	429a      	cmp	r2, r3
 8005616:	d802      	bhi.n	800561e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005618:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800561e:	4b20      	ldr	r3, [pc, #128]	; (80056a0 <prvAddNewTaskToReadyList+0xd0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3301      	adds	r3, #1
 8005624:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <prvAddNewTaskToReadyList+0xd0>)
 8005626:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005628:	4b1d      	ldr	r3, [pc, #116]	; (80056a0 <prvAddNewTaskToReadyList+0xd0>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005634:	4b1b      	ldr	r3, [pc, #108]	; (80056a4 <prvAddNewTaskToReadyList+0xd4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	429a      	cmp	r2, r3
 800563a:	d903      	bls.n	8005644 <prvAddNewTaskToReadyList+0x74>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005640:	4a18      	ldr	r2, [pc, #96]	; (80056a4 <prvAddNewTaskToReadyList+0xd4>)
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005648:	4613      	mov	r3, r2
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <prvAddNewTaskToReadyList+0xd8>)
 8005652:	441a      	add	r2, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	3304      	adds	r3, #4
 8005658:	4619      	mov	r1, r3
 800565a:	4610      	mov	r0, r2
 800565c:	f7ff f817 	bl	800468e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005660:	f001 f9cc 	bl	80069fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005664:	4b0d      	ldr	r3, [pc, #52]	; (800569c <prvAddNewTaskToReadyList+0xcc>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d00e      	beq.n	800568a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <prvAddNewTaskToReadyList+0xc8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	429a      	cmp	r2, r3
 8005678:	d207      	bcs.n	800568a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800567a:	4b0c      	ldr	r3, [pc, #48]	; (80056ac <prvAddNewTaskToReadyList+0xdc>)
 800567c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	f3bf 8f4f 	dsb	sy
 8005686:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568a:	bf00      	nop
 800568c:	3708      	adds	r7, #8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000fc8 	.word	0x20000fc8
 8005698:	20000af4 	.word	0x20000af4
 800569c:	20000fd4 	.word	0x20000fd4
 80056a0:	20000fe4 	.word	0x20000fe4
 80056a4:	20000fd0 	.word	0x20000fd0
 80056a8:	20000af8 	.word	0x20000af8
 80056ac:	e000ed04 	.word	0xe000ed04

080056b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80056b8:	2300      	movs	r3, #0
 80056ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d017      	beq.n	80056f2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80056c2:	4b13      	ldr	r3, [pc, #76]	; (8005710 <vTaskDelay+0x60>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00a      	beq.n	80056e0 <vTaskDelay+0x30>
	__asm volatile
 80056ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ce:	f383 8811 	msr	BASEPRI, r3
 80056d2:	f3bf 8f6f 	isb	sy
 80056d6:	f3bf 8f4f 	dsb	sy
 80056da:	60bb      	str	r3, [r7, #8]
}
 80056dc:	bf00      	nop
 80056de:	e7fe      	b.n	80056de <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80056e0:	f000 f88a 	bl	80057f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80056e4:	2100      	movs	r1, #0
 80056e6:	6878      	ldr	r0, [r7, #4]
 80056e8:	f000 fd04 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80056ec:	f000 f892 	bl	8005814 <xTaskResumeAll>
 80056f0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d107      	bne.n	8005708 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80056f8:	4b06      	ldr	r3, [pc, #24]	; (8005714 <vTaskDelay+0x64>)
 80056fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	f3bf 8f4f 	dsb	sy
 8005704:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20000ff0 	.word	0x20000ff0
 8005714:	e000ed04 	.word	0xe000ed04

08005718 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b08a      	sub	sp, #40	; 0x28
 800571c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005722:	2300      	movs	r3, #0
 8005724:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005726:	463a      	mov	r2, r7
 8005728:	1d39      	adds	r1, r7, #4
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4618      	mov	r0, r3
 8005730:	f7fe ff50 	bl	80045d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005734:	6839      	ldr	r1, [r7, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	9202      	str	r2, [sp, #8]
 800573c:	9301      	str	r3, [sp, #4]
 800573e:	2300      	movs	r3, #0
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	2300      	movs	r3, #0
 8005744:	460a      	mov	r2, r1
 8005746:	4924      	ldr	r1, [pc, #144]	; (80057d8 <vTaskStartScheduler+0xc0>)
 8005748:	4824      	ldr	r0, [pc, #144]	; (80057dc <vTaskStartScheduler+0xc4>)
 800574a:	f7ff fe01 	bl	8005350 <xTaskCreateStatic>
 800574e:	4603      	mov	r3, r0
 8005750:	4a23      	ldr	r2, [pc, #140]	; (80057e0 <vTaskStartScheduler+0xc8>)
 8005752:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005754:	4b22      	ldr	r3, [pc, #136]	; (80057e0 <vTaskStartScheduler+0xc8>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d002      	beq.n	8005762 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e001      	b.n	8005766 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d102      	bne.n	8005772 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800576c:	f000 fd16 	bl	800619c <xTimerCreateTimerTask>
 8005770:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d11b      	bne.n	80057b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800577c:	f383 8811 	msr	BASEPRI, r3
 8005780:	f3bf 8f6f 	isb	sy
 8005784:	f3bf 8f4f 	dsb	sy
 8005788:	613b      	str	r3, [r7, #16]
}
 800578a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <vTaskStartScheduler+0xcc>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3354      	adds	r3, #84	; 0x54
 8005792:	4a15      	ldr	r2, [pc, #84]	; (80057e8 <vTaskStartScheduler+0xd0>)
 8005794:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005796:	4b15      	ldr	r3, [pc, #84]	; (80057ec <vTaskStartScheduler+0xd4>)
 8005798:	f04f 32ff 	mov.w	r2, #4294967295
 800579c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800579e:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <vTaskStartScheduler+0xd8>)
 80057a0:	2201      	movs	r2, #1
 80057a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <vTaskStartScheduler+0xdc>)
 80057a6:	2200      	movs	r2, #0
 80057a8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80057aa:	f001 f885 	bl	80068b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80057ae:	e00e      	b.n	80057ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b6:	d10a      	bne.n	80057ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80057b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057bc:	f383 8811 	msr	BASEPRI, r3
 80057c0:	f3bf 8f6f 	isb	sy
 80057c4:	f3bf 8f4f 	dsb	sy
 80057c8:	60fb      	str	r3, [r7, #12]
}
 80057ca:	bf00      	nop
 80057cc:	e7fe      	b.n	80057cc <vTaskStartScheduler+0xb4>
}
 80057ce:	bf00      	nop
 80057d0:	3718      	adds	r7, #24
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	08009b10 	.word	0x08009b10
 80057dc:	08005e21 	.word	0x08005e21
 80057e0:	20000fec 	.word	0x20000fec
 80057e4:	20000af4 	.word	0x20000af4
 80057e8:	20000010 	.word	0x20000010
 80057ec:	20000fe8 	.word	0x20000fe8
 80057f0:	20000fd4 	.word	0x20000fd4
 80057f4:	20000fcc 	.word	0x20000fcc

080057f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80057fc:	4b04      	ldr	r3, [pc, #16]	; (8005810 <vTaskSuspendAll+0x18>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3301      	adds	r3, #1
 8005802:	4a03      	ldr	r2, [pc, #12]	; (8005810 <vTaskSuspendAll+0x18>)
 8005804:	6013      	str	r3, [r2, #0]
}
 8005806:	bf00      	nop
 8005808:	46bd      	mov	sp, r7
 800580a:	bc80      	pop	{r7}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20000ff0 	.word	0x20000ff0

08005814 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b084      	sub	sp, #16
 8005818:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800581e:	2300      	movs	r3, #0
 8005820:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005822:	4b42      	ldr	r3, [pc, #264]	; (800592c <xTaskResumeAll+0x118>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d10a      	bne.n	8005840 <xTaskResumeAll+0x2c>
	__asm volatile
 800582a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	603b      	str	r3, [r7, #0]
}
 800583c:	bf00      	nop
 800583e:	e7fe      	b.n	800583e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005840:	f001 f8ac 	bl	800699c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005844:	4b39      	ldr	r3, [pc, #228]	; (800592c <xTaskResumeAll+0x118>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	3b01      	subs	r3, #1
 800584a:	4a38      	ldr	r2, [pc, #224]	; (800592c <xTaskResumeAll+0x118>)
 800584c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800584e:	4b37      	ldr	r3, [pc, #220]	; (800592c <xTaskResumeAll+0x118>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d162      	bne.n	800591c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005856:	4b36      	ldr	r3, [pc, #216]	; (8005930 <xTaskResumeAll+0x11c>)
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d05e      	beq.n	800591c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800585e:	e02f      	b.n	80058c0 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005860:	4b34      	ldr	r3, [pc, #208]	; (8005934 <xTaskResumeAll+0x120>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	3318      	adds	r3, #24
 800586c:	4618      	mov	r0, r3
 800586e:	f7fe ff69 	bl	8004744 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	3304      	adds	r3, #4
 8005876:	4618      	mov	r0, r3
 8005878:	f7fe ff64 	bl	8004744 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005880:	4b2d      	ldr	r3, [pc, #180]	; (8005938 <xTaskResumeAll+0x124>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	429a      	cmp	r2, r3
 8005886:	d903      	bls.n	8005890 <xTaskResumeAll+0x7c>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588c:	4a2a      	ldr	r2, [pc, #168]	; (8005938 <xTaskResumeAll+0x124>)
 800588e:	6013      	str	r3, [r2, #0]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005894:	4613      	mov	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	4a27      	ldr	r2, [pc, #156]	; (800593c <xTaskResumeAll+0x128>)
 800589e:	441a      	add	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	3304      	adds	r3, #4
 80058a4:	4619      	mov	r1, r3
 80058a6:	4610      	mov	r0, r2
 80058a8:	f7fe fef1 	bl	800468e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b0:	4b23      	ldr	r3, [pc, #140]	; (8005940 <xTaskResumeAll+0x12c>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d302      	bcc.n	80058c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80058ba:	4b22      	ldr	r3, [pc, #136]	; (8005944 <xTaskResumeAll+0x130>)
 80058bc:	2201      	movs	r2, #1
 80058be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80058c0:	4b1c      	ldr	r3, [pc, #112]	; (8005934 <xTaskResumeAll+0x120>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d1cb      	bne.n	8005860 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d001      	beq.n	80058d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80058ce:	f000 fb61 	bl	8005f94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80058d2:	4b1d      	ldr	r3, [pc, #116]	; (8005948 <xTaskResumeAll+0x134>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d010      	beq.n	8005900 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80058de:	f000 f845 	bl	800596c <xTaskIncrementTick>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80058e8:	4b16      	ldr	r3, [pc, #88]	; (8005944 <xTaskResumeAll+0x130>)
 80058ea:	2201      	movs	r2, #1
 80058ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1f1      	bne.n	80058de <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 80058fa:	4b13      	ldr	r3, [pc, #76]	; (8005948 <xTaskResumeAll+0x134>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005900:	4b10      	ldr	r3, [pc, #64]	; (8005944 <xTaskResumeAll+0x130>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d009      	beq.n	800591c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005908:	2301      	movs	r3, #1
 800590a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800590c:	4b0f      	ldr	r3, [pc, #60]	; (800594c <xTaskResumeAll+0x138>)
 800590e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005912:	601a      	str	r2, [r3, #0]
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800591c:	f001 f86e 	bl	80069fc <vPortExitCritical>

	return xAlreadyYielded;
 8005920:	68bb      	ldr	r3, [r7, #8]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3710      	adds	r7, #16
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	20000ff0 	.word	0x20000ff0
 8005930:	20000fc8 	.word	0x20000fc8
 8005934:	20000f88 	.word	0x20000f88
 8005938:	20000fd0 	.word	0x20000fd0
 800593c:	20000af8 	.word	0x20000af8
 8005940:	20000af4 	.word	0x20000af4
 8005944:	20000fdc 	.word	0x20000fdc
 8005948:	20000fd8 	.word	0x20000fd8
 800594c:	e000ed04 	.word	0xe000ed04

08005950 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005956:	4b04      	ldr	r3, [pc, #16]	; (8005968 <xTaskGetTickCount+0x18>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800595c:	687b      	ldr	r3, [r7, #4]
}
 800595e:	4618      	mov	r0, r3
 8005960:	370c      	adds	r7, #12
 8005962:	46bd      	mov	sp, r7
 8005964:	bc80      	pop	{r7}
 8005966:	4770      	bx	lr
 8005968:	20000fcc 	.word	0x20000fcc

0800596c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005972:	2300      	movs	r3, #0
 8005974:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005976:	4b51      	ldr	r3, [pc, #324]	; (8005abc <xTaskIncrementTick+0x150>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	f040 808e 	bne.w	8005a9c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005980:	4b4f      	ldr	r3, [pc, #316]	; (8005ac0 <xTaskIncrementTick+0x154>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	3301      	adds	r3, #1
 8005986:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005988:	4a4d      	ldr	r2, [pc, #308]	; (8005ac0 <xTaskIncrementTick+0x154>)
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d120      	bne.n	80059d6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005994:	4b4b      	ldr	r3, [pc, #300]	; (8005ac4 <xTaskIncrementTick+0x158>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00a      	beq.n	80059b4 <xTaskIncrementTick+0x48>
	__asm volatile
 800599e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a2:	f383 8811 	msr	BASEPRI, r3
 80059a6:	f3bf 8f6f 	isb	sy
 80059aa:	f3bf 8f4f 	dsb	sy
 80059ae:	603b      	str	r3, [r7, #0]
}
 80059b0:	bf00      	nop
 80059b2:	e7fe      	b.n	80059b2 <xTaskIncrementTick+0x46>
 80059b4:	4b43      	ldr	r3, [pc, #268]	; (8005ac4 <xTaskIncrementTick+0x158>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	4b43      	ldr	r3, [pc, #268]	; (8005ac8 <xTaskIncrementTick+0x15c>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a41      	ldr	r2, [pc, #260]	; (8005ac4 <xTaskIncrementTick+0x158>)
 80059c0:	6013      	str	r3, [r2, #0]
 80059c2:	4a41      	ldr	r2, [pc, #260]	; (8005ac8 <xTaskIncrementTick+0x15c>)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6013      	str	r3, [r2, #0]
 80059c8:	4b40      	ldr	r3, [pc, #256]	; (8005acc <xTaskIncrementTick+0x160>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	3301      	adds	r3, #1
 80059ce:	4a3f      	ldr	r2, [pc, #252]	; (8005acc <xTaskIncrementTick+0x160>)
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	f000 fadf 	bl	8005f94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80059d6:	4b3e      	ldr	r3, [pc, #248]	; (8005ad0 <xTaskIncrementTick+0x164>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	429a      	cmp	r2, r3
 80059de:	d34e      	bcc.n	8005a7e <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e0:	4b38      	ldr	r3, [pc, #224]	; (8005ac4 <xTaskIncrementTick+0x158>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <xTaskIncrementTick+0x82>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e000      	b.n	80059f0 <xTaskIncrementTick+0x84>
 80059ee:	2300      	movs	r3, #0
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d004      	beq.n	80059fe <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f4:	4b36      	ldr	r3, [pc, #216]	; (8005ad0 <xTaskIncrementTick+0x164>)
 80059f6:	f04f 32ff 	mov.w	r2, #4294967295
 80059fa:	601a      	str	r2, [r3, #0]
					break;
 80059fc:	e03f      	b.n	8005a7e <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80059fe:	4b31      	ldr	r3, [pc, #196]	; (8005ac4 <xTaskIncrementTick+0x158>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005a0e:	693a      	ldr	r2, [r7, #16]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d203      	bcs.n	8005a1e <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005a16:	4a2e      	ldr	r2, [pc, #184]	; (8005ad0 <xTaskIncrementTick+0x164>)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6013      	str	r3, [r2, #0]
						break;
 8005a1c:	e02f      	b.n	8005a7e <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	3304      	adds	r3, #4
 8005a22:	4618      	mov	r0, r3
 8005a24:	f7fe fe8e 	bl	8004744 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d004      	beq.n	8005a3a <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	3318      	adds	r3, #24
 8005a34:	4618      	mov	r0, r3
 8005a36:	f7fe fe85 	bl	8004744 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a3e:	4b25      	ldr	r3, [pc, #148]	; (8005ad4 <xTaskIncrementTick+0x168>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	429a      	cmp	r2, r3
 8005a44:	d903      	bls.n	8005a4e <xTaskIncrementTick+0xe2>
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	4a22      	ldr	r2, [pc, #136]	; (8005ad4 <xTaskIncrementTick+0x168>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a52:	4613      	mov	r3, r2
 8005a54:	009b      	lsls	r3, r3, #2
 8005a56:	4413      	add	r3, r2
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	4a1f      	ldr	r2, [pc, #124]	; (8005ad8 <xTaskIncrementTick+0x16c>)
 8005a5c:	441a      	add	r2, r3
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	3304      	adds	r3, #4
 8005a62:	4619      	mov	r1, r3
 8005a64:	4610      	mov	r0, r2
 8005a66:	f7fe fe12 	bl	800468e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6e:	4b1b      	ldr	r3, [pc, #108]	; (8005adc <xTaskIncrementTick+0x170>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d3b3      	bcc.n	80059e0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a7c:	e7b0      	b.n	80059e0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005a7e:	4b17      	ldr	r3, [pc, #92]	; (8005adc <xTaskIncrementTick+0x170>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a84:	4914      	ldr	r1, [pc, #80]	; (8005ad8 <xTaskIncrementTick+0x16c>)
 8005a86:	4613      	mov	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	4413      	add	r3, r2
 8005a8c:	009b      	lsls	r3, r3, #2
 8005a8e:	440b      	add	r3, r1
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d907      	bls.n	8005aa6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005a96:	2301      	movs	r3, #1
 8005a98:	617b      	str	r3, [r7, #20]
 8005a9a:	e004      	b.n	8005aa6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a9c:	4b10      	ldr	r3, [pc, #64]	; (8005ae0 <xTaskIncrementTick+0x174>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	4a0f      	ldr	r2, [pc, #60]	; (8005ae0 <xTaskIncrementTick+0x174>)
 8005aa4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005aa6:	4b0f      	ldr	r3, [pc, #60]	; (8005ae4 <xTaskIncrementTick+0x178>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d001      	beq.n	8005ab2 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ab2:	697b      	ldr	r3, [r7, #20]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3718      	adds	r7, #24
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000ff0 	.word	0x20000ff0
 8005ac0:	20000fcc 	.word	0x20000fcc
 8005ac4:	20000f80 	.word	0x20000f80
 8005ac8:	20000f84 	.word	0x20000f84
 8005acc:	20000fe0 	.word	0x20000fe0
 8005ad0:	20000fe8 	.word	0x20000fe8
 8005ad4:	20000fd0 	.word	0x20000fd0
 8005ad8:	20000af8 	.word	0x20000af8
 8005adc:	20000af4 	.word	0x20000af4
 8005ae0:	20000fd8 	.word	0x20000fd8
 8005ae4:	20000fdc 	.word	0x20000fdc

08005ae8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005aee:	4b2a      	ldr	r3, [pc, #168]	; (8005b98 <vTaskSwitchContext+0xb0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d003      	beq.n	8005afe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005af6:	4b29      	ldr	r3, [pc, #164]	; (8005b9c <vTaskSwitchContext+0xb4>)
 8005af8:	2201      	movs	r2, #1
 8005afa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005afc:	e046      	b.n	8005b8c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005afe:	4b27      	ldr	r3, [pc, #156]	; (8005b9c <vTaskSwitchContext+0xb4>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005b04:	4b26      	ldr	r3, [pc, #152]	; (8005ba0 <vTaskSwitchContext+0xb8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	60fb      	str	r3, [r7, #12]
 8005b0a:	e010      	b.n	8005b2e <vTaskSwitchContext+0x46>
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <vTaskSwitchContext+0x40>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vTaskSwitchContext+0x3e>
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	491d      	ldr	r1, [pc, #116]	; (8005ba4 <vTaskSwitchContext+0xbc>)
 8005b30:	68fa      	ldr	r2, [r7, #12]
 8005b32:	4613      	mov	r3, r2
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	440b      	add	r3, r1
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d0e4      	beq.n	8005b0c <vTaskSwitchContext+0x24>
 8005b42:	68fa      	ldr	r2, [r7, #12]
 8005b44:	4613      	mov	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	4413      	add	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4a15      	ldr	r2, [pc, #84]	; (8005ba4 <vTaskSwitchContext+0xbc>)
 8005b4e:	4413      	add	r3, r2
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	68bb      	ldr	r3, [r7, #8]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	605a      	str	r2, [r3, #4]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	3308      	adds	r3, #8
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d104      	bne.n	8005b72 <vTaskSwitchContext+0x8a>
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	685a      	ldr	r2, [r3, #4]
 8005b6e:	68bb      	ldr	r3, [r7, #8]
 8005b70:	605a      	str	r2, [r3, #4]
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	4a0b      	ldr	r2, [pc, #44]	; (8005ba8 <vTaskSwitchContext+0xc0>)
 8005b7a:	6013      	str	r3, [r2, #0]
 8005b7c:	4a08      	ldr	r2, [pc, #32]	; (8005ba0 <vTaskSwitchContext+0xb8>)
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b82:	4b09      	ldr	r3, [pc, #36]	; (8005ba8 <vTaskSwitchContext+0xc0>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	3354      	adds	r3, #84	; 0x54
 8005b88:	4a08      	ldr	r2, [pc, #32]	; (8005bac <vTaskSwitchContext+0xc4>)
 8005b8a:	6013      	str	r3, [r2, #0]
}
 8005b8c:	bf00      	nop
 8005b8e:	3714      	adds	r7, #20
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bc80      	pop	{r7}
 8005b94:	4770      	bx	lr
 8005b96:	bf00      	nop
 8005b98:	20000ff0 	.word	0x20000ff0
 8005b9c:	20000fdc 	.word	0x20000fdc
 8005ba0:	20000fd0 	.word	0x20000fd0
 8005ba4:	20000af8 	.word	0x20000af8
 8005ba8:	20000af4 	.word	0x20000af4
 8005bac:	20000010 	.word	0x20000010

08005bb0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d10a      	bne.n	8005bd6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc4:	f383 8811 	msr	BASEPRI, r3
 8005bc8:	f3bf 8f6f 	isb	sy
 8005bcc:	f3bf 8f4f 	dsb	sy
 8005bd0:	60fb      	str	r3, [r7, #12]
}
 8005bd2:	bf00      	nop
 8005bd4:	e7fe      	b.n	8005bd4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <vTaskPlaceOnEventList+0x44>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe fd78 	bl	80046d4 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005be4:	2101      	movs	r1, #1
 8005be6:	6838      	ldr	r0, [r7, #0]
 8005be8:	f000 fa84 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
}
 8005bec:	bf00      	nop
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}
 8005bf4:	20000af4 	.word	0x20000af4

08005bf8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10a      	bne.n	8005c20 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c0e:	f383 8811 	msr	BASEPRI, r3
 8005c12:	f3bf 8f6f 	isb	sy
 8005c16:	f3bf 8f4f 	dsb	sy
 8005c1a:	617b      	str	r3, [r7, #20]
}
 8005c1c:	bf00      	nop
 8005c1e:	e7fe      	b.n	8005c1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <vTaskPlaceOnEventListRestricted+0x54>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3318      	adds	r3, #24
 8005c26:	4619      	mov	r1, r3
 8005c28:	68f8      	ldr	r0, [r7, #12]
 8005c2a:	f7fe fd30 	bl	800468e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005c34:	f04f 33ff 	mov.w	r3, #4294967295
 8005c38:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005c3a:	6879      	ldr	r1, [r7, #4]
 8005c3c:	68b8      	ldr	r0, [r7, #8]
 8005c3e:	f000 fa59 	bl	80060f4 <prvAddCurrentTaskToDelayedList>
	}
 8005c42:	bf00      	nop
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	20000af4 	.word	0x20000af4

08005c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d10a      	bne.n	8005c7c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6a:	f383 8811 	msr	BASEPRI, r3
 8005c6e:	f3bf 8f6f 	isb	sy
 8005c72:	f3bf 8f4f 	dsb	sy
 8005c76:	60fb      	str	r3, [r7, #12]
}
 8005c78:	bf00      	nop
 8005c7a:	e7fe      	b.n	8005c7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	3318      	adds	r3, #24
 8005c80:	4618      	mov	r0, r3
 8005c82:	f7fe fd5f 	bl	8004744 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c86:	4b1e      	ldr	r3, [pc, #120]	; (8005d00 <xTaskRemoveFromEventList+0xb0>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d11d      	bne.n	8005cca <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	3304      	adds	r3, #4
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7fe fd56 	bl	8004744 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c9c:	4b19      	ldr	r3, [pc, #100]	; (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d903      	bls.n	8005cac <xTaskRemoveFromEventList+0x5c>
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <xTaskRemoveFromEventList+0xb4>)
 8005caa:	6013      	str	r3, [r2, #0]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cb0:	4613      	mov	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	4413      	add	r3, r2
 8005cb6:	009b      	lsls	r3, r3, #2
 8005cb8:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <xTaskRemoveFromEventList+0xb8>)
 8005cba:	441a      	add	r2, r3
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	4610      	mov	r0, r2
 8005cc4:	f7fe fce3 	bl	800468e <vListInsertEnd>
 8005cc8:	e005      	b.n	8005cd6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	3318      	adds	r3, #24
 8005cce:	4619      	mov	r1, r3
 8005cd0:	480e      	ldr	r0, [pc, #56]	; (8005d0c <xTaskRemoveFromEventList+0xbc>)
 8005cd2:	f7fe fcdc 	bl	800468e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <xTaskRemoveFromEventList+0xc0>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	d905      	bls.n	8005cf0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005ce8:	4b0a      	ldr	r3, [pc, #40]	; (8005d14 <xTaskRemoveFromEventList+0xc4>)
 8005cea:	2201      	movs	r2, #1
 8005cec:	601a      	str	r2, [r3, #0]
 8005cee:	e001      	b.n	8005cf4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005cf4:	697b      	ldr	r3, [r7, #20]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3718      	adds	r7, #24
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	bf00      	nop
 8005d00:	20000ff0 	.word	0x20000ff0
 8005d04:	20000fd0 	.word	0x20000fd0
 8005d08:	20000af8 	.word	0x20000af8
 8005d0c:	20000f88 	.word	0x20000f88
 8005d10:	20000af4 	.word	0x20000af4
 8005d14:	20000fdc 	.word	0x20000fdc

08005d18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005d20:	4b06      	ldr	r3, [pc, #24]	; (8005d3c <vTaskInternalSetTimeOutState+0x24>)
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005d28:	4b05      	ldr	r3, [pc, #20]	; (8005d40 <vTaskInternalSetTimeOutState+0x28>)
 8005d2a:	681a      	ldr	r2, [r3, #0]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	605a      	str	r2, [r3, #4]
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bc80      	pop	{r7}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000fe0 	.word	0x20000fe0
 8005d40:	20000fcc 	.word	0x20000fcc

08005d44 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d10a      	bne.n	8005d6a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d58:	f383 8811 	msr	BASEPRI, r3
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f3bf 8f4f 	dsb	sy
 8005d64:	613b      	str	r3, [r7, #16]
}
 8005d66:	bf00      	nop
 8005d68:	e7fe      	b.n	8005d68 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d10a      	bne.n	8005d86 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d74:	f383 8811 	msr	BASEPRI, r3
 8005d78:	f3bf 8f6f 	isb	sy
 8005d7c:	f3bf 8f4f 	dsb	sy
 8005d80:	60fb      	str	r3, [r7, #12]
}
 8005d82:	bf00      	nop
 8005d84:	e7fe      	b.n	8005d84 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005d86:	f000 fe09 	bl	800699c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005d8a:	4b1d      	ldr	r3, [pc, #116]	; (8005e00 <xTaskCheckForTimeOut+0xbc>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	69ba      	ldr	r2, [r7, #24]
 8005d96:	1ad3      	subs	r3, r2, r3
 8005d98:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da2:	d102      	bne.n	8005daa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	61fb      	str	r3, [r7, #28]
 8005da8:	e023      	b.n	8005df2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	4b15      	ldr	r3, [pc, #84]	; (8005e04 <xTaskCheckForTimeOut+0xc0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d007      	beq.n	8005dc6 <xTaskCheckForTimeOut+0x82>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	69ba      	ldr	r2, [r7, #24]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d302      	bcc.n	8005dc6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	61fb      	str	r3, [r7, #28]
 8005dc4:	e015      	b.n	8005df2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	697a      	ldr	r2, [r7, #20]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d20b      	bcs.n	8005de8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	1ad2      	subs	r2, r2, r3
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f7ff ff9b 	bl	8005d18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	61fb      	str	r3, [r7, #28]
 8005de6:	e004      	b.n	8005df2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	2200      	movs	r2, #0
 8005dec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005dee:	2301      	movs	r3, #1
 8005df0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005df2:	f000 fe03 	bl	80069fc <vPortExitCritical>

	return xReturn;
 8005df6:	69fb      	ldr	r3, [r7, #28]
}
 8005df8:	4618      	mov	r0, r3
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	20000fcc 	.word	0x20000fcc
 8005e04:	20000fe0 	.word	0x20000fe0

08005e08 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	; (8005e1c <vTaskMissedYield+0x14>)
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
}
 8005e12:	bf00      	nop
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bc80      	pop	{r7}
 8005e18:	4770      	bx	lr
 8005e1a:	bf00      	nop
 8005e1c:	20000fdc 	.word	0x20000fdc

08005e20 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005e28:	f000 f852 	bl	8005ed0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005e2c:	4b06      	ldr	r3, [pc, #24]	; (8005e48 <prvIdleTask+0x28>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d9f9      	bls.n	8005e28 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005e34:	4b05      	ldr	r3, [pc, #20]	; (8005e4c <prvIdleTask+0x2c>)
 8005e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e3a:	601a      	str	r2, [r3, #0]
 8005e3c:	f3bf 8f4f 	dsb	sy
 8005e40:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005e44:	e7f0      	b.n	8005e28 <prvIdleTask+0x8>
 8005e46:	bf00      	nop
 8005e48:	20000af8 	.word	0x20000af8
 8005e4c:	e000ed04 	.word	0xe000ed04

08005e50 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
 8005e5a:	e00c      	b.n	8005e76 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	009b      	lsls	r3, r3, #2
 8005e62:	4413      	add	r3, r2
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <prvInitialiseTaskLists+0x60>)
 8005e68:	4413      	add	r3, r2
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7fe fbe4 	bl	8004638 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	3301      	adds	r3, #1
 8005e74:	607b      	str	r3, [r7, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b37      	cmp	r3, #55	; 0x37
 8005e7a:	d9ef      	bls.n	8005e5c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005e7c:	480d      	ldr	r0, [pc, #52]	; (8005eb4 <prvInitialiseTaskLists+0x64>)
 8005e7e:	f7fe fbdb 	bl	8004638 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005e82:	480d      	ldr	r0, [pc, #52]	; (8005eb8 <prvInitialiseTaskLists+0x68>)
 8005e84:	f7fe fbd8 	bl	8004638 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005e88:	480c      	ldr	r0, [pc, #48]	; (8005ebc <prvInitialiseTaskLists+0x6c>)
 8005e8a:	f7fe fbd5 	bl	8004638 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005e8e:	480c      	ldr	r0, [pc, #48]	; (8005ec0 <prvInitialiseTaskLists+0x70>)
 8005e90:	f7fe fbd2 	bl	8004638 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005e94:	480b      	ldr	r0, [pc, #44]	; (8005ec4 <prvInitialiseTaskLists+0x74>)
 8005e96:	f7fe fbcf 	bl	8004638 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005e9a:	4b0b      	ldr	r3, [pc, #44]	; (8005ec8 <prvInitialiseTaskLists+0x78>)
 8005e9c:	4a05      	ldr	r2, [pc, #20]	; (8005eb4 <prvInitialiseTaskLists+0x64>)
 8005e9e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005ea0:	4b0a      	ldr	r3, [pc, #40]	; (8005ecc <prvInitialiseTaskLists+0x7c>)
 8005ea2:	4a05      	ldr	r2, [pc, #20]	; (8005eb8 <prvInitialiseTaskLists+0x68>)
 8005ea4:	601a      	str	r2, [r3, #0]
}
 8005ea6:	bf00      	nop
 8005ea8:	3708      	adds	r7, #8
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	20000af8 	.word	0x20000af8
 8005eb4:	20000f58 	.word	0x20000f58
 8005eb8:	20000f6c 	.word	0x20000f6c
 8005ebc:	20000f88 	.word	0x20000f88
 8005ec0:	20000f9c 	.word	0x20000f9c
 8005ec4:	20000fb4 	.word	0x20000fb4
 8005ec8:	20000f80 	.word	0x20000f80
 8005ecc:	20000f84 	.word	0x20000f84

08005ed0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005ed6:	e019      	b.n	8005f0c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005ed8:	f000 fd60 	bl	800699c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005edc:	4b10      	ldr	r3, [pc, #64]	; (8005f20 <prvCheckTasksWaitingTermination+0x50>)
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	68db      	ldr	r3, [r3, #12]
 8005ee2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	3304      	adds	r3, #4
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7fe fc2b 	bl	8004744 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005eee:	4b0d      	ldr	r3, [pc, #52]	; (8005f24 <prvCheckTasksWaitingTermination+0x54>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	4a0b      	ldr	r2, [pc, #44]	; (8005f24 <prvCheckTasksWaitingTermination+0x54>)
 8005ef6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005ef8:	4b0b      	ldr	r3, [pc, #44]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	3b01      	subs	r3, #1
 8005efe:	4a0a      	ldr	r2, [pc, #40]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005f00:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005f02:	f000 fd7b 	bl	80069fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f810 	bl	8005f2c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005f0c:	4b06      	ldr	r3, [pc, #24]	; (8005f28 <prvCheckTasksWaitingTermination+0x58>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d1e1      	bne.n	8005ed8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005f14:	bf00      	nop
 8005f16:	bf00      	nop
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20000f9c 	.word	0x20000f9c
 8005f24:	20000fc8 	.word	0x20000fc8
 8005f28:	20000fb0 	.word	0x20000fb0

08005f2c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	3354      	adds	r3, #84	; 0x54
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f001 fe43 	bl	8007bc4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d108      	bne.n	8005f5a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 fee9 	bl	8006d24 <vPortFree>
				vPortFree( pxTCB );
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 fee6 	bl	8006d24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005f58:	e018      	b.n	8005f8c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d103      	bne.n	8005f6c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005f64:	6878      	ldr	r0, [r7, #4]
 8005f66:	f000 fedd 	bl	8006d24 <vPortFree>
	}
 8005f6a:	e00f      	b.n	8005f8c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d00a      	beq.n	8005f8c <prvDeleteTCB+0x60>
	__asm volatile
 8005f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7a:	f383 8811 	msr	BASEPRI, r3
 8005f7e:	f3bf 8f6f 	isb	sy
 8005f82:	f3bf 8f4f 	dsb	sy
 8005f86:	60fb      	str	r3, [r7, #12]
}
 8005f88:	bf00      	nop
 8005f8a:	e7fe      	b.n	8005f8a <prvDeleteTCB+0x5e>
	}
 8005f8c:	bf00      	nop
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f9a:	4b0e      	ldr	r3, [pc, #56]	; (8005fd4 <prvResetNextTaskUnblockTime+0x40>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <prvResetNextTaskUnblockTime+0x14>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <prvResetNextTaskUnblockTime+0x16>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d004      	beq.n	8005fb8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005fae:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <prvResetNextTaskUnblockTime+0x44>)
 8005fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005fb4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005fb6:	e008      	b.n	8005fca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005fb8:	4b06      	ldr	r3, [pc, #24]	; (8005fd4 <prvResetNextTaskUnblockTime+0x40>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	4a04      	ldr	r2, [pc, #16]	; (8005fd8 <prvResetNextTaskUnblockTime+0x44>)
 8005fc8:	6013      	str	r3, [r2, #0]
}
 8005fca:	bf00      	nop
 8005fcc:	370c      	adds	r7, #12
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bc80      	pop	{r7}
 8005fd2:	4770      	bx	lr
 8005fd4:	20000f80 	.word	0x20000f80
 8005fd8:	20000fe8 	.word	0x20000fe8

08005fdc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005fdc:	b480      	push	{r7}
 8005fde:	b083      	sub	sp, #12
 8005fe0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005fe2:	4b0b      	ldr	r3, [pc, #44]	; (8006010 <xTaskGetSchedulerState+0x34>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d102      	bne.n	8005ff0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005fea:	2301      	movs	r3, #1
 8005fec:	607b      	str	r3, [r7, #4]
 8005fee:	e008      	b.n	8006002 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff0:	4b08      	ldr	r3, [pc, #32]	; (8006014 <xTaskGetSchedulerState+0x38>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d102      	bne.n	8005ffe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	607b      	str	r3, [r7, #4]
 8005ffc:	e001      	b.n	8006002 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005ffe:	2300      	movs	r3, #0
 8006000:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006002:	687b      	ldr	r3, [r7, #4]
	}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	bc80      	pop	{r7}
 800600c:	4770      	bx	lr
 800600e:	bf00      	nop
 8006010:	20000fd4 	.word	0x20000fd4
 8006014:	20000ff0 	.word	0x20000ff0

08006018 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006024:	2300      	movs	r3, #0
 8006026:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d056      	beq.n	80060dc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800602e:	4b2e      	ldr	r3, [pc, #184]	; (80060e8 <xTaskPriorityDisinherit+0xd0>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	429a      	cmp	r2, r3
 8006036:	d00a      	beq.n	800604e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	60fb      	str	r3, [r7, #12]
}
 800604a:	bf00      	nop
 800604c:	e7fe      	b.n	800604c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006052:	2b00      	cmp	r3, #0
 8006054:	d10a      	bne.n	800606c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605a:	f383 8811 	msr	BASEPRI, r3
 800605e:	f3bf 8f6f 	isb	sy
 8006062:	f3bf 8f4f 	dsb	sy
 8006066:	60bb      	str	r3, [r7, #8]
}
 8006068:	bf00      	nop
 800606a:	e7fe      	b.n	800606a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006070:	1e5a      	subs	r2, r3, #1
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006076:	693b      	ldr	r3, [r7, #16]
 8006078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800607e:	429a      	cmp	r2, r3
 8006080:	d02c      	beq.n	80060dc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006086:	2b00      	cmp	r3, #0
 8006088:	d128      	bne.n	80060dc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	3304      	adds	r3, #4
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe fb58 	bl	8004744 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006098:	693b      	ldr	r3, [r7, #16]
 800609a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <xTaskPriorityDisinherit+0xd4>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	429a      	cmp	r2, r3
 80060b2:	d903      	bls.n	80060bc <xTaskPriorityDisinherit+0xa4>
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	4a0c      	ldr	r2, [pc, #48]	; (80060ec <xTaskPriorityDisinherit+0xd4>)
 80060ba:	6013      	str	r3, [r2, #0]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	4613      	mov	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4a09      	ldr	r2, [pc, #36]	; (80060f0 <xTaskPriorityDisinherit+0xd8>)
 80060ca:	441a      	add	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	4610      	mov	r0, r2
 80060d4:	f7fe fadb 	bl	800468e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80060d8:	2301      	movs	r3, #1
 80060da:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80060dc:	697b      	ldr	r3, [r7, #20]
	}
 80060de:	4618      	mov	r0, r3
 80060e0:	3718      	adds	r7, #24
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}
 80060e6:	bf00      	nop
 80060e8:	20000af4 	.word	0x20000af4
 80060ec:	20000fd0 	.word	0x20000fd0
 80060f0:	20000af8 	.word	0x20000af8

080060f4 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b084      	sub	sp, #16
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
 80060fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80060fe:	4b21      	ldr	r3, [pc, #132]	; (8006184 <prvAddCurrentTaskToDelayedList+0x90>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006104:	4b20      	ldr	r3, [pc, #128]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	3304      	adds	r3, #4
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe fb1a 	bl	8004744 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d10a      	bne.n	800612e <prvAddCurrentTaskToDelayedList+0x3a>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d007      	beq.n	800612e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800611e:	4b1a      	ldr	r3, [pc, #104]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	3304      	adds	r3, #4
 8006124:	4619      	mov	r1, r3
 8006126:	4819      	ldr	r0, [pc, #100]	; (800618c <prvAddCurrentTaskToDelayedList+0x98>)
 8006128:	f7fe fab1 	bl	800468e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800612c:	e026      	b.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4413      	add	r3, r2
 8006134:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006136:	4b14      	ldr	r3, [pc, #80]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	429a      	cmp	r2, r3
 8006144:	d209      	bcs.n	800615a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006146:	4b12      	ldr	r3, [pc, #72]	; (8006190 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	4b0f      	ldr	r3, [pc, #60]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f7fe fabe 	bl	80046d4 <vListInsert>
}
 8006158:	e010      	b.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800615a:	4b0e      	ldr	r3, [pc, #56]	; (8006194 <prvAddCurrentTaskToDelayedList+0xa0>)
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	4b0a      	ldr	r3, [pc, #40]	; (8006188 <prvAddCurrentTaskToDelayedList+0x94>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	3304      	adds	r3, #4
 8006164:	4619      	mov	r1, r3
 8006166:	4610      	mov	r0, r2
 8006168:	f7fe fab4 	bl	80046d4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <prvAddCurrentTaskToDelayedList+0xa4>)
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	68ba      	ldr	r2, [r7, #8]
 8006172:	429a      	cmp	r2, r3
 8006174:	d202      	bcs.n	800617c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006176:	4a08      	ldr	r2, [pc, #32]	; (8006198 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	6013      	str	r3, [r2, #0]
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	20000fcc 	.word	0x20000fcc
 8006188:	20000af4 	.word	0x20000af4
 800618c:	20000fb4 	.word	0x20000fb4
 8006190:	20000f84 	.word	0x20000f84
 8006194:	20000f80 	.word	0x20000f80
 8006198:	20000fe8 	.word	0x20000fe8

0800619c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b08a      	sub	sp, #40	; 0x28
 80061a0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80061a2:	2300      	movs	r3, #0
 80061a4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80061a6:	f000 facb 	bl	8006740 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80061aa:	4b1c      	ldr	r3, [pc, #112]	; (800621c <xTimerCreateTimerTask+0x80>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d021      	beq.n	80061f6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80061ba:	1d3a      	adds	r2, r7, #4
 80061bc:	f107 0108 	add.w	r1, r7, #8
 80061c0:	f107 030c 	add.w	r3, r7, #12
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7fe fa1d 	bl	8004604 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80061ca:	6879      	ldr	r1, [r7, #4]
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	9202      	str	r2, [sp, #8]
 80061d2:	9301      	str	r3, [sp, #4]
 80061d4:	2302      	movs	r3, #2
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	2300      	movs	r3, #0
 80061da:	460a      	mov	r2, r1
 80061dc:	4910      	ldr	r1, [pc, #64]	; (8006220 <xTimerCreateTimerTask+0x84>)
 80061de:	4811      	ldr	r0, [pc, #68]	; (8006224 <xTimerCreateTimerTask+0x88>)
 80061e0:	f7ff f8b6 	bl	8005350 <xTaskCreateStatic>
 80061e4:	4603      	mov	r3, r0
 80061e6:	4a10      	ldr	r2, [pc, #64]	; (8006228 <xTimerCreateTimerTask+0x8c>)
 80061e8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <xTimerCreateTimerTask+0x8c>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d001      	beq.n	80061f6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80061f2:	2301      	movs	r3, #1
 80061f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d10a      	bne.n	8006212 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80061fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006200:	f383 8811 	msr	BASEPRI, r3
 8006204:	f3bf 8f6f 	isb	sy
 8006208:	f3bf 8f4f 	dsb	sy
 800620c:	613b      	str	r3, [r7, #16]
}
 800620e:	bf00      	nop
 8006210:	e7fe      	b.n	8006210 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006212:	697b      	ldr	r3, [r7, #20]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}
 800621c:	20001024 	.word	0x20001024
 8006220:	08009b18 	.word	0x08009b18
 8006224:	08006349 	.word	0x08006349
 8006228:	20001028 	.word	0x20001028

0800622c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b08a      	sub	sp, #40	; 0x28
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
 8006238:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800623a:	2300      	movs	r3, #0
 800623c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10a      	bne.n	800625a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006248:	f383 8811 	msr	BASEPRI, r3
 800624c:	f3bf 8f6f 	isb	sy
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	623b      	str	r3, [r7, #32]
}
 8006256:	bf00      	nop
 8006258:	e7fe      	b.n	8006258 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800625a:	4b1a      	ldr	r3, [pc, #104]	; (80062c4 <xTimerGenericCommand+0x98>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d02a      	beq.n	80062b8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b05      	cmp	r3, #5
 8006272:	dc18      	bgt.n	80062a6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006274:	f7ff feb2 	bl	8005fdc <xTaskGetSchedulerState>
 8006278:	4603      	mov	r3, r0
 800627a:	2b02      	cmp	r3, #2
 800627c:	d109      	bne.n	8006292 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800627e:	4b11      	ldr	r3, [pc, #68]	; (80062c4 <xTimerGenericCommand+0x98>)
 8006280:	6818      	ldr	r0, [r3, #0]
 8006282:	f107 0110 	add.w	r1, r7, #16
 8006286:	2300      	movs	r3, #0
 8006288:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800628a:	f7fe fbc5 	bl	8004a18 <xQueueGenericSend>
 800628e:	6278      	str	r0, [r7, #36]	; 0x24
 8006290:	e012      	b.n	80062b8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006292:	4b0c      	ldr	r3, [pc, #48]	; (80062c4 <xTimerGenericCommand+0x98>)
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	f107 0110 	add.w	r1, r7, #16
 800629a:	2300      	movs	r3, #0
 800629c:	2200      	movs	r2, #0
 800629e:	f7fe fbbb 	bl	8004a18 <xQueueGenericSend>
 80062a2:	6278      	str	r0, [r7, #36]	; 0x24
 80062a4:	e008      	b.n	80062b8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80062a6:	4b07      	ldr	r3, [pc, #28]	; (80062c4 <xTimerGenericCommand+0x98>)
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f107 0110 	add.w	r1, r7, #16
 80062ae:	2300      	movs	r3, #0
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	f7fe fcaf 	bl	8004c14 <xQueueGenericSendFromISR>
 80062b6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80062b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3728      	adds	r7, #40	; 0x28
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
 80062c2:	bf00      	nop
 80062c4:	20001024 	.word	0x20001024

080062c8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b088      	sub	sp, #32
 80062cc:	af02      	add	r7, sp, #8
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <prvProcessExpiredTimer+0x7c>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062dc:	697b      	ldr	r3, [r7, #20]
 80062de:	3304      	adds	r3, #4
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7fe fa2f 	bl	8004744 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d122      	bne.n	8006334 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	18d1      	adds	r1, r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	683a      	ldr	r2, [r7, #0]
 80062fa:	6978      	ldr	r0, [r7, #20]
 80062fc:	f000 f8c8 	bl	8006490 <prvInsertTimerInActiveList>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d016      	beq.n	8006334 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006306:	2300      	movs	r3, #0
 8006308:	9300      	str	r3, [sp, #0]
 800630a:	2300      	movs	r3, #0
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	2100      	movs	r1, #0
 8006310:	6978      	ldr	r0, [r7, #20]
 8006312:	f7ff ff8b 	bl	800622c <xTimerGenericCommand>
 8006316:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10a      	bne.n	8006334 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	60fb      	str	r3, [r7, #12]
}
 8006330:	bf00      	nop
 8006332:	e7fe      	b.n	8006332 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006338:	6978      	ldr	r0, [r7, #20]
 800633a:	4798      	blx	r3
}
 800633c:	bf00      	nop
 800633e:	3718      	adds	r7, #24
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	2000101c 	.word	0x2000101c

08006348 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b084      	sub	sp, #16
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006350:	f107 0308 	add.w	r3, r7, #8
 8006354:	4618      	mov	r0, r3
 8006356:	f000 f857 	bl	8006408 <prvGetNextExpireTime>
 800635a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	4619      	mov	r1, r3
 8006360:	68f8      	ldr	r0, [r7, #12]
 8006362:	f000 f803 	bl	800636c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006366:	f000 f8d5 	bl	8006514 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800636a:	e7f1      	b.n	8006350 <prvTimerTask+0x8>

0800636c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006376:	f7ff fa3f 	bl	80057f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800637a:	f107 0308 	add.w	r3, r7, #8
 800637e:	4618      	mov	r0, r3
 8006380:	f000 f866 	bl	8006450 <prvSampleTimeNow>
 8006384:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d130      	bne.n	80063ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10a      	bne.n	80063a8 <prvProcessTimerOrBlockTask+0x3c>
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	429a      	cmp	r2, r3
 8006398:	d806      	bhi.n	80063a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800639a:	f7ff fa3b 	bl	8005814 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f7ff ff91 	bl	80062c8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80063a6:	e024      	b.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d008      	beq.n	80063c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80063ae:	4b13      	ldr	r3, [pc, #76]	; (80063fc <prvProcessTimerOrBlockTask+0x90>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80063c0:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <prvProcessTimerOrBlockTask+0x94>)
 80063c2:	6818      	ldr	r0, [r3, #0]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	1ad3      	subs	r3, r2, r3
 80063ca:	683a      	ldr	r2, [r7, #0]
 80063cc:	4619      	mov	r1, r3
 80063ce:	f7fe ff8b 	bl	80052e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80063d2:	f7ff fa1f 	bl	8005814 <xTaskResumeAll>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10a      	bne.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80063dc:	4b09      	ldr	r3, [pc, #36]	; (8006404 <prvProcessTimerOrBlockTask+0x98>)
 80063de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063e2:	601a      	str	r2, [r3, #0]
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	f3bf 8f6f 	isb	sy
}
 80063ec:	e001      	b.n	80063f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80063ee:	f7ff fa11 	bl	8005814 <xTaskResumeAll>
}
 80063f2:	bf00      	nop
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	20001020 	.word	0x20001020
 8006400:	20001024 	.word	0x20001024
 8006404:	e000ed04 	.word	0xe000ed04

08006408 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006410:	4b0e      	ldr	r3, [pc, #56]	; (800644c <prvGetNextExpireTime+0x44>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	2b00      	cmp	r3, #0
 8006418:	bf0c      	ite	eq
 800641a:	2301      	moveq	r3, #1
 800641c:	2300      	movne	r3, #0
 800641e:	b2db      	uxtb	r3, r3
 8006420:	461a      	mov	r2, r3
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d105      	bne.n	800643a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800642e:	4b07      	ldr	r3, [pc, #28]	; (800644c <prvGetNextExpireTime+0x44>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e001      	b.n	800643e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800643e:	68fb      	ldr	r3, [r7, #12]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3714      	adds	r7, #20
 8006444:	46bd      	mov	sp, r7
 8006446:	bc80      	pop	{r7}
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	2000101c 	.word	0x2000101c

08006450 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006458:	f7ff fa7a 	bl	8005950 <xTaskGetTickCount>
 800645c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800645e:	4b0b      	ldr	r3, [pc, #44]	; (800648c <prvSampleTimeNow+0x3c>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68fa      	ldr	r2, [r7, #12]
 8006464:	429a      	cmp	r2, r3
 8006466:	d205      	bcs.n	8006474 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006468:	f000 f908 	bl	800667c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
 8006472:	e002      	b.n	800647a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800647a:	4a04      	ldr	r2, [pc, #16]	; (800648c <prvSampleTimeNow+0x3c>)
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006480:	68fb      	ldr	r3, [r7, #12]
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	2000102c 	.word	0x2000102c

08006490 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b086      	sub	sp, #24
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
 800649c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800649e:	2300      	movs	r3, #0
 80064a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	68fa      	ldr	r2, [r7, #12]
 80064ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d812      	bhi.n	80064dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b6:	687a      	ldr	r2, [r7, #4]
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	1ad2      	subs	r2, r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	699b      	ldr	r3, [r3, #24]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d302      	bcc.n	80064ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80064c4:	2301      	movs	r3, #1
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	e01b      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80064ca:	4b10      	ldr	r3, [pc, #64]	; (800650c <prvInsertTimerInActiveList+0x7c>)
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	3304      	adds	r3, #4
 80064d2:	4619      	mov	r1, r3
 80064d4:	4610      	mov	r0, r2
 80064d6:	f7fe f8fd 	bl	80046d4 <vListInsert>
 80064da:	e012      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80064dc:	687a      	ldr	r2, [r7, #4]
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d206      	bcs.n	80064f2 <prvInsertTimerInActiveList+0x62>
 80064e4:	68ba      	ldr	r2, [r7, #8]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d302      	bcc.n	80064f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80064ec:	2301      	movs	r3, #1
 80064ee:	617b      	str	r3, [r7, #20]
 80064f0:	e007      	b.n	8006502 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064f2:	4b07      	ldr	r3, [pc, #28]	; (8006510 <prvInsertTimerInActiveList+0x80>)
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	3304      	adds	r3, #4
 80064fa:	4619      	mov	r1, r3
 80064fc:	4610      	mov	r0, r2
 80064fe:	f7fe f8e9 	bl	80046d4 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006502:	697b      	ldr	r3, [r7, #20]
}
 8006504:	4618      	mov	r0, r3
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}
 800650c:	20001020 	.word	0x20001020
 8006510:	2000101c 	.word	0x2000101c

08006514 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b08e      	sub	sp, #56	; 0x38
 8006518:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800651a:	e09d      	b.n	8006658 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2b00      	cmp	r3, #0
 8006520:	da18      	bge.n	8006554 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006522:	1d3b      	adds	r3, r7, #4
 8006524:	3304      	adds	r3, #4
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800652a:	2b00      	cmp	r3, #0
 800652c:	d10a      	bne.n	8006544 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800652e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006532:	f383 8811 	msr	BASEPRI, r3
 8006536:	f3bf 8f6f 	isb	sy
 800653a:	f3bf 8f4f 	dsb	sy
 800653e:	61fb      	str	r3, [r7, #28]
}
 8006540:	bf00      	nop
 8006542:	e7fe      	b.n	8006542 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800654a:	6850      	ldr	r0, [r2, #4]
 800654c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800654e:	6892      	ldr	r2, [r2, #8]
 8006550:	4611      	mov	r1, r2
 8006552:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	db7d      	blt.n	8006656 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d004      	beq.n	8006570 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	3304      	adds	r3, #4
 800656a:	4618      	mov	r0, r3
 800656c:	f7fe f8ea 	bl	8004744 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006570:	463b      	mov	r3, r7
 8006572:	4618      	mov	r0, r3
 8006574:	f7ff ff6c 	bl	8006450 <prvSampleTimeNow>
 8006578:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2b09      	cmp	r3, #9
 800657e:	d86b      	bhi.n	8006658 <prvProcessReceivedCommands+0x144>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <prvProcessReceivedCommands+0x74>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065b1 	.word	0x080065b1
 800658c:	080065b1 	.word	0x080065b1
 8006590:	080065b1 	.word	0x080065b1
 8006594:	08006659 	.word	0x08006659
 8006598:	0800660d 	.word	0x0800660d
 800659c:	08006645 	.word	0x08006645
 80065a0:	080065b1 	.word	0x080065b1
 80065a4:	080065b1 	.word	0x080065b1
 80065a8:	08006659 	.word	0x08006659
 80065ac:	0800660d 	.word	0x0800660d
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	18d1      	adds	r1, r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065be:	f7ff ff67 	bl	8006490 <prvInsertTimerInActiveList>
 80065c2:	4603      	mov	r3, r0
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d047      	beq.n	8006658 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ce:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80065d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d2:	69db      	ldr	r3, [r3, #28]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d13f      	bne.n	8006658 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80065d8:	68ba      	ldr	r2, [r7, #8]
 80065da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	441a      	add	r2, r3
 80065e0:	2300      	movs	r3, #0
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	2300      	movs	r3, #0
 80065e6:	2100      	movs	r1, #0
 80065e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065ea:	f7ff fe1f 	bl	800622c <xTimerGenericCommand>
 80065ee:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80065f0:	6a3b      	ldr	r3, [r7, #32]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d130      	bne.n	8006658 <prvProcessReceivedCommands+0x144>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	61bb      	str	r3, [r7, #24]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800660c:	68ba      	ldr	r2, [r7, #8]
 800660e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006610:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d10a      	bne.n	8006630 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 800661a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661e:	f383 8811 	msr	BASEPRI, r3
 8006622:	f3bf 8f6f 	isb	sy
 8006626:	f3bf 8f4f 	dsb	sy
 800662a:	617b      	str	r3, [r7, #20]
}
 800662c:	bf00      	nop
 800662e:	e7fe      	b.n	800662e <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006632:	699a      	ldr	r2, [r3, #24]
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	18d1      	adds	r1, r2, r3
 8006638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800663c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800663e:	f7ff ff27 	bl	8006490 <prvInsertTimerInActiveList>
					break;
 8006642:	e009      	b.n	8006658 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8006644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006646:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800664a:	2b00      	cmp	r3, #0
 800664c:	d104      	bne.n	8006658 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 800664e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006650:	f000 fb68 	bl	8006d24 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006654:	e000      	b.n	8006658 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006656:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006658:	4b07      	ldr	r3, [pc, #28]	; (8006678 <prvProcessReceivedCommands+0x164>)
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	1d39      	adds	r1, r7, #4
 800665e:	2200      	movs	r2, #0
 8006660:	4618      	mov	r0, r3
 8006662:	f7fe fb6f 	bl	8004d44 <xQueueReceive>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f af57 	bne.w	800651c <prvProcessReceivedCommands+0x8>
	}
}
 800666e:	bf00      	nop
 8006670:	bf00      	nop
 8006672:	3730      	adds	r7, #48	; 0x30
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}
 8006678:	20001024 	.word	0x20001024

0800667c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b088      	sub	sp, #32
 8006680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006682:	e045      	b.n	8006710 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006684:	4b2c      	ldr	r3, [pc, #176]	; (8006738 <prvSwitchTimerLists+0xbc>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	68db      	ldr	r3, [r3, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800668e:	4b2a      	ldr	r3, [pc, #168]	; (8006738 <prvSwitchTimerLists+0xbc>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3304      	adds	r3, #4
 800669c:	4618      	mov	r0, r3
 800669e:	f7fe f851 	bl	8004744 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d12e      	bne.n	8006710 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	4413      	add	r3, r2
 80066ba:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d90e      	bls.n	80066e2 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80066d0:	4b19      	ldr	r3, [pc, #100]	; (8006738 <prvSwitchTimerLists+0xbc>)
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	3304      	adds	r3, #4
 80066d8:	4619      	mov	r1, r3
 80066da:	4610      	mov	r0, r2
 80066dc:	f7fd fffa 	bl	80046d4 <vListInsert>
 80066e0:	e016      	b.n	8006710 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80066e2:	2300      	movs	r3, #0
 80066e4:	9300      	str	r3, [sp, #0]
 80066e6:	2300      	movs	r3, #0
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	2100      	movs	r1, #0
 80066ec:	68f8      	ldr	r0, [r7, #12]
 80066ee:	f7ff fd9d 	bl	800622c <xTimerGenericCommand>
 80066f2:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d10a      	bne.n	8006710 <prvSwitchTimerLists+0x94>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	603b      	str	r3, [r7, #0]
}
 800670c:	bf00      	nop
 800670e:	e7fe      	b.n	800670e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006710:	4b09      	ldr	r3, [pc, #36]	; (8006738 <prvSwitchTimerLists+0xbc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d1b4      	bne.n	8006684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800671a:	4b07      	ldr	r3, [pc, #28]	; (8006738 <prvSwitchTimerLists+0xbc>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <prvSwitchTimerLists+0xc0>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a04      	ldr	r2, [pc, #16]	; (8006738 <prvSwitchTimerLists+0xbc>)
 8006726:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006728:	4a04      	ldr	r2, [pc, #16]	; (800673c <prvSwitchTimerLists+0xc0>)
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	6013      	str	r3, [r2, #0]
}
 800672e:	bf00      	nop
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	2000101c 	.word	0x2000101c
 800673c:	20001020 	.word	0x20001020

08006740 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006746:	f000 f929 	bl	800699c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800674a:	4b15      	ldr	r3, [pc, #84]	; (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d120      	bne.n	8006794 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006752:	4814      	ldr	r0, [pc, #80]	; (80067a4 <prvCheckForValidListAndQueue+0x64>)
 8006754:	f7fd ff70 	bl	8004638 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006758:	4813      	ldr	r0, [pc, #76]	; (80067a8 <prvCheckForValidListAndQueue+0x68>)
 800675a:	f7fd ff6d 	bl	8004638 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800675e:	4b13      	ldr	r3, [pc, #76]	; (80067ac <prvCheckForValidListAndQueue+0x6c>)
 8006760:	4a10      	ldr	r2, [pc, #64]	; (80067a4 <prvCheckForValidListAndQueue+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006764:	4b12      	ldr	r3, [pc, #72]	; (80067b0 <prvCheckForValidListAndQueue+0x70>)
 8006766:	4a10      	ldr	r2, [pc, #64]	; (80067a8 <prvCheckForValidListAndQueue+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800676a:	2300      	movs	r3, #0
 800676c:	9300      	str	r3, [sp, #0]
 800676e:	4b11      	ldr	r3, [pc, #68]	; (80067b4 <prvCheckForValidListAndQueue+0x74>)
 8006770:	4a11      	ldr	r2, [pc, #68]	; (80067b8 <prvCheckForValidListAndQueue+0x78>)
 8006772:	2110      	movs	r1, #16
 8006774:	200a      	movs	r0, #10
 8006776:	f7fe f877 	bl	8004868 <xQueueGenericCreateStatic>
 800677a:	4603      	mov	r3, r0
 800677c:	4a08      	ldr	r2, [pc, #32]	; (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800677e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006780:	4b07      	ldr	r3, [pc, #28]	; (80067a0 <prvCheckForValidListAndQueue+0x60>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d005      	beq.n	8006794 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006788:	4b05      	ldr	r3, [pc, #20]	; (80067a0 <prvCheckForValidListAndQueue+0x60>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	490b      	ldr	r1, [pc, #44]	; (80067bc <prvCheckForValidListAndQueue+0x7c>)
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe fd82 	bl	8005298 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006794:	f000 f932 	bl	80069fc <vPortExitCritical>
}
 8006798:	bf00      	nop
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}
 800679e:	bf00      	nop
 80067a0:	20001024 	.word	0x20001024
 80067a4:	20000ff4 	.word	0x20000ff4
 80067a8:	20001008 	.word	0x20001008
 80067ac:	2000101c 	.word	0x2000101c
 80067b0:	20001020 	.word	0x20001020
 80067b4:	200010d0 	.word	0x200010d0
 80067b8:	20001030 	.word	0x20001030
 80067bc:	08009b20 	.word	0x08009b20

080067c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	60f8      	str	r0, [r7, #12]
 80067c8:	60b9      	str	r1, [r7, #8]
 80067ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	3b04      	subs	r3, #4
 80067d0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80067d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	3b04      	subs	r3, #4
 80067de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	f023 0201 	bic.w	r2, r3, #1
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	3b04      	subs	r3, #4
 80067ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80067f0:	4a08      	ldr	r2, [pc, #32]	; (8006814 <pxPortInitialiseStack+0x54>)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3b14      	subs	r3, #20
 80067fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80067fc:	687a      	ldr	r2, [r7, #4]
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	3b20      	subs	r3, #32
 8006806:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006808:	68fb      	ldr	r3, [r7, #12]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3714      	adds	r7, #20
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr
 8006814:	08006819 	.word	0x08006819

08006818 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006818:	b480      	push	{r7}
 800681a:	b085      	sub	sp, #20
 800681c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800681e:	2300      	movs	r3, #0
 8006820:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006822:	4b12      	ldr	r3, [pc, #72]	; (800686c <prvTaskExitError+0x54>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f1b3 3fff 	cmp.w	r3, #4294967295
 800682a:	d00a      	beq.n	8006842 <prvTaskExitError+0x2a>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	60fb      	str	r3, [r7, #12]
}
 800683e:	bf00      	nop
 8006840:	e7fe      	b.n	8006840 <prvTaskExitError+0x28>
	__asm volatile
 8006842:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006846:	f383 8811 	msr	BASEPRI, r3
 800684a:	f3bf 8f6f 	isb	sy
 800684e:	f3bf 8f4f 	dsb	sy
 8006852:	60bb      	str	r3, [r7, #8]
}
 8006854:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006856:	bf00      	nop
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d0fc      	beq.n	8006858 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800685e:	bf00      	nop
 8006860:	bf00      	nop
 8006862:	3714      	adds	r7, #20
 8006864:	46bd      	mov	sp, r7
 8006866:	bc80      	pop	{r7}
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop
 800686c:	2000000c 	.word	0x2000000c

08006870 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006870:	4b07      	ldr	r3, [pc, #28]	; (8006890 <pxCurrentTCBConst2>)
 8006872:	6819      	ldr	r1, [r3, #0]
 8006874:	6808      	ldr	r0, [r1, #0]
 8006876:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800687a:	f380 8809 	msr	PSP, r0
 800687e:	f3bf 8f6f 	isb	sy
 8006882:	f04f 0000 	mov.w	r0, #0
 8006886:	f380 8811 	msr	BASEPRI, r0
 800688a:	f04e 0e0d 	orr.w	lr, lr, #13
 800688e:	4770      	bx	lr

08006890 <pxCurrentTCBConst2>:
 8006890:	20000af4 	.word	0x20000af4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop

08006898 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006898:	4806      	ldr	r0, [pc, #24]	; (80068b4 <prvPortStartFirstTask+0x1c>)
 800689a:	6800      	ldr	r0, [r0, #0]
 800689c:	6800      	ldr	r0, [r0, #0]
 800689e:	f380 8808 	msr	MSP, r0
 80068a2:	b662      	cpsie	i
 80068a4:	b661      	cpsie	f
 80068a6:	f3bf 8f4f 	dsb	sy
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	df00      	svc	0
 80068b0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80068b2:	bf00      	nop
 80068b4:	e000ed08 	.word	0xe000ed08

080068b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068be:	4b32      	ldr	r3, [pc, #200]	; (8006988 <xPortStartScheduler+0xd0>)
 80068c0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068d8:	78fb      	ldrb	r3, [r7, #3]
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b2a      	ldr	r3, [pc, #168]	; (800698c <xPortStartScheduler+0xd4>)
 80068e4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068e6:	4b2a      	ldr	r3, [pc, #168]	; (8006990 <xPortStartScheduler+0xd8>)
 80068e8:	2207      	movs	r2, #7
 80068ea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ec:	e009      	b.n	8006902 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80068ee:	4b28      	ldr	r3, [pc, #160]	; (8006990 <xPortStartScheduler+0xd8>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	3b01      	subs	r3, #1
 80068f4:	4a26      	ldr	r2, [pc, #152]	; (8006990 <xPortStartScheduler+0xd8>)
 80068f6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	b2db      	uxtb	r3, r3
 80068fc:	005b      	lsls	r3, r3, #1
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006902:	78fb      	ldrb	r3, [r7, #3]
 8006904:	b2db      	uxtb	r3, r3
 8006906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690a:	2b80      	cmp	r3, #128	; 0x80
 800690c:	d0ef      	beq.n	80068ee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800690e:	4b20      	ldr	r3, [pc, #128]	; (8006990 <xPortStartScheduler+0xd8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f1c3 0307 	rsb	r3, r3, #7
 8006916:	2b04      	cmp	r3, #4
 8006918:	d00a      	beq.n	8006930 <xPortStartScheduler+0x78>
	__asm volatile
 800691a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691e:	f383 8811 	msr	BASEPRI, r3
 8006922:	f3bf 8f6f 	isb	sy
 8006926:	f3bf 8f4f 	dsb	sy
 800692a:	60bb      	str	r3, [r7, #8]
}
 800692c:	bf00      	nop
 800692e:	e7fe      	b.n	800692e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006930:	4b17      	ldr	r3, [pc, #92]	; (8006990 <xPortStartScheduler+0xd8>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	021b      	lsls	r3, r3, #8
 8006936:	4a16      	ldr	r2, [pc, #88]	; (8006990 <xPortStartScheduler+0xd8>)
 8006938:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800693a:	4b15      	ldr	r3, [pc, #84]	; (8006990 <xPortStartScheduler+0xd8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006942:	4a13      	ldr	r2, [pc, #76]	; (8006990 <xPortStartScheduler+0xd8>)
 8006944:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	b2da      	uxtb	r2, r3
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800694e:	4b11      	ldr	r3, [pc, #68]	; (8006994 <xPortStartScheduler+0xdc>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a10      	ldr	r2, [pc, #64]	; (8006994 <xPortStartScheduler+0xdc>)
 8006954:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006958:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800695a:	4b0e      	ldr	r3, [pc, #56]	; (8006994 <xPortStartScheduler+0xdc>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a0d      	ldr	r2, [pc, #52]	; (8006994 <xPortStartScheduler+0xdc>)
 8006960:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006964:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006966:	f000 f8b9 	bl	8006adc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800696a:	4b0b      	ldr	r3, [pc, #44]	; (8006998 <xPortStartScheduler+0xe0>)
 800696c:	2200      	movs	r2, #0
 800696e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006970:	f7ff ff92 	bl	8006898 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006974:	f7ff f8b8 	bl	8005ae8 <vTaskSwitchContext>
	prvTaskExitError();
 8006978:	f7ff ff4e 	bl	8006818 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3710      	adds	r7, #16
 8006982:	46bd      	mov	sp, r7
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	e000e400 	.word	0xe000e400
 800698c:	20001120 	.word	0x20001120
 8006990:	20001124 	.word	0x20001124
 8006994:	e000ed20 	.word	0xe000ed20
 8006998:	2000000c 	.word	0x2000000c

0800699c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800699c:	b480      	push	{r7}
 800699e:	b083      	sub	sp, #12
 80069a0:	af00      	add	r7, sp, #0
	__asm volatile
 80069a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069a6:	f383 8811 	msr	BASEPRI, r3
 80069aa:	f3bf 8f6f 	isb	sy
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	607b      	str	r3, [r7, #4]
}
 80069b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069b6:	4b0f      	ldr	r3, [pc, #60]	; (80069f4 <vPortEnterCritical+0x58>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	3301      	adds	r3, #1
 80069bc:	4a0d      	ldr	r2, [pc, #52]	; (80069f4 <vPortEnterCritical+0x58>)
 80069be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069c0:	4b0c      	ldr	r3, [pc, #48]	; (80069f4 <vPortEnterCritical+0x58>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d10f      	bne.n	80069e8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069c8:	4b0b      	ldr	r3, [pc, #44]	; (80069f8 <vPortEnterCritical+0x5c>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d00a      	beq.n	80069e8 <vPortEnterCritical+0x4c>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	603b      	str	r3, [r7, #0]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <vPortEnterCritical+0x4a>
	}
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bc80      	pop	{r7}
 80069f0:	4770      	bx	lr
 80069f2:	bf00      	nop
 80069f4:	2000000c 	.word	0x2000000c
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069fc:	b480      	push	{r7}
 80069fe:	b083      	sub	sp, #12
 8006a00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a02:	4b11      	ldr	r3, [pc, #68]	; (8006a48 <vPortExitCritical+0x4c>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <vPortExitCritical+0x24>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	607b      	str	r3, [r7, #4]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a20:	4b09      	ldr	r3, [pc, #36]	; (8006a48 <vPortExitCritical+0x4c>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	3b01      	subs	r3, #1
 8006a26:	4a08      	ldr	r2, [pc, #32]	; (8006a48 <vPortExitCritical+0x4c>)
 8006a28:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a2a:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <vPortExitCritical+0x4c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d105      	bne.n	8006a3e <vPortExitCritical+0x42>
 8006a32:	2300      	movs	r3, #0
 8006a34:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	f383 8811 	msr	BASEPRI, r3
}
 8006a3c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a3e:	bf00      	nop
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bc80      	pop	{r7}
 8006a46:	4770      	bx	lr
 8006a48:	2000000c 	.word	0x2000000c
 8006a4c:	00000000 	.word	0x00000000

08006a50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a50:	f3ef 8009 	mrs	r0, PSP
 8006a54:	f3bf 8f6f 	isb	sy
 8006a58:	4b0d      	ldr	r3, [pc, #52]	; (8006a90 <pxCurrentTCBConst>)
 8006a5a:	681a      	ldr	r2, [r3, #0]
 8006a5c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a60:	6010      	str	r0, [r2, #0]
 8006a62:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006a66:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a6a:	f380 8811 	msr	BASEPRI, r0
 8006a6e:	f7ff f83b 	bl	8005ae8 <vTaskSwitchContext>
 8006a72:	f04f 0000 	mov.w	r0, #0
 8006a76:	f380 8811 	msr	BASEPRI, r0
 8006a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006a86:	f380 8809 	msr	PSP, r0
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	4770      	bx	lr

08006a90 <pxCurrentTCBConst>:
 8006a90:	20000af4 	.word	0x20000af4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop

08006a98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aa2:	f383 8811 	msr	BASEPRI, r3
 8006aa6:	f3bf 8f6f 	isb	sy
 8006aaa:	f3bf 8f4f 	dsb	sy
 8006aae:	607b      	str	r3, [r7, #4]
}
 8006ab0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ab2:	f7fe ff5b 	bl	800596c <xTaskIncrementTick>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d003      	beq.n	8006ac4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006abc:	4b06      	ldr	r3, [pc, #24]	; (8006ad8 <SysTick_Handler+0x40>)
 8006abe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	f383 8811 	msr	BASEPRI, r3
}
 8006ace:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ad0:	bf00      	nop
 8006ad2:	3708      	adds	r7, #8
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	e000ed04 	.word	0xe000ed04

08006adc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ae0:	4b0a      	ldr	r3, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ae6:	4b0a      	ldr	r3, [pc, #40]	; (8006b10 <vPortSetupTimerInterrupt+0x34>)
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <vPortSetupTimerInterrupt+0x38>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a09      	ldr	r2, [pc, #36]	; (8006b18 <vPortSetupTimerInterrupt+0x3c>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	099b      	lsrs	r3, r3, #6
 8006af8:	4a08      	ldr	r2, [pc, #32]	; (8006b1c <vPortSetupTimerInterrupt+0x40>)
 8006afa:	3b01      	subs	r3, #1
 8006afc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006afe:	4b03      	ldr	r3, [pc, #12]	; (8006b0c <vPortSetupTimerInterrupt+0x30>)
 8006b00:	2207      	movs	r2, #7
 8006b02:	601a      	str	r2, [r3, #0]
}
 8006b04:	bf00      	nop
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bc80      	pop	{r7}
 8006b0a:	4770      	bx	lr
 8006b0c:	e000e010 	.word	0xe000e010
 8006b10:	e000e018 	.word	0xe000e018
 8006b14:	20000000 	.word	0x20000000
 8006b18:	10624dd3 	.word	0x10624dd3
 8006b1c:	e000e014 	.word	0xe000e014

08006b20 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b26:	f3ef 8305 	mrs	r3, IPSR
 8006b2a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	2b0f      	cmp	r3, #15
 8006b30:	d914      	bls.n	8006b5c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b32:	4a16      	ldr	r2, [pc, #88]	; (8006b8c <vPortValidateInterruptPriority+0x6c>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b3c:	4b14      	ldr	r3, [pc, #80]	; (8006b90 <vPortValidateInterruptPriority+0x70>)
 8006b3e:	781b      	ldrb	r3, [r3, #0]
 8006b40:	7afa      	ldrb	r2, [r7, #11]
 8006b42:	429a      	cmp	r2, r3
 8006b44:	d20a      	bcs.n	8006b5c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b4a:	f383 8811 	msr	BASEPRI, r3
 8006b4e:	f3bf 8f6f 	isb	sy
 8006b52:	f3bf 8f4f 	dsb	sy
 8006b56:	607b      	str	r3, [r7, #4]
}
 8006b58:	bf00      	nop
 8006b5a:	e7fe      	b.n	8006b5a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b5c:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <vPortValidateInterruptPriority+0x74>)
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <vPortValidateInterruptPriority+0x78>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d90a      	bls.n	8006b82 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	603b      	str	r3, [r7, #0]
}
 8006b7e:	bf00      	nop
 8006b80:	e7fe      	b.n	8006b80 <vPortValidateInterruptPriority+0x60>
	}
 8006b82:	bf00      	nop
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bc80      	pop	{r7}
 8006b8a:	4770      	bx	lr
 8006b8c:	e000e3f0 	.word	0xe000e3f0
 8006b90:	20001120 	.word	0x20001120
 8006b94:	e000ed0c 	.word	0xe000ed0c
 8006b98:	20001124 	.word	0x20001124

08006b9c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08a      	sub	sp, #40	; 0x28
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006ba8:	f7fe fe26 	bl	80057f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bac:	4b58      	ldr	r3, [pc, #352]	; (8006d10 <pvPortMalloc+0x174>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bb4:	f000 f910 	bl	8006dd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bb8:	4b56      	ldr	r3, [pc, #344]	; (8006d14 <pvPortMalloc+0x178>)
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	f040 808e 	bne.w	8006ce2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01d      	beq.n	8006c08 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bcc:	2208      	movs	r2, #8
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f003 0307 	and.w	r3, r3, #7
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d014      	beq.n	8006c08 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f023 0307 	bic.w	r3, r3, #7
 8006be4:	3308      	adds	r3, #8
 8006be6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f003 0307 	and.w	r3, r3, #7
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00a      	beq.n	8006c08 <pvPortMalloc+0x6c>
	__asm volatile
 8006bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bf6:	f383 8811 	msr	BASEPRI, r3
 8006bfa:	f3bf 8f6f 	isb	sy
 8006bfe:	f3bf 8f4f 	dsb	sy
 8006c02:	617b      	str	r3, [r7, #20]
}
 8006c04:	bf00      	nop
 8006c06:	e7fe      	b.n	8006c06 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d069      	beq.n	8006ce2 <pvPortMalloc+0x146>
 8006c0e:	4b42      	ldr	r3, [pc, #264]	; (8006d18 <pvPortMalloc+0x17c>)
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d864      	bhi.n	8006ce2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c18:	4b40      	ldr	r3, [pc, #256]	; (8006d1c <pvPortMalloc+0x180>)
 8006c1a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c1c:	4b3f      	ldr	r3, [pc, #252]	; (8006d1c <pvPortMalloc+0x180>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c22:	e004      	b.n	8006c2e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	687a      	ldr	r2, [r7, #4]
 8006c34:	429a      	cmp	r2, r3
 8006c36:	d903      	bls.n	8006c40 <pvPortMalloc+0xa4>
 8006c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d1f1      	bne.n	8006c24 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c40:	4b33      	ldr	r3, [pc, #204]	; (8006d10 <pvPortMalloc+0x174>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d04b      	beq.n	8006ce2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c4a:	6a3b      	ldr	r3, [r7, #32]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2208      	movs	r2, #8
 8006c50:	4413      	add	r3, r2
 8006c52:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5e:	685a      	ldr	r2, [r3, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	1ad2      	subs	r2, r2, r3
 8006c64:	2308      	movs	r3, #8
 8006c66:	005b      	lsls	r3, r3, #1
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d91f      	bls.n	8006cac <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4413      	add	r3, r2
 8006c72:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c74:	69bb      	ldr	r3, [r7, #24]
 8006c76:	f003 0307 	and.w	r3, r3, #7
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <pvPortMalloc+0xf8>
	__asm volatile
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	f383 8811 	msr	BASEPRI, r3
 8006c86:	f3bf 8f6f 	isb	sy
 8006c8a:	f3bf 8f4f 	dsb	sy
 8006c8e:	613b      	str	r3, [r7, #16]
}
 8006c90:	bf00      	nop
 8006c92:	e7fe      	b.n	8006c92 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	685a      	ldr	r2, [r3, #4]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	1ad2      	subs	r2, r2, r3
 8006c9c:	69bb      	ldr	r3, [r7, #24]
 8006c9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ca6:	69b8      	ldr	r0, [r7, #24]
 8006ca8:	f000 f8f8 	bl	8006e9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cac:	4b1a      	ldr	r3, [pc, #104]	; (8006d18 <pvPortMalloc+0x17c>)
 8006cae:	681a      	ldr	r2, [r3, #0]
 8006cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	4a18      	ldr	r2, [pc, #96]	; (8006d18 <pvPortMalloc+0x17c>)
 8006cb8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cba:	4b17      	ldr	r3, [pc, #92]	; (8006d18 <pvPortMalloc+0x17c>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	4b18      	ldr	r3, [pc, #96]	; (8006d20 <pvPortMalloc+0x184>)
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d203      	bcs.n	8006cce <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cc6:	4b14      	ldr	r3, [pc, #80]	; (8006d18 <pvPortMalloc+0x17c>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a15      	ldr	r2, [pc, #84]	; (8006d20 <pvPortMalloc+0x184>)
 8006ccc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <pvPortMalloc+0x178>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	431a      	orrs	r2, r3
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	2200      	movs	r2, #0
 8006ce0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ce2:	f7fe fd97 	bl	8005814 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00a      	beq.n	8006d06 <pvPortMalloc+0x16a>
	__asm volatile
 8006cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf4:	f383 8811 	msr	BASEPRI, r3
 8006cf8:	f3bf 8f6f 	isb	sy
 8006cfc:	f3bf 8f4f 	dsb	sy
 8006d00:	60fb      	str	r3, [r7, #12]
}
 8006d02:	bf00      	nop
 8006d04:	e7fe      	b.n	8006d04 <pvPortMalloc+0x168>
	return pvReturn;
 8006d06:	69fb      	ldr	r3, [r7, #28]
}
 8006d08:	4618      	mov	r0, r3
 8006d0a:	3728      	adds	r7, #40	; 0x28
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	bd80      	pop	{r7, pc}
 8006d10:	20001d30 	.word	0x20001d30
 8006d14:	20001d3c 	.word	0x20001d3c
 8006d18:	20001d34 	.word	0x20001d34
 8006d1c:	20001d28 	.word	0x20001d28
 8006d20:	20001d38 	.word	0x20001d38

08006d24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d048      	beq.n	8006dc8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d36:	2308      	movs	r3, #8
 8006d38:	425b      	negs	r3, r3
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <vPortFree+0xac>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d10a      	bne.n	8006d68 <vPortFree+0x44>
	__asm volatile
 8006d52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d56:	f383 8811 	msr	BASEPRI, r3
 8006d5a:	f3bf 8f6f 	isb	sy
 8006d5e:	f3bf 8f4f 	dsb	sy
 8006d62:	60fb      	str	r3, [r7, #12]
}
 8006d64:	bf00      	nop
 8006d66:	e7fe      	b.n	8006d66 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00a      	beq.n	8006d86 <vPortFree+0x62>
	__asm volatile
 8006d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d74:	f383 8811 	msr	BASEPRI, r3
 8006d78:	f3bf 8f6f 	isb	sy
 8006d7c:	f3bf 8f4f 	dsb	sy
 8006d80:	60bb      	str	r3, [r7, #8]
}
 8006d82:	bf00      	nop
 8006d84:	e7fe      	b.n	8006d84 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006d86:	693b      	ldr	r3, [r7, #16]
 8006d88:	685a      	ldr	r2, [r3, #4]
 8006d8a:	4b11      	ldr	r3, [pc, #68]	; (8006dd0 <vPortFree+0xac>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4013      	ands	r3, r2
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d019      	beq.n	8006dc8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d115      	bne.n	8006dc8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	685a      	ldr	r2, [r3, #4]
 8006da0:	4b0b      	ldr	r3, [pc, #44]	; (8006dd0 <vPortFree+0xac>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	43db      	mvns	r3, r3
 8006da6:	401a      	ands	r2, r3
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dac:	f7fe fd24 	bl	80057f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	685a      	ldr	r2, [r3, #4]
 8006db4:	4b07      	ldr	r3, [pc, #28]	; (8006dd4 <vPortFree+0xb0>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4413      	add	r3, r2
 8006dba:	4a06      	ldr	r2, [pc, #24]	; (8006dd4 <vPortFree+0xb0>)
 8006dbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f000 f86c 	bl	8006e9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006dc4:	f7fe fd26 	bl	8005814 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dc8:	bf00      	nop
 8006dca:	3718      	adds	r7, #24
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	bd80      	pop	{r7, pc}
 8006dd0:	20001d3c 	.word	0x20001d3c
 8006dd4:	20001d34 	.word	0x20001d34

08006dd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006dde:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006de2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006de4:	4b27      	ldr	r3, [pc, #156]	; (8006e84 <prvHeapInit+0xac>)
 8006de6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	3307      	adds	r3, #7
 8006df6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	f023 0307 	bic.w	r3, r3, #7
 8006dfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e00:	68ba      	ldr	r2, [r7, #8]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	1ad3      	subs	r3, r2, r3
 8006e06:	4a1f      	ldr	r2, [pc, #124]	; (8006e84 <prvHeapInit+0xac>)
 8006e08:	4413      	add	r3, r2
 8006e0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e10:	4a1d      	ldr	r2, [pc, #116]	; (8006e88 <prvHeapInit+0xb0>)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <prvHeapInit+0xb0>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4413      	add	r3, r2
 8006e22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e24:	2208      	movs	r2, #8
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	1a9b      	subs	r3, r3, r2
 8006e2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f023 0307 	bic.w	r3, r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	4a15      	ldr	r2, [pc, #84]	; (8006e8c <prvHeapInit+0xb4>)
 8006e38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e3a:	4b14      	ldr	r3, [pc, #80]	; (8006e8c <prvHeapInit+0xb4>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e42:	4b12      	ldr	r3, [pc, #72]	; (8006e8c <prvHeapInit+0xb4>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2200      	movs	r2, #0
 8006e48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	1ad2      	subs	r2, r2, r3
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e58:	4b0c      	ldr	r3, [pc, #48]	; (8006e8c <prvHeapInit+0xb4>)
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	4a0a      	ldr	r2, [pc, #40]	; (8006e90 <prvHeapInit+0xb8>)
 8006e66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	685b      	ldr	r3, [r3, #4]
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <prvHeapInit+0xbc>)
 8006e6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e70:	4b09      	ldr	r3, [pc, #36]	; (8006e98 <prvHeapInit+0xc0>)
 8006e72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006e76:	601a      	str	r2, [r3, #0]
}
 8006e78:	bf00      	nop
 8006e7a:	3714      	adds	r7, #20
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bc80      	pop	{r7}
 8006e80:	4770      	bx	lr
 8006e82:	bf00      	nop
 8006e84:	20001128 	.word	0x20001128
 8006e88:	20001d28 	.word	0x20001d28
 8006e8c:	20001d30 	.word	0x20001d30
 8006e90:	20001d38 	.word	0x20001d38
 8006e94:	20001d34 	.word	0x20001d34
 8006e98:	20001d3c 	.word	0x20001d3c

08006e9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ea4:	4b27      	ldr	r3, [pc, #156]	; (8006f44 <prvInsertBlockIntoFreeList+0xa8>)
 8006ea6:	60fb      	str	r3, [r7, #12]
 8006ea8:	e002      	b.n	8006eb0 <prvInsertBlockIntoFreeList+0x14>
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	60fb      	str	r3, [r7, #12]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	429a      	cmp	r2, r3
 8006eb8:	d8f7      	bhi.n	8006eaa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	685b      	ldr	r3, [r3, #4]
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d108      	bne.n	8006ede <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	685a      	ldr	r2, [r3, #4]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	441a      	add	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	441a      	add	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d118      	bne.n	8006f24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <prvInsertBlockIntoFreeList+0xac>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d00d      	beq.n	8006f1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	441a      	add	r2, r3
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	601a      	str	r2, [r3, #0]
 8006f18:	e008      	b.n	8006f2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f1a:	4b0b      	ldr	r3, [pc, #44]	; (8006f48 <prvInsertBlockIntoFreeList+0xac>)
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	601a      	str	r2, [r3, #0]
 8006f22:	e003      	b.n	8006f2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	429a      	cmp	r2, r3
 8006f32:	d002      	beq.n	8006f3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f3a:	bf00      	nop
 8006f3c:	3714      	adds	r7, #20
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bc80      	pop	{r7}
 8006f42:	4770      	bx	lr
 8006f44:	20001d28 	.word	0x20001d28
 8006f48:	20001d30 	.word	0x20001d30

08006f4c <__errno>:
 8006f4c:	4b01      	ldr	r3, [pc, #4]	; (8006f54 <__errno+0x8>)
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	20000010 	.word	0x20000010

08006f58 <std>:
 8006f58:	2300      	movs	r3, #0
 8006f5a:	b510      	push	{r4, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f62:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f66:	6083      	str	r3, [r0, #8]
 8006f68:	8181      	strh	r1, [r0, #12]
 8006f6a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f6c:	81c2      	strh	r2, [r0, #14]
 8006f6e:	6183      	str	r3, [r0, #24]
 8006f70:	4619      	mov	r1, r3
 8006f72:	2208      	movs	r2, #8
 8006f74:	305c      	adds	r0, #92	; 0x5c
 8006f76:	f000 f91a 	bl	80071ae <memset>
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <std+0x38>)
 8006f7c:	6224      	str	r4, [r4, #32]
 8006f7e:	6263      	str	r3, [r4, #36]	; 0x24
 8006f80:	4b04      	ldr	r3, [pc, #16]	; (8006f94 <std+0x3c>)
 8006f82:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f84:	4b04      	ldr	r3, [pc, #16]	; (8006f98 <std+0x40>)
 8006f86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f88:	4b04      	ldr	r3, [pc, #16]	; (8006f9c <std+0x44>)
 8006f8a:	6323      	str	r3, [r4, #48]	; 0x30
 8006f8c:	bd10      	pop	{r4, pc}
 8006f8e:	bf00      	nop
 8006f90:	08007c9d 	.word	0x08007c9d
 8006f94:	08007cbf 	.word	0x08007cbf
 8006f98:	08007cf7 	.word	0x08007cf7
 8006f9c:	08007d1b 	.word	0x08007d1b

08006fa0 <_cleanup_r>:
 8006fa0:	4901      	ldr	r1, [pc, #4]	; (8006fa8 <_cleanup_r+0x8>)
 8006fa2:	f000 b8af 	b.w	8007104 <_fwalk_reent>
 8006fa6:	bf00      	nop
 8006fa8:	08008b61 	.word	0x08008b61

08006fac <__sfmoreglue>:
 8006fac:	2268      	movs	r2, #104	; 0x68
 8006fae:	b570      	push	{r4, r5, r6, lr}
 8006fb0:	1e4d      	subs	r5, r1, #1
 8006fb2:	4355      	muls	r5, r2
 8006fb4:	460e      	mov	r6, r1
 8006fb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fba:	f000 f921 	bl	8007200 <_malloc_r>
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	b140      	cbz	r0, 8006fd4 <__sfmoreglue+0x28>
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	e9c0 1600 	strd	r1, r6, [r0]
 8006fc8:	300c      	adds	r0, #12
 8006fca:	60a0      	str	r0, [r4, #8]
 8006fcc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fd0:	f000 f8ed 	bl	80071ae <memset>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	bd70      	pop	{r4, r5, r6, pc}

08006fd8 <__sfp_lock_acquire>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__sfp_lock_acquire+0x8>)
 8006fda:	f000 b8d8 	b.w	800718e <__retarget_lock_acquire_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20001d41 	.word	0x20001d41

08006fe4 <__sfp_lock_release>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__sfp_lock_release+0x8>)
 8006fe6:	f000 b8d3 	b.w	8007190 <__retarget_lock_release_recursive>
 8006fea:	bf00      	nop
 8006fec:	20001d41 	.word	0x20001d41

08006ff0 <__sinit_lock_acquire>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__sinit_lock_acquire+0x8>)
 8006ff2:	f000 b8cc 	b.w	800718e <__retarget_lock_acquire_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	20001d42 	.word	0x20001d42

08006ffc <__sinit_lock_release>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sinit_lock_release+0x8>)
 8006ffe:	f000 b8c7 	b.w	8007190 <__retarget_lock_release_recursive>
 8007002:	bf00      	nop
 8007004:	20001d42 	.word	0x20001d42

08007008 <__sinit>:
 8007008:	b510      	push	{r4, lr}
 800700a:	4604      	mov	r4, r0
 800700c:	f7ff fff0 	bl	8006ff0 <__sinit_lock_acquire>
 8007010:	69a3      	ldr	r3, [r4, #24]
 8007012:	b11b      	cbz	r3, 800701c <__sinit+0x14>
 8007014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007018:	f7ff bff0 	b.w	8006ffc <__sinit_lock_release>
 800701c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007020:	6523      	str	r3, [r4, #80]	; 0x50
 8007022:	4b13      	ldr	r3, [pc, #76]	; (8007070 <__sinit+0x68>)
 8007024:	4a13      	ldr	r2, [pc, #76]	; (8007074 <__sinit+0x6c>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	62a2      	str	r2, [r4, #40]	; 0x28
 800702a:	42a3      	cmp	r3, r4
 800702c:	bf08      	it	eq
 800702e:	2301      	moveq	r3, #1
 8007030:	4620      	mov	r0, r4
 8007032:	bf08      	it	eq
 8007034:	61a3      	streq	r3, [r4, #24]
 8007036:	f000 f81f 	bl	8007078 <__sfp>
 800703a:	6060      	str	r0, [r4, #4]
 800703c:	4620      	mov	r0, r4
 800703e:	f000 f81b 	bl	8007078 <__sfp>
 8007042:	60a0      	str	r0, [r4, #8]
 8007044:	4620      	mov	r0, r4
 8007046:	f000 f817 	bl	8007078 <__sfp>
 800704a:	2200      	movs	r2, #0
 800704c:	2104      	movs	r1, #4
 800704e:	60e0      	str	r0, [r4, #12]
 8007050:	6860      	ldr	r0, [r4, #4]
 8007052:	f7ff ff81 	bl	8006f58 <std>
 8007056:	2201      	movs	r2, #1
 8007058:	2109      	movs	r1, #9
 800705a:	68a0      	ldr	r0, [r4, #8]
 800705c:	f7ff ff7c 	bl	8006f58 <std>
 8007060:	2202      	movs	r2, #2
 8007062:	2112      	movs	r1, #18
 8007064:	68e0      	ldr	r0, [r4, #12]
 8007066:	f7ff ff77 	bl	8006f58 <std>
 800706a:	2301      	movs	r3, #1
 800706c:	61a3      	str	r3, [r4, #24]
 800706e:	e7d1      	b.n	8007014 <__sinit+0xc>
 8007070:	08009c24 	.word	0x08009c24
 8007074:	08006fa1 	.word	0x08006fa1

08007078 <__sfp>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	4607      	mov	r7, r0
 800707c:	f7ff ffac 	bl	8006fd8 <__sfp_lock_acquire>
 8007080:	4b1e      	ldr	r3, [pc, #120]	; (80070fc <__sfp+0x84>)
 8007082:	681e      	ldr	r6, [r3, #0]
 8007084:	69b3      	ldr	r3, [r6, #24]
 8007086:	b913      	cbnz	r3, 800708e <__sfp+0x16>
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffbd 	bl	8007008 <__sinit>
 800708e:	3648      	adds	r6, #72	; 0x48
 8007090:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007094:	3b01      	subs	r3, #1
 8007096:	d503      	bpl.n	80070a0 <__sfp+0x28>
 8007098:	6833      	ldr	r3, [r6, #0]
 800709a:	b30b      	cbz	r3, 80070e0 <__sfp+0x68>
 800709c:	6836      	ldr	r6, [r6, #0]
 800709e:	e7f7      	b.n	8007090 <__sfp+0x18>
 80070a0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070a4:	b9d5      	cbnz	r5, 80070dc <__sfp+0x64>
 80070a6:	4b16      	ldr	r3, [pc, #88]	; (8007100 <__sfp+0x88>)
 80070a8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070ac:	60e3      	str	r3, [r4, #12]
 80070ae:	6665      	str	r5, [r4, #100]	; 0x64
 80070b0:	f000 f86c 	bl	800718c <__retarget_lock_init_recursive>
 80070b4:	f7ff ff96 	bl	8006fe4 <__sfp_lock_release>
 80070b8:	2208      	movs	r2, #8
 80070ba:	4629      	mov	r1, r5
 80070bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070c4:	6025      	str	r5, [r4, #0]
 80070c6:	61a5      	str	r5, [r4, #24]
 80070c8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070cc:	f000 f86f 	bl	80071ae <memset>
 80070d0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070d4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070d8:	4620      	mov	r0, r4
 80070da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070dc:	3468      	adds	r4, #104	; 0x68
 80070de:	e7d9      	b.n	8007094 <__sfp+0x1c>
 80070e0:	2104      	movs	r1, #4
 80070e2:	4638      	mov	r0, r7
 80070e4:	f7ff ff62 	bl	8006fac <__sfmoreglue>
 80070e8:	4604      	mov	r4, r0
 80070ea:	6030      	str	r0, [r6, #0]
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d1d5      	bne.n	800709c <__sfp+0x24>
 80070f0:	f7ff ff78 	bl	8006fe4 <__sfp_lock_release>
 80070f4:	230c      	movs	r3, #12
 80070f6:	603b      	str	r3, [r7, #0]
 80070f8:	e7ee      	b.n	80070d8 <__sfp+0x60>
 80070fa:	bf00      	nop
 80070fc:	08009c24 	.word	0x08009c24
 8007100:	ffff0001 	.word	0xffff0001

08007104 <_fwalk_reent>:
 8007104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007108:	4606      	mov	r6, r0
 800710a:	4688      	mov	r8, r1
 800710c:	2700      	movs	r7, #0
 800710e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007112:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007116:	f1b9 0901 	subs.w	r9, r9, #1
 800711a:	d505      	bpl.n	8007128 <_fwalk_reent+0x24>
 800711c:	6824      	ldr	r4, [r4, #0]
 800711e:	2c00      	cmp	r4, #0
 8007120:	d1f7      	bne.n	8007112 <_fwalk_reent+0xe>
 8007122:	4638      	mov	r0, r7
 8007124:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007128:	89ab      	ldrh	r3, [r5, #12]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d907      	bls.n	800713e <_fwalk_reent+0x3a>
 800712e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007132:	3301      	adds	r3, #1
 8007134:	d003      	beq.n	800713e <_fwalk_reent+0x3a>
 8007136:	4629      	mov	r1, r5
 8007138:	4630      	mov	r0, r6
 800713a:	47c0      	blx	r8
 800713c:	4307      	orrs	r7, r0
 800713e:	3568      	adds	r5, #104	; 0x68
 8007140:	e7e9      	b.n	8007116 <_fwalk_reent+0x12>
	...

08007144 <__libc_init_array>:
 8007144:	b570      	push	{r4, r5, r6, lr}
 8007146:	2600      	movs	r6, #0
 8007148:	4d0c      	ldr	r5, [pc, #48]	; (800717c <__libc_init_array+0x38>)
 800714a:	4c0d      	ldr	r4, [pc, #52]	; (8007180 <__libc_init_array+0x3c>)
 800714c:	1b64      	subs	r4, r4, r5
 800714e:	10a4      	asrs	r4, r4, #2
 8007150:	42a6      	cmp	r6, r4
 8007152:	d109      	bne.n	8007168 <__libc_init_array+0x24>
 8007154:	f002 fca2 	bl	8009a9c <_init>
 8007158:	2600      	movs	r6, #0
 800715a:	4d0a      	ldr	r5, [pc, #40]	; (8007184 <__libc_init_array+0x40>)
 800715c:	4c0a      	ldr	r4, [pc, #40]	; (8007188 <__libc_init_array+0x44>)
 800715e:	1b64      	subs	r4, r4, r5
 8007160:	10a4      	asrs	r4, r4, #2
 8007162:	42a6      	cmp	r6, r4
 8007164:	d105      	bne.n	8007172 <__libc_init_array+0x2e>
 8007166:	bd70      	pop	{r4, r5, r6, pc}
 8007168:	f855 3b04 	ldr.w	r3, [r5], #4
 800716c:	4798      	blx	r3
 800716e:	3601      	adds	r6, #1
 8007170:	e7ee      	b.n	8007150 <__libc_init_array+0xc>
 8007172:	f855 3b04 	ldr.w	r3, [r5], #4
 8007176:	4798      	blx	r3
 8007178:	3601      	adds	r6, #1
 800717a:	e7f2      	b.n	8007162 <__libc_init_array+0x1e>
 800717c:	08009f9c 	.word	0x08009f9c
 8007180:	08009f9c 	.word	0x08009f9c
 8007184:	08009f9c 	.word	0x08009f9c
 8007188:	08009fa0 	.word	0x08009fa0

0800718c <__retarget_lock_init_recursive>:
 800718c:	4770      	bx	lr

0800718e <__retarget_lock_acquire_recursive>:
 800718e:	4770      	bx	lr

08007190 <__retarget_lock_release_recursive>:
 8007190:	4770      	bx	lr

08007192 <memcpy>:
 8007192:	440a      	add	r2, r1
 8007194:	4291      	cmp	r1, r2
 8007196:	f100 33ff 	add.w	r3, r0, #4294967295
 800719a:	d100      	bne.n	800719e <memcpy+0xc>
 800719c:	4770      	bx	lr
 800719e:	b510      	push	{r4, lr}
 80071a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a4:	4291      	cmp	r1, r2
 80071a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071aa:	d1f9      	bne.n	80071a0 <memcpy+0xe>
 80071ac:	bd10      	pop	{r4, pc}

080071ae <memset>:
 80071ae:	4603      	mov	r3, r0
 80071b0:	4402      	add	r2, r0
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d100      	bne.n	80071b8 <memset+0xa>
 80071b6:	4770      	bx	lr
 80071b8:	f803 1b01 	strb.w	r1, [r3], #1
 80071bc:	e7f9      	b.n	80071b2 <memset+0x4>
	...

080071c0 <sbrk_aligned>:
 80071c0:	b570      	push	{r4, r5, r6, lr}
 80071c2:	4e0e      	ldr	r6, [pc, #56]	; (80071fc <sbrk_aligned+0x3c>)
 80071c4:	460c      	mov	r4, r1
 80071c6:	6831      	ldr	r1, [r6, #0]
 80071c8:	4605      	mov	r5, r0
 80071ca:	b911      	cbnz	r1, 80071d2 <sbrk_aligned+0x12>
 80071cc:	f000 fd56 	bl	8007c7c <_sbrk_r>
 80071d0:	6030      	str	r0, [r6, #0]
 80071d2:	4621      	mov	r1, r4
 80071d4:	4628      	mov	r0, r5
 80071d6:	f000 fd51 	bl	8007c7c <_sbrk_r>
 80071da:	1c43      	adds	r3, r0, #1
 80071dc:	d00a      	beq.n	80071f4 <sbrk_aligned+0x34>
 80071de:	1cc4      	adds	r4, r0, #3
 80071e0:	f024 0403 	bic.w	r4, r4, #3
 80071e4:	42a0      	cmp	r0, r4
 80071e6:	d007      	beq.n	80071f8 <sbrk_aligned+0x38>
 80071e8:	1a21      	subs	r1, r4, r0
 80071ea:	4628      	mov	r0, r5
 80071ec:	f000 fd46 	bl	8007c7c <_sbrk_r>
 80071f0:	3001      	adds	r0, #1
 80071f2:	d101      	bne.n	80071f8 <sbrk_aligned+0x38>
 80071f4:	f04f 34ff 	mov.w	r4, #4294967295
 80071f8:	4620      	mov	r0, r4
 80071fa:	bd70      	pop	{r4, r5, r6, pc}
 80071fc:	20001d48 	.word	0x20001d48

08007200 <_malloc_r>:
 8007200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007204:	1ccd      	adds	r5, r1, #3
 8007206:	f025 0503 	bic.w	r5, r5, #3
 800720a:	3508      	adds	r5, #8
 800720c:	2d0c      	cmp	r5, #12
 800720e:	bf38      	it	cc
 8007210:	250c      	movcc	r5, #12
 8007212:	2d00      	cmp	r5, #0
 8007214:	4607      	mov	r7, r0
 8007216:	db01      	blt.n	800721c <_malloc_r+0x1c>
 8007218:	42a9      	cmp	r1, r5
 800721a:	d905      	bls.n	8007228 <_malloc_r+0x28>
 800721c:	230c      	movs	r3, #12
 800721e:	2600      	movs	r6, #0
 8007220:	603b      	str	r3, [r7, #0]
 8007222:	4630      	mov	r0, r6
 8007224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007228:	4e2e      	ldr	r6, [pc, #184]	; (80072e4 <_malloc_r+0xe4>)
 800722a:	f001 fd01 	bl	8008c30 <__malloc_lock>
 800722e:	6833      	ldr	r3, [r6, #0]
 8007230:	461c      	mov	r4, r3
 8007232:	bb34      	cbnz	r4, 8007282 <_malloc_r+0x82>
 8007234:	4629      	mov	r1, r5
 8007236:	4638      	mov	r0, r7
 8007238:	f7ff ffc2 	bl	80071c0 <sbrk_aligned>
 800723c:	1c43      	adds	r3, r0, #1
 800723e:	4604      	mov	r4, r0
 8007240:	d14d      	bne.n	80072de <_malloc_r+0xde>
 8007242:	6834      	ldr	r4, [r6, #0]
 8007244:	4626      	mov	r6, r4
 8007246:	2e00      	cmp	r6, #0
 8007248:	d140      	bne.n	80072cc <_malloc_r+0xcc>
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	4631      	mov	r1, r6
 800724e:	4638      	mov	r0, r7
 8007250:	eb04 0803 	add.w	r8, r4, r3
 8007254:	f000 fd12 	bl	8007c7c <_sbrk_r>
 8007258:	4580      	cmp	r8, r0
 800725a:	d13a      	bne.n	80072d2 <_malloc_r+0xd2>
 800725c:	6821      	ldr	r1, [r4, #0]
 800725e:	3503      	adds	r5, #3
 8007260:	1a6d      	subs	r5, r5, r1
 8007262:	f025 0503 	bic.w	r5, r5, #3
 8007266:	3508      	adds	r5, #8
 8007268:	2d0c      	cmp	r5, #12
 800726a:	bf38      	it	cc
 800726c:	250c      	movcc	r5, #12
 800726e:	4638      	mov	r0, r7
 8007270:	4629      	mov	r1, r5
 8007272:	f7ff ffa5 	bl	80071c0 <sbrk_aligned>
 8007276:	3001      	adds	r0, #1
 8007278:	d02b      	beq.n	80072d2 <_malloc_r+0xd2>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	442b      	add	r3, r5
 800727e:	6023      	str	r3, [r4, #0]
 8007280:	e00e      	b.n	80072a0 <_malloc_r+0xa0>
 8007282:	6822      	ldr	r2, [r4, #0]
 8007284:	1b52      	subs	r2, r2, r5
 8007286:	d41e      	bmi.n	80072c6 <_malloc_r+0xc6>
 8007288:	2a0b      	cmp	r2, #11
 800728a:	d916      	bls.n	80072ba <_malloc_r+0xba>
 800728c:	1961      	adds	r1, r4, r5
 800728e:	42a3      	cmp	r3, r4
 8007290:	6025      	str	r5, [r4, #0]
 8007292:	bf18      	it	ne
 8007294:	6059      	strne	r1, [r3, #4]
 8007296:	6863      	ldr	r3, [r4, #4]
 8007298:	bf08      	it	eq
 800729a:	6031      	streq	r1, [r6, #0]
 800729c:	5162      	str	r2, [r4, r5]
 800729e:	604b      	str	r3, [r1, #4]
 80072a0:	4638      	mov	r0, r7
 80072a2:	f104 060b 	add.w	r6, r4, #11
 80072a6:	f001 fcc9 	bl	8008c3c <__malloc_unlock>
 80072aa:	f026 0607 	bic.w	r6, r6, #7
 80072ae:	1d23      	adds	r3, r4, #4
 80072b0:	1af2      	subs	r2, r6, r3
 80072b2:	d0b6      	beq.n	8007222 <_malloc_r+0x22>
 80072b4:	1b9b      	subs	r3, r3, r6
 80072b6:	50a3      	str	r3, [r4, r2]
 80072b8:	e7b3      	b.n	8007222 <_malloc_r+0x22>
 80072ba:	6862      	ldr	r2, [r4, #4]
 80072bc:	42a3      	cmp	r3, r4
 80072be:	bf0c      	ite	eq
 80072c0:	6032      	streq	r2, [r6, #0]
 80072c2:	605a      	strne	r2, [r3, #4]
 80072c4:	e7ec      	b.n	80072a0 <_malloc_r+0xa0>
 80072c6:	4623      	mov	r3, r4
 80072c8:	6864      	ldr	r4, [r4, #4]
 80072ca:	e7b2      	b.n	8007232 <_malloc_r+0x32>
 80072cc:	4634      	mov	r4, r6
 80072ce:	6876      	ldr	r6, [r6, #4]
 80072d0:	e7b9      	b.n	8007246 <_malloc_r+0x46>
 80072d2:	230c      	movs	r3, #12
 80072d4:	4638      	mov	r0, r7
 80072d6:	603b      	str	r3, [r7, #0]
 80072d8:	f001 fcb0 	bl	8008c3c <__malloc_unlock>
 80072dc:	e7a1      	b.n	8007222 <_malloc_r+0x22>
 80072de:	6025      	str	r5, [r4, #0]
 80072e0:	e7de      	b.n	80072a0 <_malloc_r+0xa0>
 80072e2:	bf00      	nop
 80072e4:	20001d44 	.word	0x20001d44

080072e8 <__cvt>:
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072ee:	461f      	mov	r7, r3
 80072f0:	bfbb      	ittet	lt
 80072f2:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80072f6:	461f      	movlt	r7, r3
 80072f8:	2300      	movge	r3, #0
 80072fa:	232d      	movlt	r3, #45	; 0x2d
 80072fc:	b088      	sub	sp, #32
 80072fe:	4614      	mov	r4, r2
 8007300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007302:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007304:	7013      	strb	r3, [r2, #0]
 8007306:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007308:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800730c:	f023 0820 	bic.w	r8, r3, #32
 8007310:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007314:	d005      	beq.n	8007322 <__cvt+0x3a>
 8007316:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800731a:	d100      	bne.n	800731e <__cvt+0x36>
 800731c:	3501      	adds	r5, #1
 800731e:	2302      	movs	r3, #2
 8007320:	e000      	b.n	8007324 <__cvt+0x3c>
 8007322:	2303      	movs	r3, #3
 8007324:	aa07      	add	r2, sp, #28
 8007326:	9204      	str	r2, [sp, #16]
 8007328:	aa06      	add	r2, sp, #24
 800732a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800732e:	e9cd 3500 	strd	r3, r5, [sp]
 8007332:	4622      	mov	r2, r4
 8007334:	463b      	mov	r3, r7
 8007336:	f000 fda3 	bl	8007e80 <_dtoa_r>
 800733a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800733e:	4606      	mov	r6, r0
 8007340:	d102      	bne.n	8007348 <__cvt+0x60>
 8007342:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007344:	07db      	lsls	r3, r3, #31
 8007346:	d522      	bpl.n	800738e <__cvt+0xa6>
 8007348:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800734c:	eb06 0905 	add.w	r9, r6, r5
 8007350:	d110      	bne.n	8007374 <__cvt+0x8c>
 8007352:	7833      	ldrb	r3, [r6, #0]
 8007354:	2b30      	cmp	r3, #48	; 0x30
 8007356:	d10a      	bne.n	800736e <__cvt+0x86>
 8007358:	2200      	movs	r2, #0
 800735a:	2300      	movs	r3, #0
 800735c:	4620      	mov	r0, r4
 800735e:	4639      	mov	r1, r7
 8007360:	f7f9 fb22 	bl	80009a8 <__aeabi_dcmpeq>
 8007364:	b918      	cbnz	r0, 800736e <__cvt+0x86>
 8007366:	f1c5 0501 	rsb	r5, r5, #1
 800736a:	f8ca 5000 	str.w	r5, [sl]
 800736e:	f8da 3000 	ldr.w	r3, [sl]
 8007372:	4499      	add	r9, r3
 8007374:	2200      	movs	r2, #0
 8007376:	2300      	movs	r3, #0
 8007378:	4620      	mov	r0, r4
 800737a:	4639      	mov	r1, r7
 800737c:	f7f9 fb14 	bl	80009a8 <__aeabi_dcmpeq>
 8007380:	b108      	cbz	r0, 8007386 <__cvt+0x9e>
 8007382:	f8cd 901c 	str.w	r9, [sp, #28]
 8007386:	2230      	movs	r2, #48	; 0x30
 8007388:	9b07      	ldr	r3, [sp, #28]
 800738a:	454b      	cmp	r3, r9
 800738c:	d307      	bcc.n	800739e <__cvt+0xb6>
 800738e:	4630      	mov	r0, r6
 8007390:	9b07      	ldr	r3, [sp, #28]
 8007392:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007394:	1b9b      	subs	r3, r3, r6
 8007396:	6013      	str	r3, [r2, #0]
 8007398:	b008      	add	sp, #32
 800739a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800739e:	1c59      	adds	r1, r3, #1
 80073a0:	9107      	str	r1, [sp, #28]
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e7f0      	b.n	8007388 <__cvt+0xa0>

080073a6 <__exponent>:
 80073a6:	4603      	mov	r3, r0
 80073a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80073aa:	2900      	cmp	r1, #0
 80073ac:	f803 2b02 	strb.w	r2, [r3], #2
 80073b0:	bfb6      	itet	lt
 80073b2:	222d      	movlt	r2, #45	; 0x2d
 80073b4:	222b      	movge	r2, #43	; 0x2b
 80073b6:	4249      	neglt	r1, r1
 80073b8:	2909      	cmp	r1, #9
 80073ba:	7042      	strb	r2, [r0, #1]
 80073bc:	dd2b      	ble.n	8007416 <__exponent+0x70>
 80073be:	f10d 0407 	add.w	r4, sp, #7
 80073c2:	46a4      	mov	ip, r4
 80073c4:	270a      	movs	r7, #10
 80073c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80073ca:	460a      	mov	r2, r1
 80073cc:	46a6      	mov	lr, r4
 80073ce:	fb07 1516 	mls	r5, r7, r6, r1
 80073d2:	2a63      	cmp	r2, #99	; 0x63
 80073d4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80073d8:	4631      	mov	r1, r6
 80073da:	f104 34ff 	add.w	r4, r4, #4294967295
 80073de:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80073e2:	dcf0      	bgt.n	80073c6 <__exponent+0x20>
 80073e4:	3130      	adds	r1, #48	; 0x30
 80073e6:	f1ae 0502 	sub.w	r5, lr, #2
 80073ea:	f804 1c01 	strb.w	r1, [r4, #-1]
 80073ee:	4629      	mov	r1, r5
 80073f0:	1c44      	adds	r4, r0, #1
 80073f2:	4561      	cmp	r1, ip
 80073f4:	d30a      	bcc.n	800740c <__exponent+0x66>
 80073f6:	f10d 0209 	add.w	r2, sp, #9
 80073fa:	eba2 020e 	sub.w	r2, r2, lr
 80073fe:	4565      	cmp	r5, ip
 8007400:	bf88      	it	hi
 8007402:	2200      	movhi	r2, #0
 8007404:	4413      	add	r3, r2
 8007406:	1a18      	subs	r0, r3, r0
 8007408:	b003      	add	sp, #12
 800740a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800740c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007410:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007414:	e7ed      	b.n	80073f2 <__exponent+0x4c>
 8007416:	2330      	movs	r3, #48	; 0x30
 8007418:	3130      	adds	r1, #48	; 0x30
 800741a:	7083      	strb	r3, [r0, #2]
 800741c:	70c1      	strb	r1, [r0, #3]
 800741e:	1d03      	adds	r3, r0, #4
 8007420:	e7f1      	b.n	8007406 <__exponent+0x60>
	...

08007424 <_printf_float>:
 8007424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007428:	b091      	sub	sp, #68	; 0x44
 800742a:	460c      	mov	r4, r1
 800742c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8007430:	4616      	mov	r6, r2
 8007432:	461f      	mov	r7, r3
 8007434:	4605      	mov	r5, r0
 8007436:	f001 fbcf 	bl	8008bd8 <_localeconv_r>
 800743a:	6803      	ldr	r3, [r0, #0]
 800743c:	4618      	mov	r0, r3
 800743e:	9309      	str	r3, [sp, #36]	; 0x24
 8007440:	f7f8 fe86 	bl	8000150 <strlen>
 8007444:	2300      	movs	r3, #0
 8007446:	930e      	str	r3, [sp, #56]	; 0x38
 8007448:	f8d8 3000 	ldr.w	r3, [r8]
 800744c:	900a      	str	r0, [sp, #40]	; 0x28
 800744e:	3307      	adds	r3, #7
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	f103 0208 	add.w	r2, r3, #8
 8007458:	f894 9018 	ldrb.w	r9, [r4, #24]
 800745c:	f8d4 b000 	ldr.w	fp, [r4]
 8007460:	f8c8 2000 	str.w	r2, [r8]
 8007464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007468:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800746c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8007470:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8007474:	930b      	str	r3, [sp, #44]	; 0x2c
 8007476:	f04f 32ff 	mov.w	r2, #4294967295
 800747a:	4640      	mov	r0, r8
 800747c:	4b9c      	ldr	r3, [pc, #624]	; (80076f0 <_printf_float+0x2cc>)
 800747e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007480:	f7f9 fac4 	bl	8000a0c <__aeabi_dcmpun>
 8007484:	bb70      	cbnz	r0, 80074e4 <_printf_float+0xc0>
 8007486:	f04f 32ff 	mov.w	r2, #4294967295
 800748a:	4640      	mov	r0, r8
 800748c:	4b98      	ldr	r3, [pc, #608]	; (80076f0 <_printf_float+0x2cc>)
 800748e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007490:	f7f9 fa9e 	bl	80009d0 <__aeabi_dcmple>
 8007494:	bb30      	cbnz	r0, 80074e4 <_printf_float+0xc0>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4640      	mov	r0, r8
 800749c:	4651      	mov	r1, sl
 800749e:	f7f9 fa8d 	bl	80009bc <__aeabi_dcmplt>
 80074a2:	b110      	cbz	r0, 80074aa <_printf_float+0x86>
 80074a4:	232d      	movs	r3, #45	; 0x2d
 80074a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074aa:	4b92      	ldr	r3, [pc, #584]	; (80076f4 <_printf_float+0x2d0>)
 80074ac:	4892      	ldr	r0, [pc, #584]	; (80076f8 <_printf_float+0x2d4>)
 80074ae:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80074b2:	bf94      	ite	ls
 80074b4:	4698      	movls	r8, r3
 80074b6:	4680      	movhi	r8, r0
 80074b8:	2303      	movs	r3, #3
 80074ba:	f04f 0a00 	mov.w	sl, #0
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	f02b 0304 	bic.w	r3, fp, #4
 80074c4:	6023      	str	r3, [r4, #0]
 80074c6:	4633      	mov	r3, r6
 80074c8:	4621      	mov	r1, r4
 80074ca:	4628      	mov	r0, r5
 80074cc:	9700      	str	r7, [sp, #0]
 80074ce:	aa0f      	add	r2, sp, #60	; 0x3c
 80074d0:	f000 f9d4 	bl	800787c <_printf_common>
 80074d4:	3001      	adds	r0, #1
 80074d6:	f040 8090 	bne.w	80075fa <_printf_float+0x1d6>
 80074da:	f04f 30ff 	mov.w	r0, #4294967295
 80074de:	b011      	add	sp, #68	; 0x44
 80074e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e4:	4642      	mov	r2, r8
 80074e6:	4653      	mov	r3, sl
 80074e8:	4640      	mov	r0, r8
 80074ea:	4651      	mov	r1, sl
 80074ec:	f7f9 fa8e 	bl	8000a0c <__aeabi_dcmpun>
 80074f0:	b148      	cbz	r0, 8007506 <_printf_float+0xe2>
 80074f2:	f1ba 0f00 	cmp.w	sl, #0
 80074f6:	bfb8      	it	lt
 80074f8:	232d      	movlt	r3, #45	; 0x2d
 80074fa:	4880      	ldr	r0, [pc, #512]	; (80076fc <_printf_float+0x2d8>)
 80074fc:	bfb8      	it	lt
 80074fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007502:	4b7f      	ldr	r3, [pc, #508]	; (8007700 <_printf_float+0x2dc>)
 8007504:	e7d3      	b.n	80074ae <_printf_float+0x8a>
 8007506:	6863      	ldr	r3, [r4, #4]
 8007508:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800750c:	1c5a      	adds	r2, r3, #1
 800750e:	d142      	bne.n	8007596 <_printf_float+0x172>
 8007510:	2306      	movs	r3, #6
 8007512:	6063      	str	r3, [r4, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	9206      	str	r2, [sp, #24]
 8007518:	aa0e      	add	r2, sp, #56	; 0x38
 800751a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800751e:	aa0d      	add	r2, sp, #52	; 0x34
 8007520:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8007524:	9203      	str	r2, [sp, #12]
 8007526:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800752a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800752e:	6023      	str	r3, [r4, #0]
 8007530:	6863      	ldr	r3, [r4, #4]
 8007532:	4642      	mov	r2, r8
 8007534:	9300      	str	r3, [sp, #0]
 8007536:	4628      	mov	r0, r5
 8007538:	4653      	mov	r3, sl
 800753a:	910b      	str	r1, [sp, #44]	; 0x2c
 800753c:	f7ff fed4 	bl	80072e8 <__cvt>
 8007540:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007542:	4680      	mov	r8, r0
 8007544:	2947      	cmp	r1, #71	; 0x47
 8007546:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007548:	d108      	bne.n	800755c <_printf_float+0x138>
 800754a:	1cc8      	adds	r0, r1, #3
 800754c:	db02      	blt.n	8007554 <_printf_float+0x130>
 800754e:	6863      	ldr	r3, [r4, #4]
 8007550:	4299      	cmp	r1, r3
 8007552:	dd40      	ble.n	80075d6 <_printf_float+0x1b2>
 8007554:	f1a9 0902 	sub.w	r9, r9, #2
 8007558:	fa5f f989 	uxtb.w	r9, r9
 800755c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007560:	d81f      	bhi.n	80075a2 <_printf_float+0x17e>
 8007562:	464a      	mov	r2, r9
 8007564:	3901      	subs	r1, #1
 8007566:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800756a:	910d      	str	r1, [sp, #52]	; 0x34
 800756c:	f7ff ff1b 	bl	80073a6 <__exponent>
 8007570:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007572:	4682      	mov	sl, r0
 8007574:	1813      	adds	r3, r2, r0
 8007576:	2a01      	cmp	r2, #1
 8007578:	6123      	str	r3, [r4, #16]
 800757a:	dc02      	bgt.n	8007582 <_printf_float+0x15e>
 800757c:	6822      	ldr	r2, [r4, #0]
 800757e:	07d2      	lsls	r2, r2, #31
 8007580:	d501      	bpl.n	8007586 <_printf_float+0x162>
 8007582:	3301      	adds	r3, #1
 8007584:	6123      	str	r3, [r4, #16]
 8007586:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800758a:	2b00      	cmp	r3, #0
 800758c:	d09b      	beq.n	80074c6 <_printf_float+0xa2>
 800758e:	232d      	movs	r3, #45	; 0x2d
 8007590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007594:	e797      	b.n	80074c6 <_printf_float+0xa2>
 8007596:	2947      	cmp	r1, #71	; 0x47
 8007598:	d1bc      	bne.n	8007514 <_printf_float+0xf0>
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1ba      	bne.n	8007514 <_printf_float+0xf0>
 800759e:	2301      	movs	r3, #1
 80075a0:	e7b7      	b.n	8007512 <_printf_float+0xee>
 80075a2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80075a6:	d118      	bne.n	80075da <_printf_float+0x1b6>
 80075a8:	2900      	cmp	r1, #0
 80075aa:	6863      	ldr	r3, [r4, #4]
 80075ac:	dd0b      	ble.n	80075c6 <_printf_float+0x1a2>
 80075ae:	6121      	str	r1, [r4, #16]
 80075b0:	b913      	cbnz	r3, 80075b8 <_printf_float+0x194>
 80075b2:	6822      	ldr	r2, [r4, #0]
 80075b4:	07d0      	lsls	r0, r2, #31
 80075b6:	d502      	bpl.n	80075be <_printf_float+0x19a>
 80075b8:	3301      	adds	r3, #1
 80075ba:	440b      	add	r3, r1
 80075bc:	6123      	str	r3, [r4, #16]
 80075be:	f04f 0a00 	mov.w	sl, #0
 80075c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80075c4:	e7df      	b.n	8007586 <_printf_float+0x162>
 80075c6:	b913      	cbnz	r3, 80075ce <_printf_float+0x1aa>
 80075c8:	6822      	ldr	r2, [r4, #0]
 80075ca:	07d2      	lsls	r2, r2, #31
 80075cc:	d501      	bpl.n	80075d2 <_printf_float+0x1ae>
 80075ce:	3302      	adds	r3, #2
 80075d0:	e7f4      	b.n	80075bc <_printf_float+0x198>
 80075d2:	2301      	movs	r3, #1
 80075d4:	e7f2      	b.n	80075bc <_printf_float+0x198>
 80075d6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80075da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80075dc:	4299      	cmp	r1, r3
 80075de:	db05      	blt.n	80075ec <_printf_float+0x1c8>
 80075e0:	6823      	ldr	r3, [r4, #0]
 80075e2:	6121      	str	r1, [r4, #16]
 80075e4:	07d8      	lsls	r0, r3, #31
 80075e6:	d5ea      	bpl.n	80075be <_printf_float+0x19a>
 80075e8:	1c4b      	adds	r3, r1, #1
 80075ea:	e7e7      	b.n	80075bc <_printf_float+0x198>
 80075ec:	2900      	cmp	r1, #0
 80075ee:	bfcc      	ite	gt
 80075f0:	2201      	movgt	r2, #1
 80075f2:	f1c1 0202 	rsble	r2, r1, #2
 80075f6:	4413      	add	r3, r2
 80075f8:	e7e0      	b.n	80075bc <_printf_float+0x198>
 80075fa:	6823      	ldr	r3, [r4, #0]
 80075fc:	055a      	lsls	r2, r3, #21
 80075fe:	d407      	bmi.n	8007610 <_printf_float+0x1ec>
 8007600:	6923      	ldr	r3, [r4, #16]
 8007602:	4642      	mov	r2, r8
 8007604:	4631      	mov	r1, r6
 8007606:	4628      	mov	r0, r5
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	d12b      	bne.n	8007666 <_printf_float+0x242>
 800760e:	e764      	b.n	80074da <_printf_float+0xb6>
 8007610:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8007614:	f240 80dd 	bls.w	80077d2 <_printf_float+0x3ae>
 8007618:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800761c:	2200      	movs	r2, #0
 800761e:	2300      	movs	r3, #0
 8007620:	f7f9 f9c2 	bl	80009a8 <__aeabi_dcmpeq>
 8007624:	2800      	cmp	r0, #0
 8007626:	d033      	beq.n	8007690 <_printf_float+0x26c>
 8007628:	2301      	movs	r3, #1
 800762a:	4631      	mov	r1, r6
 800762c:	4628      	mov	r0, r5
 800762e:	4a35      	ldr	r2, [pc, #212]	; (8007704 <_printf_float+0x2e0>)
 8007630:	47b8      	blx	r7
 8007632:	3001      	adds	r0, #1
 8007634:	f43f af51 	beq.w	80074da <_printf_float+0xb6>
 8007638:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800763c:	429a      	cmp	r2, r3
 800763e:	db02      	blt.n	8007646 <_printf_float+0x222>
 8007640:	6823      	ldr	r3, [r4, #0]
 8007642:	07d8      	lsls	r0, r3, #31
 8007644:	d50f      	bpl.n	8007666 <_printf_float+0x242>
 8007646:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	47b8      	blx	r7
 8007650:	3001      	adds	r0, #1
 8007652:	f43f af42 	beq.w	80074da <_printf_float+0xb6>
 8007656:	f04f 0800 	mov.w	r8, #0
 800765a:	f104 091a 	add.w	r9, r4, #26
 800765e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007660:	3b01      	subs	r3, #1
 8007662:	4543      	cmp	r3, r8
 8007664:	dc09      	bgt.n	800767a <_printf_float+0x256>
 8007666:	6823      	ldr	r3, [r4, #0]
 8007668:	079b      	lsls	r3, r3, #30
 800766a:	f100 8102 	bmi.w	8007872 <_printf_float+0x44e>
 800766e:	68e0      	ldr	r0, [r4, #12]
 8007670:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007672:	4298      	cmp	r0, r3
 8007674:	bfb8      	it	lt
 8007676:	4618      	movlt	r0, r3
 8007678:	e731      	b.n	80074de <_printf_float+0xba>
 800767a:	2301      	movs	r3, #1
 800767c:	464a      	mov	r2, r9
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	f43f af28 	beq.w	80074da <_printf_float+0xb6>
 800768a:	f108 0801 	add.w	r8, r8, #1
 800768e:	e7e6      	b.n	800765e <_printf_float+0x23a>
 8007690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007692:	2b00      	cmp	r3, #0
 8007694:	dc38      	bgt.n	8007708 <_printf_float+0x2e4>
 8007696:	2301      	movs	r3, #1
 8007698:	4631      	mov	r1, r6
 800769a:	4628      	mov	r0, r5
 800769c:	4a19      	ldr	r2, [pc, #100]	; (8007704 <_printf_float+0x2e0>)
 800769e:	47b8      	blx	r7
 80076a0:	3001      	adds	r0, #1
 80076a2:	f43f af1a 	beq.w	80074da <_printf_float+0xb6>
 80076a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80076aa:	4313      	orrs	r3, r2
 80076ac:	d102      	bne.n	80076b4 <_printf_float+0x290>
 80076ae:	6823      	ldr	r3, [r4, #0]
 80076b0:	07d9      	lsls	r1, r3, #31
 80076b2:	d5d8      	bpl.n	8007666 <_printf_float+0x242>
 80076b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80076b8:	4631      	mov	r1, r6
 80076ba:	4628      	mov	r0, r5
 80076bc:	47b8      	blx	r7
 80076be:	3001      	adds	r0, #1
 80076c0:	f43f af0b 	beq.w	80074da <_printf_float+0xb6>
 80076c4:	f04f 0900 	mov.w	r9, #0
 80076c8:	f104 0a1a 	add.w	sl, r4, #26
 80076cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076ce:	425b      	negs	r3, r3
 80076d0:	454b      	cmp	r3, r9
 80076d2:	dc01      	bgt.n	80076d8 <_printf_float+0x2b4>
 80076d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d6:	e794      	b.n	8007602 <_printf_float+0x1de>
 80076d8:	2301      	movs	r3, #1
 80076da:	4652      	mov	r2, sl
 80076dc:	4631      	mov	r1, r6
 80076de:	4628      	mov	r0, r5
 80076e0:	47b8      	blx	r7
 80076e2:	3001      	adds	r0, #1
 80076e4:	f43f aef9 	beq.w	80074da <_printf_float+0xb6>
 80076e8:	f109 0901 	add.w	r9, r9, #1
 80076ec:	e7ee      	b.n	80076cc <_printf_float+0x2a8>
 80076ee:	bf00      	nop
 80076f0:	7fefffff 	.word	0x7fefffff
 80076f4:	08009c28 	.word	0x08009c28
 80076f8:	08009c2c 	.word	0x08009c2c
 80076fc:	08009c34 	.word	0x08009c34
 8007700:	08009c30 	.word	0x08009c30
 8007704:	08009c38 	.word	0x08009c38
 8007708:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800770a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800770c:	429a      	cmp	r2, r3
 800770e:	bfa8      	it	ge
 8007710:	461a      	movge	r2, r3
 8007712:	2a00      	cmp	r2, #0
 8007714:	4691      	mov	r9, r2
 8007716:	dc37      	bgt.n	8007788 <_printf_float+0x364>
 8007718:	f04f 0b00 	mov.w	fp, #0
 800771c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007720:	f104 021a 	add.w	r2, r4, #26
 8007724:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007728:	ebaa 0309 	sub.w	r3, sl, r9
 800772c:	455b      	cmp	r3, fp
 800772e:	dc33      	bgt.n	8007798 <_printf_float+0x374>
 8007730:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007734:	429a      	cmp	r2, r3
 8007736:	db3b      	blt.n	80077b0 <_printf_float+0x38c>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07da      	lsls	r2, r3, #31
 800773c:	d438      	bmi.n	80077b0 <_printf_float+0x38c>
 800773e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007740:	990d      	ldr	r1, [sp, #52]	; 0x34
 8007742:	eba3 020a 	sub.w	r2, r3, sl
 8007746:	eba3 0901 	sub.w	r9, r3, r1
 800774a:	4591      	cmp	r9, r2
 800774c:	bfa8      	it	ge
 800774e:	4691      	movge	r9, r2
 8007750:	f1b9 0f00 	cmp.w	r9, #0
 8007754:	dc34      	bgt.n	80077c0 <_printf_float+0x39c>
 8007756:	f04f 0800 	mov.w	r8, #0
 800775a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800775e:	f104 0a1a 	add.w	sl, r4, #26
 8007762:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8007766:	1a9b      	subs	r3, r3, r2
 8007768:	eba3 0309 	sub.w	r3, r3, r9
 800776c:	4543      	cmp	r3, r8
 800776e:	f77f af7a 	ble.w	8007666 <_printf_float+0x242>
 8007772:	2301      	movs	r3, #1
 8007774:	4652      	mov	r2, sl
 8007776:	4631      	mov	r1, r6
 8007778:	4628      	mov	r0, r5
 800777a:	47b8      	blx	r7
 800777c:	3001      	adds	r0, #1
 800777e:	f43f aeac 	beq.w	80074da <_printf_float+0xb6>
 8007782:	f108 0801 	add.w	r8, r8, #1
 8007786:	e7ec      	b.n	8007762 <_printf_float+0x33e>
 8007788:	4613      	mov	r3, r2
 800778a:	4631      	mov	r1, r6
 800778c:	4642      	mov	r2, r8
 800778e:	4628      	mov	r0, r5
 8007790:	47b8      	blx	r7
 8007792:	3001      	adds	r0, #1
 8007794:	d1c0      	bne.n	8007718 <_printf_float+0x2f4>
 8007796:	e6a0      	b.n	80074da <_printf_float+0xb6>
 8007798:	2301      	movs	r3, #1
 800779a:	4631      	mov	r1, r6
 800779c:	4628      	mov	r0, r5
 800779e:	920b      	str	r2, [sp, #44]	; 0x2c
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f ae99 	beq.w	80074da <_printf_float+0xb6>
 80077a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80077aa:	f10b 0b01 	add.w	fp, fp, #1
 80077ae:	e7b9      	b.n	8007724 <_printf_float+0x300>
 80077b0:	4631      	mov	r1, r6
 80077b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	d1bf      	bne.n	800773e <_printf_float+0x31a>
 80077be:	e68c      	b.n	80074da <_printf_float+0xb6>
 80077c0:	464b      	mov	r3, r9
 80077c2:	4631      	mov	r1, r6
 80077c4:	4628      	mov	r0, r5
 80077c6:	eb08 020a 	add.w	r2, r8, sl
 80077ca:	47b8      	blx	r7
 80077cc:	3001      	adds	r0, #1
 80077ce:	d1c2      	bne.n	8007756 <_printf_float+0x332>
 80077d0:	e683      	b.n	80074da <_printf_float+0xb6>
 80077d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80077d4:	2a01      	cmp	r2, #1
 80077d6:	dc01      	bgt.n	80077dc <_printf_float+0x3b8>
 80077d8:	07db      	lsls	r3, r3, #31
 80077da:	d537      	bpl.n	800784c <_printf_float+0x428>
 80077dc:	2301      	movs	r3, #1
 80077de:	4642      	mov	r2, r8
 80077e0:	4631      	mov	r1, r6
 80077e2:	4628      	mov	r0, r5
 80077e4:	47b8      	blx	r7
 80077e6:	3001      	adds	r0, #1
 80077e8:	f43f ae77 	beq.w	80074da <_printf_float+0xb6>
 80077ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f ae6f 	beq.w	80074da <_printf_float+0xb6>
 80077fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007800:	2200      	movs	r2, #0
 8007802:	2300      	movs	r3, #0
 8007804:	f7f9 f8d0 	bl	80009a8 <__aeabi_dcmpeq>
 8007808:	b9d8      	cbnz	r0, 8007842 <_printf_float+0x41e>
 800780a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800780c:	f108 0201 	add.w	r2, r8, #1
 8007810:	3b01      	subs	r3, #1
 8007812:	4631      	mov	r1, r6
 8007814:	4628      	mov	r0, r5
 8007816:	47b8      	blx	r7
 8007818:	3001      	adds	r0, #1
 800781a:	d10e      	bne.n	800783a <_printf_float+0x416>
 800781c:	e65d      	b.n	80074da <_printf_float+0xb6>
 800781e:	2301      	movs	r3, #1
 8007820:	464a      	mov	r2, r9
 8007822:	4631      	mov	r1, r6
 8007824:	4628      	mov	r0, r5
 8007826:	47b8      	blx	r7
 8007828:	3001      	adds	r0, #1
 800782a:	f43f ae56 	beq.w	80074da <_printf_float+0xb6>
 800782e:	f108 0801 	add.w	r8, r8, #1
 8007832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007834:	3b01      	subs	r3, #1
 8007836:	4543      	cmp	r3, r8
 8007838:	dcf1      	bgt.n	800781e <_printf_float+0x3fa>
 800783a:	4653      	mov	r3, sl
 800783c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007840:	e6e0      	b.n	8007604 <_printf_float+0x1e0>
 8007842:	f04f 0800 	mov.w	r8, #0
 8007846:	f104 091a 	add.w	r9, r4, #26
 800784a:	e7f2      	b.n	8007832 <_printf_float+0x40e>
 800784c:	2301      	movs	r3, #1
 800784e:	4642      	mov	r2, r8
 8007850:	e7df      	b.n	8007812 <_printf_float+0x3ee>
 8007852:	2301      	movs	r3, #1
 8007854:	464a      	mov	r2, r9
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	f43f ae3c 	beq.w	80074da <_printf_float+0xb6>
 8007862:	f108 0801 	add.w	r8, r8, #1
 8007866:	68e3      	ldr	r3, [r4, #12]
 8007868:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800786a:	1a5b      	subs	r3, r3, r1
 800786c:	4543      	cmp	r3, r8
 800786e:	dcf0      	bgt.n	8007852 <_printf_float+0x42e>
 8007870:	e6fd      	b.n	800766e <_printf_float+0x24a>
 8007872:	f04f 0800 	mov.w	r8, #0
 8007876:	f104 0919 	add.w	r9, r4, #25
 800787a:	e7f4      	b.n	8007866 <_printf_float+0x442>

0800787c <_printf_common>:
 800787c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007880:	4616      	mov	r6, r2
 8007882:	4699      	mov	r9, r3
 8007884:	688a      	ldr	r2, [r1, #8]
 8007886:	690b      	ldr	r3, [r1, #16]
 8007888:	4607      	mov	r7, r0
 800788a:	4293      	cmp	r3, r2
 800788c:	bfb8      	it	lt
 800788e:	4613      	movlt	r3, r2
 8007890:	6033      	str	r3, [r6, #0]
 8007892:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007896:	460c      	mov	r4, r1
 8007898:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800789c:	b10a      	cbz	r2, 80078a2 <_printf_common+0x26>
 800789e:	3301      	adds	r3, #1
 80078a0:	6033      	str	r3, [r6, #0]
 80078a2:	6823      	ldr	r3, [r4, #0]
 80078a4:	0699      	lsls	r1, r3, #26
 80078a6:	bf42      	ittt	mi
 80078a8:	6833      	ldrmi	r3, [r6, #0]
 80078aa:	3302      	addmi	r3, #2
 80078ac:	6033      	strmi	r3, [r6, #0]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	f015 0506 	ands.w	r5, r5, #6
 80078b4:	d106      	bne.n	80078c4 <_printf_common+0x48>
 80078b6:	f104 0a19 	add.w	sl, r4, #25
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	6832      	ldr	r2, [r6, #0]
 80078be:	1a9b      	subs	r3, r3, r2
 80078c0:	42ab      	cmp	r3, r5
 80078c2:	dc28      	bgt.n	8007916 <_printf_common+0x9a>
 80078c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80078c8:	1e13      	subs	r3, r2, #0
 80078ca:	6822      	ldr	r2, [r4, #0]
 80078cc:	bf18      	it	ne
 80078ce:	2301      	movne	r3, #1
 80078d0:	0692      	lsls	r2, r2, #26
 80078d2:	d42d      	bmi.n	8007930 <_printf_common+0xb4>
 80078d4:	4649      	mov	r1, r9
 80078d6:	4638      	mov	r0, r7
 80078d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80078dc:	47c0      	blx	r8
 80078de:	3001      	adds	r0, #1
 80078e0:	d020      	beq.n	8007924 <_printf_common+0xa8>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	68e5      	ldr	r5, [r4, #12]
 80078e6:	f003 0306 	and.w	r3, r3, #6
 80078ea:	2b04      	cmp	r3, #4
 80078ec:	bf18      	it	ne
 80078ee:	2500      	movne	r5, #0
 80078f0:	6832      	ldr	r2, [r6, #0]
 80078f2:	f04f 0600 	mov.w	r6, #0
 80078f6:	68a3      	ldr	r3, [r4, #8]
 80078f8:	bf08      	it	eq
 80078fa:	1aad      	subeq	r5, r5, r2
 80078fc:	6922      	ldr	r2, [r4, #16]
 80078fe:	bf08      	it	eq
 8007900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007904:	4293      	cmp	r3, r2
 8007906:	bfc4      	itt	gt
 8007908:	1a9b      	subgt	r3, r3, r2
 800790a:	18ed      	addgt	r5, r5, r3
 800790c:	341a      	adds	r4, #26
 800790e:	42b5      	cmp	r5, r6
 8007910:	d11a      	bne.n	8007948 <_printf_common+0xcc>
 8007912:	2000      	movs	r0, #0
 8007914:	e008      	b.n	8007928 <_printf_common+0xac>
 8007916:	2301      	movs	r3, #1
 8007918:	4652      	mov	r2, sl
 800791a:	4649      	mov	r1, r9
 800791c:	4638      	mov	r0, r7
 800791e:	47c0      	blx	r8
 8007920:	3001      	adds	r0, #1
 8007922:	d103      	bne.n	800792c <_printf_common+0xb0>
 8007924:	f04f 30ff 	mov.w	r0, #4294967295
 8007928:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800792c:	3501      	adds	r5, #1
 800792e:	e7c4      	b.n	80078ba <_printf_common+0x3e>
 8007930:	2030      	movs	r0, #48	; 0x30
 8007932:	18e1      	adds	r1, r4, r3
 8007934:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007938:	1c5a      	adds	r2, r3, #1
 800793a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800793e:	4422      	add	r2, r4
 8007940:	3302      	adds	r3, #2
 8007942:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007946:	e7c5      	b.n	80078d4 <_printf_common+0x58>
 8007948:	2301      	movs	r3, #1
 800794a:	4622      	mov	r2, r4
 800794c:	4649      	mov	r1, r9
 800794e:	4638      	mov	r0, r7
 8007950:	47c0      	blx	r8
 8007952:	3001      	adds	r0, #1
 8007954:	d0e6      	beq.n	8007924 <_printf_common+0xa8>
 8007956:	3601      	adds	r6, #1
 8007958:	e7d9      	b.n	800790e <_printf_common+0x92>
	...

0800795c <_printf_i>:
 800795c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007960:	7e0f      	ldrb	r7, [r1, #24]
 8007962:	4691      	mov	r9, r2
 8007964:	2f78      	cmp	r7, #120	; 0x78
 8007966:	4680      	mov	r8, r0
 8007968:	460c      	mov	r4, r1
 800796a:	469a      	mov	sl, r3
 800796c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800796e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007972:	d807      	bhi.n	8007984 <_printf_i+0x28>
 8007974:	2f62      	cmp	r7, #98	; 0x62
 8007976:	d80a      	bhi.n	800798e <_printf_i+0x32>
 8007978:	2f00      	cmp	r7, #0
 800797a:	f000 80d9 	beq.w	8007b30 <_printf_i+0x1d4>
 800797e:	2f58      	cmp	r7, #88	; 0x58
 8007980:	f000 80a4 	beq.w	8007acc <_printf_i+0x170>
 8007984:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007988:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800798c:	e03a      	b.n	8007a04 <_printf_i+0xa8>
 800798e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007992:	2b15      	cmp	r3, #21
 8007994:	d8f6      	bhi.n	8007984 <_printf_i+0x28>
 8007996:	a101      	add	r1, pc, #4	; (adr r1, 800799c <_printf_i+0x40>)
 8007998:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800799c:	080079f5 	.word	0x080079f5
 80079a0:	08007a09 	.word	0x08007a09
 80079a4:	08007985 	.word	0x08007985
 80079a8:	08007985 	.word	0x08007985
 80079ac:	08007985 	.word	0x08007985
 80079b0:	08007985 	.word	0x08007985
 80079b4:	08007a09 	.word	0x08007a09
 80079b8:	08007985 	.word	0x08007985
 80079bc:	08007985 	.word	0x08007985
 80079c0:	08007985 	.word	0x08007985
 80079c4:	08007985 	.word	0x08007985
 80079c8:	08007b17 	.word	0x08007b17
 80079cc:	08007a39 	.word	0x08007a39
 80079d0:	08007af9 	.word	0x08007af9
 80079d4:	08007985 	.word	0x08007985
 80079d8:	08007985 	.word	0x08007985
 80079dc:	08007b39 	.word	0x08007b39
 80079e0:	08007985 	.word	0x08007985
 80079e4:	08007a39 	.word	0x08007a39
 80079e8:	08007985 	.word	0x08007985
 80079ec:	08007985 	.word	0x08007985
 80079f0:	08007b01 	.word	0x08007b01
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	1d1a      	adds	r2, r3, #4
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	602a      	str	r2, [r5, #0]
 80079fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007a04:	2301      	movs	r3, #1
 8007a06:	e0a4      	b.n	8007b52 <_printf_i+0x1f6>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	6829      	ldr	r1, [r5, #0]
 8007a0c:	0606      	lsls	r6, r0, #24
 8007a0e:	f101 0304 	add.w	r3, r1, #4
 8007a12:	d50a      	bpl.n	8007a2a <_printf_i+0xce>
 8007a14:	680e      	ldr	r6, [r1, #0]
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	da03      	bge.n	8007a24 <_printf_i+0xc8>
 8007a1c:	232d      	movs	r3, #45	; 0x2d
 8007a1e:	4276      	negs	r6, r6
 8007a20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a24:	230a      	movs	r3, #10
 8007a26:	485e      	ldr	r0, [pc, #376]	; (8007ba0 <_printf_i+0x244>)
 8007a28:	e019      	b.n	8007a5e <_printf_i+0x102>
 8007a2a:	680e      	ldr	r6, [r1, #0]
 8007a2c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007a30:	602b      	str	r3, [r5, #0]
 8007a32:	bf18      	it	ne
 8007a34:	b236      	sxthne	r6, r6
 8007a36:	e7ef      	b.n	8007a18 <_printf_i+0xbc>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	6820      	ldr	r0, [r4, #0]
 8007a3c:	1d19      	adds	r1, r3, #4
 8007a3e:	6029      	str	r1, [r5, #0]
 8007a40:	0601      	lsls	r1, r0, #24
 8007a42:	d501      	bpl.n	8007a48 <_printf_i+0xec>
 8007a44:	681e      	ldr	r6, [r3, #0]
 8007a46:	e002      	b.n	8007a4e <_printf_i+0xf2>
 8007a48:	0646      	lsls	r6, r0, #25
 8007a4a:	d5fb      	bpl.n	8007a44 <_printf_i+0xe8>
 8007a4c:	881e      	ldrh	r6, [r3, #0]
 8007a4e:	2f6f      	cmp	r7, #111	; 0x6f
 8007a50:	bf0c      	ite	eq
 8007a52:	2308      	moveq	r3, #8
 8007a54:	230a      	movne	r3, #10
 8007a56:	4852      	ldr	r0, [pc, #328]	; (8007ba0 <_printf_i+0x244>)
 8007a58:	2100      	movs	r1, #0
 8007a5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007a5e:	6865      	ldr	r5, [r4, #4]
 8007a60:	2d00      	cmp	r5, #0
 8007a62:	bfa8      	it	ge
 8007a64:	6821      	ldrge	r1, [r4, #0]
 8007a66:	60a5      	str	r5, [r4, #8]
 8007a68:	bfa4      	itt	ge
 8007a6a:	f021 0104 	bicge.w	r1, r1, #4
 8007a6e:	6021      	strge	r1, [r4, #0]
 8007a70:	b90e      	cbnz	r6, 8007a76 <_printf_i+0x11a>
 8007a72:	2d00      	cmp	r5, #0
 8007a74:	d04d      	beq.n	8007b12 <_printf_i+0x1b6>
 8007a76:	4615      	mov	r5, r2
 8007a78:	fbb6 f1f3 	udiv	r1, r6, r3
 8007a7c:	fb03 6711 	mls	r7, r3, r1, r6
 8007a80:	5dc7      	ldrb	r7, [r0, r7]
 8007a82:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007a86:	4637      	mov	r7, r6
 8007a88:	42bb      	cmp	r3, r7
 8007a8a:	460e      	mov	r6, r1
 8007a8c:	d9f4      	bls.n	8007a78 <_printf_i+0x11c>
 8007a8e:	2b08      	cmp	r3, #8
 8007a90:	d10b      	bne.n	8007aaa <_printf_i+0x14e>
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	07de      	lsls	r6, r3, #31
 8007a96:	d508      	bpl.n	8007aaa <_printf_i+0x14e>
 8007a98:	6923      	ldr	r3, [r4, #16]
 8007a9a:	6861      	ldr	r1, [r4, #4]
 8007a9c:	4299      	cmp	r1, r3
 8007a9e:	bfde      	ittt	le
 8007aa0:	2330      	movle	r3, #48	; 0x30
 8007aa2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007aa6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007aaa:	1b52      	subs	r2, r2, r5
 8007aac:	6122      	str	r2, [r4, #16]
 8007aae:	464b      	mov	r3, r9
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	f8cd a000 	str.w	sl, [sp]
 8007ab8:	aa03      	add	r2, sp, #12
 8007aba:	f7ff fedf 	bl	800787c <_printf_common>
 8007abe:	3001      	adds	r0, #1
 8007ac0:	d14c      	bne.n	8007b5c <_printf_i+0x200>
 8007ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ac6:	b004      	add	sp, #16
 8007ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007acc:	4834      	ldr	r0, [pc, #208]	; (8007ba0 <_printf_i+0x244>)
 8007ace:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007ad2:	6829      	ldr	r1, [r5, #0]
 8007ad4:	6823      	ldr	r3, [r4, #0]
 8007ad6:	f851 6b04 	ldr.w	r6, [r1], #4
 8007ada:	6029      	str	r1, [r5, #0]
 8007adc:	061d      	lsls	r5, r3, #24
 8007ade:	d514      	bpl.n	8007b0a <_printf_i+0x1ae>
 8007ae0:	07df      	lsls	r7, r3, #31
 8007ae2:	bf44      	itt	mi
 8007ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8007ae8:	6023      	strmi	r3, [r4, #0]
 8007aea:	b91e      	cbnz	r6, 8007af4 <_printf_i+0x198>
 8007aec:	6823      	ldr	r3, [r4, #0]
 8007aee:	f023 0320 	bic.w	r3, r3, #32
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	2310      	movs	r3, #16
 8007af6:	e7af      	b.n	8007a58 <_printf_i+0xfc>
 8007af8:	6823      	ldr	r3, [r4, #0]
 8007afa:	f043 0320 	orr.w	r3, r3, #32
 8007afe:	6023      	str	r3, [r4, #0]
 8007b00:	2378      	movs	r3, #120	; 0x78
 8007b02:	4828      	ldr	r0, [pc, #160]	; (8007ba4 <_printf_i+0x248>)
 8007b04:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b08:	e7e3      	b.n	8007ad2 <_printf_i+0x176>
 8007b0a:	0659      	lsls	r1, r3, #25
 8007b0c:	bf48      	it	mi
 8007b0e:	b2b6      	uxthmi	r6, r6
 8007b10:	e7e6      	b.n	8007ae0 <_printf_i+0x184>
 8007b12:	4615      	mov	r5, r2
 8007b14:	e7bb      	b.n	8007a8e <_printf_i+0x132>
 8007b16:	682b      	ldr	r3, [r5, #0]
 8007b18:	6826      	ldr	r6, [r4, #0]
 8007b1a:	1d18      	adds	r0, r3, #4
 8007b1c:	6961      	ldr	r1, [r4, #20]
 8007b1e:	6028      	str	r0, [r5, #0]
 8007b20:	0635      	lsls	r5, r6, #24
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	d501      	bpl.n	8007b2a <_printf_i+0x1ce>
 8007b26:	6019      	str	r1, [r3, #0]
 8007b28:	e002      	b.n	8007b30 <_printf_i+0x1d4>
 8007b2a:	0670      	lsls	r0, r6, #25
 8007b2c:	d5fb      	bpl.n	8007b26 <_printf_i+0x1ca>
 8007b2e:	8019      	strh	r1, [r3, #0]
 8007b30:	2300      	movs	r3, #0
 8007b32:	4615      	mov	r5, r2
 8007b34:	6123      	str	r3, [r4, #16]
 8007b36:	e7ba      	b.n	8007aae <_printf_i+0x152>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	2100      	movs	r1, #0
 8007b3c:	1d1a      	adds	r2, r3, #4
 8007b3e:	602a      	str	r2, [r5, #0]
 8007b40:	681d      	ldr	r5, [r3, #0]
 8007b42:	6862      	ldr	r2, [r4, #4]
 8007b44:	4628      	mov	r0, r5
 8007b46:	f001 f865 	bl	8008c14 <memchr>
 8007b4a:	b108      	cbz	r0, 8007b50 <_printf_i+0x1f4>
 8007b4c:	1b40      	subs	r0, r0, r5
 8007b4e:	6060      	str	r0, [r4, #4]
 8007b50:	6863      	ldr	r3, [r4, #4]
 8007b52:	6123      	str	r3, [r4, #16]
 8007b54:	2300      	movs	r3, #0
 8007b56:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b5a:	e7a8      	b.n	8007aae <_printf_i+0x152>
 8007b5c:	462a      	mov	r2, r5
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	47d0      	blx	sl
 8007b66:	3001      	adds	r0, #1
 8007b68:	d0ab      	beq.n	8007ac2 <_printf_i+0x166>
 8007b6a:	6823      	ldr	r3, [r4, #0]
 8007b6c:	079b      	lsls	r3, r3, #30
 8007b6e:	d413      	bmi.n	8007b98 <_printf_i+0x23c>
 8007b70:	68e0      	ldr	r0, [r4, #12]
 8007b72:	9b03      	ldr	r3, [sp, #12]
 8007b74:	4298      	cmp	r0, r3
 8007b76:	bfb8      	it	lt
 8007b78:	4618      	movlt	r0, r3
 8007b7a:	e7a4      	b.n	8007ac6 <_printf_i+0x16a>
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4649      	mov	r1, r9
 8007b82:	4640      	mov	r0, r8
 8007b84:	47d0      	blx	sl
 8007b86:	3001      	adds	r0, #1
 8007b88:	d09b      	beq.n	8007ac2 <_printf_i+0x166>
 8007b8a:	3501      	adds	r5, #1
 8007b8c:	68e3      	ldr	r3, [r4, #12]
 8007b8e:	9903      	ldr	r1, [sp, #12]
 8007b90:	1a5b      	subs	r3, r3, r1
 8007b92:	42ab      	cmp	r3, r5
 8007b94:	dcf2      	bgt.n	8007b7c <_printf_i+0x220>
 8007b96:	e7eb      	b.n	8007b70 <_printf_i+0x214>
 8007b98:	2500      	movs	r5, #0
 8007b9a:	f104 0619 	add.w	r6, r4, #25
 8007b9e:	e7f5      	b.n	8007b8c <_printf_i+0x230>
 8007ba0:	08009c3a 	.word	0x08009c3a
 8007ba4:	08009c4b 	.word	0x08009c4b

08007ba8 <cleanup_glue>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	460c      	mov	r4, r1
 8007bac:	6809      	ldr	r1, [r1, #0]
 8007bae:	4605      	mov	r5, r0
 8007bb0:	b109      	cbz	r1, 8007bb6 <cleanup_glue+0xe>
 8007bb2:	f7ff fff9 	bl	8007ba8 <cleanup_glue>
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	4628      	mov	r0, r5
 8007bba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bbe:	f001 bbd9 	b.w	8009374 <_free_r>
	...

08007bc4 <_reclaim_reent>:
 8007bc4:	4b2c      	ldr	r3, [pc, #176]	; (8007c78 <_reclaim_reent+0xb4>)
 8007bc6:	b570      	push	{r4, r5, r6, lr}
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4283      	cmp	r3, r0
 8007bce:	d051      	beq.n	8007c74 <_reclaim_reent+0xb0>
 8007bd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007bd2:	b143      	cbz	r3, 8007be6 <_reclaim_reent+0x22>
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d14a      	bne.n	8007c70 <_reclaim_reent+0xac>
 8007bda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007bdc:	6819      	ldr	r1, [r3, #0]
 8007bde:	b111      	cbz	r1, 8007be6 <_reclaim_reent+0x22>
 8007be0:	4620      	mov	r0, r4
 8007be2:	f001 fbc7 	bl	8009374 <_free_r>
 8007be6:	6961      	ldr	r1, [r4, #20]
 8007be8:	b111      	cbz	r1, 8007bf0 <_reclaim_reent+0x2c>
 8007bea:	4620      	mov	r0, r4
 8007bec:	f001 fbc2 	bl	8009374 <_free_r>
 8007bf0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007bf2:	b111      	cbz	r1, 8007bfa <_reclaim_reent+0x36>
 8007bf4:	4620      	mov	r0, r4
 8007bf6:	f001 fbbd 	bl	8009374 <_free_r>
 8007bfa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007bfc:	b111      	cbz	r1, 8007c04 <_reclaim_reent+0x40>
 8007bfe:	4620      	mov	r0, r4
 8007c00:	f001 fbb8 	bl	8009374 <_free_r>
 8007c04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007c06:	b111      	cbz	r1, 8007c0e <_reclaim_reent+0x4a>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f001 fbb3 	bl	8009374 <_free_r>
 8007c0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007c10:	b111      	cbz	r1, 8007c18 <_reclaim_reent+0x54>
 8007c12:	4620      	mov	r0, r4
 8007c14:	f001 fbae 	bl	8009374 <_free_r>
 8007c18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007c1a:	b111      	cbz	r1, 8007c22 <_reclaim_reent+0x5e>
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 fba9 	bl	8009374 <_free_r>
 8007c22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007c24:	b111      	cbz	r1, 8007c2c <_reclaim_reent+0x68>
 8007c26:	4620      	mov	r0, r4
 8007c28:	f001 fba4 	bl	8009374 <_free_r>
 8007c2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c2e:	b111      	cbz	r1, 8007c36 <_reclaim_reent+0x72>
 8007c30:	4620      	mov	r0, r4
 8007c32:	f001 fb9f 	bl	8009374 <_free_r>
 8007c36:	69a3      	ldr	r3, [r4, #24]
 8007c38:	b1e3      	cbz	r3, 8007c74 <_reclaim_reent+0xb0>
 8007c3a:	4620      	mov	r0, r4
 8007c3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c3e:	4798      	blx	r3
 8007c40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c42:	b1b9      	cbz	r1, 8007c74 <_reclaim_reent+0xb0>
 8007c44:	4620      	mov	r0, r4
 8007c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c4a:	f7ff bfad 	b.w	8007ba8 <cleanup_glue>
 8007c4e:	5949      	ldr	r1, [r1, r5]
 8007c50:	b941      	cbnz	r1, 8007c64 <_reclaim_reent+0xa0>
 8007c52:	3504      	adds	r5, #4
 8007c54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c56:	2d80      	cmp	r5, #128	; 0x80
 8007c58:	68d9      	ldr	r1, [r3, #12]
 8007c5a:	d1f8      	bne.n	8007c4e <_reclaim_reent+0x8a>
 8007c5c:	4620      	mov	r0, r4
 8007c5e:	f001 fb89 	bl	8009374 <_free_r>
 8007c62:	e7ba      	b.n	8007bda <_reclaim_reent+0x16>
 8007c64:	680e      	ldr	r6, [r1, #0]
 8007c66:	4620      	mov	r0, r4
 8007c68:	f001 fb84 	bl	8009374 <_free_r>
 8007c6c:	4631      	mov	r1, r6
 8007c6e:	e7ef      	b.n	8007c50 <_reclaim_reent+0x8c>
 8007c70:	2500      	movs	r5, #0
 8007c72:	e7ef      	b.n	8007c54 <_reclaim_reent+0x90>
 8007c74:	bd70      	pop	{r4, r5, r6, pc}
 8007c76:	bf00      	nop
 8007c78:	20000010 	.word	0x20000010

08007c7c <_sbrk_r>:
 8007c7c:	b538      	push	{r3, r4, r5, lr}
 8007c7e:	2300      	movs	r3, #0
 8007c80:	4d05      	ldr	r5, [pc, #20]	; (8007c98 <_sbrk_r+0x1c>)
 8007c82:	4604      	mov	r4, r0
 8007c84:	4608      	mov	r0, r1
 8007c86:	602b      	str	r3, [r5, #0]
 8007c88:	f7f9 fd7c 	bl	8001784 <_sbrk>
 8007c8c:	1c43      	adds	r3, r0, #1
 8007c8e:	d102      	bne.n	8007c96 <_sbrk_r+0x1a>
 8007c90:	682b      	ldr	r3, [r5, #0]
 8007c92:	b103      	cbz	r3, 8007c96 <_sbrk_r+0x1a>
 8007c94:	6023      	str	r3, [r4, #0]
 8007c96:	bd38      	pop	{r3, r4, r5, pc}
 8007c98:	20001d4c 	.word	0x20001d4c

08007c9c <__sread>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	f001 fbae 	bl	8009404 <_read_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bfab      	itete	ge
 8007cac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007cae:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb0:	181b      	addge	r3, r3, r0
 8007cb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cb6:	bfac      	ite	ge
 8007cb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cba:	81a3      	strhlt	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__swrite>:
 8007cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	898b      	ldrh	r3, [r1, #12]
 8007cc6:	4605      	mov	r5, r0
 8007cc8:	05db      	lsls	r3, r3, #23
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4616      	mov	r6, r2
 8007cce:	d505      	bpl.n	8007cdc <__swrite+0x1e>
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd8:	f000 ff82 	bl	8008be0 <_lseek_r>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	4632      	mov	r2, r6
 8007ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ce4:	81a3      	strh	r3, [r4, #12]
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	463b      	mov	r3, r7
 8007cea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	f000 b817 	b.w	8007d24 <_write_r>

08007cf6 <__sseek>:
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfe:	f000 ff6f 	bl	8008be0 <_lseek_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	bf15      	itete	ne
 8007d08:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d12:	81a3      	strheq	r3, [r4, #12]
 8007d14:	bf18      	it	ne
 8007d16:	81a3      	strhne	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__sclose>:
 8007d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1e:	f000 b813 	b.w	8007d48 <_close_r>
	...

08007d24 <_write_r>:
 8007d24:	b538      	push	{r3, r4, r5, lr}
 8007d26:	4604      	mov	r4, r0
 8007d28:	4608      	mov	r0, r1
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	4d05      	ldr	r5, [pc, #20]	; (8007d44 <_write_r+0x20>)
 8007d30:	602a      	str	r2, [r5, #0]
 8007d32:	461a      	mov	r2, r3
 8007d34:	f7f9 fcda 	bl	80016ec <_write>
 8007d38:	1c43      	adds	r3, r0, #1
 8007d3a:	d102      	bne.n	8007d42 <_write_r+0x1e>
 8007d3c:	682b      	ldr	r3, [r5, #0]
 8007d3e:	b103      	cbz	r3, 8007d42 <_write_r+0x1e>
 8007d40:	6023      	str	r3, [r4, #0]
 8007d42:	bd38      	pop	{r3, r4, r5, pc}
 8007d44:	20001d4c 	.word	0x20001d4c

08007d48 <_close_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	4d05      	ldr	r5, [pc, #20]	; (8007d64 <_close_r+0x1c>)
 8007d4e:	4604      	mov	r4, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	602b      	str	r3, [r5, #0]
 8007d54:	f7f9 fce6 	bl	8001724 <_close>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_close_r+0x1a>
 8007d5c:	682b      	ldr	r3, [r5, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_close_r+0x1a>
 8007d60:	6023      	str	r3, [r4, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	20001d4c 	.word	0x20001d4c

08007d68 <quorem>:
 8007d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d6c:	6903      	ldr	r3, [r0, #16]
 8007d6e:	690c      	ldr	r4, [r1, #16]
 8007d70:	4607      	mov	r7, r0
 8007d72:	42a3      	cmp	r3, r4
 8007d74:	f2c0 8082 	blt.w	8007e7c <quorem+0x114>
 8007d78:	3c01      	subs	r4, #1
 8007d7a:	f100 0514 	add.w	r5, r0, #20
 8007d7e:	f101 0814 	add.w	r8, r1, #20
 8007d82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007d86:	9301      	str	r3, [sp, #4]
 8007d88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007d8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007d90:	3301      	adds	r3, #1
 8007d92:	429a      	cmp	r2, r3
 8007d94:	fbb2 f6f3 	udiv	r6, r2, r3
 8007d98:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007d9c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007da0:	d331      	bcc.n	8007e06 <quorem+0x9e>
 8007da2:	f04f 0e00 	mov.w	lr, #0
 8007da6:	4640      	mov	r0, r8
 8007da8:	46ac      	mov	ip, r5
 8007daa:	46f2      	mov	sl, lr
 8007dac:	f850 2b04 	ldr.w	r2, [r0], #4
 8007db0:	b293      	uxth	r3, r2
 8007db2:	fb06 e303 	mla	r3, r6, r3, lr
 8007db6:	0c12      	lsrs	r2, r2, #16
 8007db8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007dbc:	b29b      	uxth	r3, r3
 8007dbe:	fb06 e202 	mla	r2, r6, r2, lr
 8007dc2:	ebaa 0303 	sub.w	r3, sl, r3
 8007dc6:	f8dc a000 	ldr.w	sl, [ip]
 8007dca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007dce:	fa1f fa8a 	uxth.w	sl, sl
 8007dd2:	4453      	add	r3, sl
 8007dd4:	f8dc a000 	ldr.w	sl, [ip]
 8007dd8:	b292      	uxth	r2, r2
 8007dda:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007dde:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007de8:	4581      	cmp	r9, r0
 8007dea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007dee:	f84c 3b04 	str.w	r3, [ip], #4
 8007df2:	d2db      	bcs.n	8007dac <quorem+0x44>
 8007df4:	f855 300b 	ldr.w	r3, [r5, fp]
 8007df8:	b92b      	cbnz	r3, 8007e06 <quorem+0x9e>
 8007dfa:	9b01      	ldr	r3, [sp, #4]
 8007dfc:	3b04      	subs	r3, #4
 8007dfe:	429d      	cmp	r5, r3
 8007e00:	461a      	mov	r2, r3
 8007e02:	d32f      	bcc.n	8007e64 <quorem+0xfc>
 8007e04:	613c      	str	r4, [r7, #16]
 8007e06:	4638      	mov	r0, r7
 8007e08:	f001 f99c 	bl	8009144 <__mcmp>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	db25      	blt.n	8007e5c <quorem+0xf4>
 8007e10:	4628      	mov	r0, r5
 8007e12:	f04f 0c00 	mov.w	ip, #0
 8007e16:	3601      	adds	r6, #1
 8007e18:	f858 1b04 	ldr.w	r1, [r8], #4
 8007e1c:	f8d0 e000 	ldr.w	lr, [r0]
 8007e20:	b28b      	uxth	r3, r1
 8007e22:	ebac 0303 	sub.w	r3, ip, r3
 8007e26:	fa1f f28e 	uxth.w	r2, lr
 8007e2a:	4413      	add	r3, r2
 8007e2c:	0c0a      	lsrs	r2, r1, #16
 8007e2e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007e32:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007e36:	b29b      	uxth	r3, r3
 8007e38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007e3c:	45c1      	cmp	r9, r8
 8007e3e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007e42:	f840 3b04 	str.w	r3, [r0], #4
 8007e46:	d2e7      	bcs.n	8007e18 <quorem+0xb0>
 8007e48:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007e4c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007e50:	b922      	cbnz	r2, 8007e5c <quorem+0xf4>
 8007e52:	3b04      	subs	r3, #4
 8007e54:	429d      	cmp	r5, r3
 8007e56:	461a      	mov	r2, r3
 8007e58:	d30a      	bcc.n	8007e70 <quorem+0x108>
 8007e5a:	613c      	str	r4, [r7, #16]
 8007e5c:	4630      	mov	r0, r6
 8007e5e:	b003      	add	sp, #12
 8007e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e64:	6812      	ldr	r2, [r2, #0]
 8007e66:	3b04      	subs	r3, #4
 8007e68:	2a00      	cmp	r2, #0
 8007e6a:	d1cb      	bne.n	8007e04 <quorem+0x9c>
 8007e6c:	3c01      	subs	r4, #1
 8007e6e:	e7c6      	b.n	8007dfe <quorem+0x96>
 8007e70:	6812      	ldr	r2, [r2, #0]
 8007e72:	3b04      	subs	r3, #4
 8007e74:	2a00      	cmp	r2, #0
 8007e76:	d1f0      	bne.n	8007e5a <quorem+0xf2>
 8007e78:	3c01      	subs	r4, #1
 8007e7a:	e7eb      	b.n	8007e54 <quorem+0xec>
 8007e7c:	2000      	movs	r0, #0
 8007e7e:	e7ee      	b.n	8007e5e <quorem+0xf6>

08007e80 <_dtoa_r>:
 8007e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e84:	4616      	mov	r6, r2
 8007e86:	461f      	mov	r7, r3
 8007e88:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007e8a:	b099      	sub	sp, #100	; 0x64
 8007e8c:	4605      	mov	r5, r0
 8007e8e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8007e92:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8007e96:	b974      	cbnz	r4, 8007eb6 <_dtoa_r+0x36>
 8007e98:	2010      	movs	r0, #16
 8007e9a:	f000 feb3 	bl	8008c04 <malloc>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	6268      	str	r0, [r5, #36]	; 0x24
 8007ea2:	b920      	cbnz	r0, 8007eae <_dtoa_r+0x2e>
 8007ea4:	21ea      	movs	r1, #234	; 0xea
 8007ea6:	4ba8      	ldr	r3, [pc, #672]	; (8008148 <_dtoa_r+0x2c8>)
 8007ea8:	48a8      	ldr	r0, [pc, #672]	; (800814c <_dtoa_r+0x2cc>)
 8007eaa:	f001 fabd 	bl	8009428 <__assert_func>
 8007eae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007eb2:	6004      	str	r4, [r0, #0]
 8007eb4:	60c4      	str	r4, [r0, #12]
 8007eb6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007eb8:	6819      	ldr	r1, [r3, #0]
 8007eba:	b151      	cbz	r1, 8007ed2 <_dtoa_r+0x52>
 8007ebc:	685a      	ldr	r2, [r3, #4]
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	4093      	lsls	r3, r2
 8007ec2:	604a      	str	r2, [r1, #4]
 8007ec4:	608b      	str	r3, [r1, #8]
 8007ec6:	4628      	mov	r0, r5
 8007ec8:	f000 fefe 	bl	8008cc8 <_Bfree>
 8007ecc:	2200      	movs	r2, #0
 8007ece:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ed0:	601a      	str	r2, [r3, #0]
 8007ed2:	1e3b      	subs	r3, r7, #0
 8007ed4:	bfaf      	iteee	ge
 8007ed6:	2300      	movge	r3, #0
 8007ed8:	2201      	movlt	r2, #1
 8007eda:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007ede:	9305      	strlt	r3, [sp, #20]
 8007ee0:	bfa8      	it	ge
 8007ee2:	f8c8 3000 	strge.w	r3, [r8]
 8007ee6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8007eea:	4b99      	ldr	r3, [pc, #612]	; (8008150 <_dtoa_r+0x2d0>)
 8007eec:	bfb8      	it	lt
 8007eee:	f8c8 2000 	strlt.w	r2, [r8]
 8007ef2:	ea33 0309 	bics.w	r3, r3, r9
 8007ef6:	d119      	bne.n	8007f2c <_dtoa_r+0xac>
 8007ef8:	f242 730f 	movw	r3, #9999	; 0x270f
 8007efc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f04:	4333      	orrs	r3, r6
 8007f06:	f000 857f 	beq.w	8008a08 <_dtoa_r+0xb88>
 8007f0a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f0c:	b953      	cbnz	r3, 8007f24 <_dtoa_r+0xa4>
 8007f0e:	4b91      	ldr	r3, [pc, #580]	; (8008154 <_dtoa_r+0x2d4>)
 8007f10:	e022      	b.n	8007f58 <_dtoa_r+0xd8>
 8007f12:	4b91      	ldr	r3, [pc, #580]	; (8008158 <_dtoa_r+0x2d8>)
 8007f14:	9303      	str	r3, [sp, #12]
 8007f16:	3308      	adds	r3, #8
 8007f18:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007f1a:	6013      	str	r3, [r2, #0]
 8007f1c:	9803      	ldr	r0, [sp, #12]
 8007f1e:	b019      	add	sp, #100	; 0x64
 8007f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f24:	4b8b      	ldr	r3, [pc, #556]	; (8008154 <_dtoa_r+0x2d4>)
 8007f26:	9303      	str	r3, [sp, #12]
 8007f28:	3303      	adds	r3, #3
 8007f2a:	e7f5      	b.n	8007f18 <_dtoa_r+0x98>
 8007f2c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8007f30:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8007f34:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f7f8 fd34 	bl	80009a8 <__aeabi_dcmpeq>
 8007f40:	4680      	mov	r8, r0
 8007f42:	b158      	cbz	r0, 8007f5c <_dtoa_r+0xdc>
 8007f44:	2301      	movs	r3, #1
 8007f46:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	f000 8558 	beq.w	8008a02 <_dtoa_r+0xb82>
 8007f52:	4882      	ldr	r0, [pc, #520]	; (800815c <_dtoa_r+0x2dc>)
 8007f54:	6018      	str	r0, [r3, #0]
 8007f56:	1e43      	subs	r3, r0, #1
 8007f58:	9303      	str	r3, [sp, #12]
 8007f5a:	e7df      	b.n	8007f1c <_dtoa_r+0x9c>
 8007f5c:	ab16      	add	r3, sp, #88	; 0x58
 8007f5e:	9301      	str	r3, [sp, #4]
 8007f60:	ab17      	add	r3, sp, #92	; 0x5c
 8007f62:	9300      	str	r3, [sp, #0]
 8007f64:	4628      	mov	r0, r5
 8007f66:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007f6a:	f001 f993 	bl	8009294 <__d2b>
 8007f6e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8007f72:	4683      	mov	fp, r0
 8007f74:	2c00      	cmp	r4, #0
 8007f76:	d07f      	beq.n	8008078 <_dtoa_r+0x1f8>
 8007f78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007f7c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f7e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8007f82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007f86:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8007f8a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007f8e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8007f92:	2200      	movs	r2, #0
 8007f94:	4b72      	ldr	r3, [pc, #456]	; (8008160 <_dtoa_r+0x2e0>)
 8007f96:	f7f8 f8e7 	bl	8000168 <__aeabi_dsub>
 8007f9a:	a365      	add	r3, pc, #404	; (adr r3, 8008130 <_dtoa_r+0x2b0>)
 8007f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fa0:	f7f8 fa9a 	bl	80004d8 <__aeabi_dmul>
 8007fa4:	a364      	add	r3, pc, #400	; (adr r3, 8008138 <_dtoa_r+0x2b8>)
 8007fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007faa:	f7f8 f8df 	bl	800016c <__adddf3>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	460f      	mov	r7, r1
 8007fb4:	f7f8 fa26 	bl	8000404 <__aeabi_i2d>
 8007fb8:	a361      	add	r3, pc, #388	; (adr r3, 8008140 <_dtoa_r+0x2c0>)
 8007fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fbe:	f7f8 fa8b 	bl	80004d8 <__aeabi_dmul>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	4639      	mov	r1, r7
 8007fca:	f7f8 f8cf 	bl	800016c <__adddf3>
 8007fce:	4606      	mov	r6, r0
 8007fd0:	460f      	mov	r7, r1
 8007fd2:	f7f8 fd31 	bl	8000a38 <__aeabi_d2iz>
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	4682      	mov	sl, r0
 8007fda:	2300      	movs	r3, #0
 8007fdc:	4630      	mov	r0, r6
 8007fde:	4639      	mov	r1, r7
 8007fe0:	f7f8 fcec 	bl	80009bc <__aeabi_dcmplt>
 8007fe4:	b148      	cbz	r0, 8007ffa <_dtoa_r+0x17a>
 8007fe6:	4650      	mov	r0, sl
 8007fe8:	f7f8 fa0c 	bl	8000404 <__aeabi_i2d>
 8007fec:	4632      	mov	r2, r6
 8007fee:	463b      	mov	r3, r7
 8007ff0:	f7f8 fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8007ff4:	b908      	cbnz	r0, 8007ffa <_dtoa_r+0x17a>
 8007ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ffa:	f1ba 0f16 	cmp.w	sl, #22
 8007ffe:	d858      	bhi.n	80080b2 <_dtoa_r+0x232>
 8008000:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008004:	4b57      	ldr	r3, [pc, #348]	; (8008164 <_dtoa_r+0x2e4>)
 8008006:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800800a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800800e:	f7f8 fcd5 	bl	80009bc <__aeabi_dcmplt>
 8008012:	2800      	cmp	r0, #0
 8008014:	d04f      	beq.n	80080b6 <_dtoa_r+0x236>
 8008016:	2300      	movs	r3, #0
 8008018:	f10a 3aff 	add.w	sl, sl, #4294967295
 800801c:	930f      	str	r3, [sp, #60]	; 0x3c
 800801e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008020:	1b1c      	subs	r4, r3, r4
 8008022:	1e63      	subs	r3, r4, #1
 8008024:	9309      	str	r3, [sp, #36]	; 0x24
 8008026:	bf49      	itett	mi
 8008028:	f1c4 0301 	rsbmi	r3, r4, #1
 800802c:	2300      	movpl	r3, #0
 800802e:	9306      	strmi	r3, [sp, #24]
 8008030:	2300      	movmi	r3, #0
 8008032:	bf54      	ite	pl
 8008034:	9306      	strpl	r3, [sp, #24]
 8008036:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008038:	f1ba 0f00 	cmp.w	sl, #0
 800803c:	db3d      	blt.n	80080ba <_dtoa_r+0x23a>
 800803e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008040:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008044:	4453      	add	r3, sl
 8008046:	9309      	str	r3, [sp, #36]	; 0x24
 8008048:	2300      	movs	r3, #0
 800804a:	930a      	str	r3, [sp, #40]	; 0x28
 800804c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800804e:	2b09      	cmp	r3, #9
 8008050:	f200 808c 	bhi.w	800816c <_dtoa_r+0x2ec>
 8008054:	2b05      	cmp	r3, #5
 8008056:	bfc4      	itt	gt
 8008058:	3b04      	subgt	r3, #4
 800805a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800805c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800805e:	bfc8      	it	gt
 8008060:	2400      	movgt	r4, #0
 8008062:	f1a3 0302 	sub.w	r3, r3, #2
 8008066:	bfd8      	it	le
 8008068:	2401      	movle	r4, #1
 800806a:	2b03      	cmp	r3, #3
 800806c:	f200 808a 	bhi.w	8008184 <_dtoa_r+0x304>
 8008070:	e8df f003 	tbb	[pc, r3]
 8008074:	5b4d4f2d 	.word	0x5b4d4f2d
 8008078:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800807c:	441c      	add	r4, r3
 800807e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008082:	2b20      	cmp	r3, #32
 8008084:	bfc3      	ittte	gt
 8008086:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800808a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800808e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008092:	f1c3 0320 	rsble	r3, r3, #32
 8008096:	bfc6      	itte	gt
 8008098:	fa26 f000 	lsrgt.w	r0, r6, r0
 800809c:	4318      	orrgt	r0, r3
 800809e:	fa06 f003 	lslle.w	r0, r6, r3
 80080a2:	f7f8 f99f 	bl	80003e4 <__aeabi_ui2d>
 80080a6:	2301      	movs	r3, #1
 80080a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80080ac:	3c01      	subs	r4, #1
 80080ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80080b0:	e76f      	b.n	8007f92 <_dtoa_r+0x112>
 80080b2:	2301      	movs	r3, #1
 80080b4:	e7b2      	b.n	800801c <_dtoa_r+0x19c>
 80080b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80080b8:	e7b1      	b.n	800801e <_dtoa_r+0x19e>
 80080ba:	9b06      	ldr	r3, [sp, #24]
 80080bc:	eba3 030a 	sub.w	r3, r3, sl
 80080c0:	9306      	str	r3, [sp, #24]
 80080c2:	f1ca 0300 	rsb	r3, sl, #0
 80080c6:	930a      	str	r3, [sp, #40]	; 0x28
 80080c8:	2300      	movs	r3, #0
 80080ca:	930e      	str	r3, [sp, #56]	; 0x38
 80080cc:	e7be      	b.n	800804c <_dtoa_r+0x1cc>
 80080ce:	2300      	movs	r3, #0
 80080d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80080d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	dc58      	bgt.n	800818a <_dtoa_r+0x30a>
 80080d8:	f04f 0901 	mov.w	r9, #1
 80080dc:	464b      	mov	r3, r9
 80080de:	f8cd 9020 	str.w	r9, [sp, #32]
 80080e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80080e6:	2200      	movs	r2, #0
 80080e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80080ea:	6042      	str	r2, [r0, #4]
 80080ec:	2204      	movs	r2, #4
 80080ee:	f102 0614 	add.w	r6, r2, #20
 80080f2:	429e      	cmp	r6, r3
 80080f4:	6841      	ldr	r1, [r0, #4]
 80080f6:	d94e      	bls.n	8008196 <_dtoa_r+0x316>
 80080f8:	4628      	mov	r0, r5
 80080fa:	f000 fda5 	bl	8008c48 <_Balloc>
 80080fe:	9003      	str	r0, [sp, #12]
 8008100:	2800      	cmp	r0, #0
 8008102:	d14c      	bne.n	800819e <_dtoa_r+0x31e>
 8008104:	4602      	mov	r2, r0
 8008106:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800810a:	4b17      	ldr	r3, [pc, #92]	; (8008168 <_dtoa_r+0x2e8>)
 800810c:	e6cc      	b.n	8007ea8 <_dtoa_r+0x28>
 800810e:	2301      	movs	r3, #1
 8008110:	e7de      	b.n	80080d0 <_dtoa_r+0x250>
 8008112:	2300      	movs	r3, #0
 8008114:	930b      	str	r3, [sp, #44]	; 0x2c
 8008116:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008118:	eb0a 0903 	add.w	r9, sl, r3
 800811c:	f109 0301 	add.w	r3, r9, #1
 8008120:	2b01      	cmp	r3, #1
 8008122:	9308      	str	r3, [sp, #32]
 8008124:	bfb8      	it	lt
 8008126:	2301      	movlt	r3, #1
 8008128:	e7dd      	b.n	80080e6 <_dtoa_r+0x266>
 800812a:	2301      	movs	r3, #1
 800812c:	e7f2      	b.n	8008114 <_dtoa_r+0x294>
 800812e:	bf00      	nop
 8008130:	636f4361 	.word	0x636f4361
 8008134:	3fd287a7 	.word	0x3fd287a7
 8008138:	8b60c8b3 	.word	0x8b60c8b3
 800813c:	3fc68a28 	.word	0x3fc68a28
 8008140:	509f79fb 	.word	0x509f79fb
 8008144:	3fd34413 	.word	0x3fd34413
 8008148:	08009c69 	.word	0x08009c69
 800814c:	08009c80 	.word	0x08009c80
 8008150:	7ff00000 	.word	0x7ff00000
 8008154:	08009c65 	.word	0x08009c65
 8008158:	08009c5c 	.word	0x08009c5c
 800815c:	08009c39 	.word	0x08009c39
 8008160:	3ff80000 	.word	0x3ff80000
 8008164:	08009d70 	.word	0x08009d70
 8008168:	08009cdb 	.word	0x08009cdb
 800816c:	2401      	movs	r4, #1
 800816e:	2300      	movs	r3, #0
 8008170:	940b      	str	r4, [sp, #44]	; 0x2c
 8008172:	9322      	str	r3, [sp, #136]	; 0x88
 8008174:	f04f 39ff 	mov.w	r9, #4294967295
 8008178:	2200      	movs	r2, #0
 800817a:	2312      	movs	r3, #18
 800817c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008180:	9223      	str	r2, [sp, #140]	; 0x8c
 8008182:	e7b0      	b.n	80080e6 <_dtoa_r+0x266>
 8008184:	2301      	movs	r3, #1
 8008186:	930b      	str	r3, [sp, #44]	; 0x2c
 8008188:	e7f4      	b.n	8008174 <_dtoa_r+0x2f4>
 800818a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800818e:	464b      	mov	r3, r9
 8008190:	f8cd 9020 	str.w	r9, [sp, #32]
 8008194:	e7a7      	b.n	80080e6 <_dtoa_r+0x266>
 8008196:	3101      	adds	r1, #1
 8008198:	6041      	str	r1, [r0, #4]
 800819a:	0052      	lsls	r2, r2, #1
 800819c:	e7a7      	b.n	80080ee <_dtoa_r+0x26e>
 800819e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80081a0:	9a03      	ldr	r2, [sp, #12]
 80081a2:	601a      	str	r2, [r3, #0]
 80081a4:	9b08      	ldr	r3, [sp, #32]
 80081a6:	2b0e      	cmp	r3, #14
 80081a8:	f200 80a8 	bhi.w	80082fc <_dtoa_r+0x47c>
 80081ac:	2c00      	cmp	r4, #0
 80081ae:	f000 80a5 	beq.w	80082fc <_dtoa_r+0x47c>
 80081b2:	f1ba 0f00 	cmp.w	sl, #0
 80081b6:	dd34      	ble.n	8008222 <_dtoa_r+0x3a2>
 80081b8:	4a9a      	ldr	r2, [pc, #616]	; (8008424 <_dtoa_r+0x5a4>)
 80081ba:	f00a 030f 	and.w	r3, sl, #15
 80081be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80081c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80081c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80081ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80081ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80081d2:	d016      	beq.n	8008202 <_dtoa_r+0x382>
 80081d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80081d8:	4b93      	ldr	r3, [pc, #588]	; (8008428 <_dtoa_r+0x5a8>)
 80081da:	2703      	movs	r7, #3
 80081dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80081e0:	f7f8 faa4 	bl	800072c <__aeabi_ddiv>
 80081e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80081e8:	f004 040f 	and.w	r4, r4, #15
 80081ec:	4e8e      	ldr	r6, [pc, #568]	; (8008428 <_dtoa_r+0x5a8>)
 80081ee:	b954      	cbnz	r4, 8008206 <_dtoa_r+0x386>
 80081f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80081f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80081f8:	f7f8 fa98 	bl	800072c <__aeabi_ddiv>
 80081fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008200:	e029      	b.n	8008256 <_dtoa_r+0x3d6>
 8008202:	2702      	movs	r7, #2
 8008204:	e7f2      	b.n	80081ec <_dtoa_r+0x36c>
 8008206:	07e1      	lsls	r1, r4, #31
 8008208:	d508      	bpl.n	800821c <_dtoa_r+0x39c>
 800820a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800820e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008212:	f7f8 f961 	bl	80004d8 <__aeabi_dmul>
 8008216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800821a:	3701      	adds	r7, #1
 800821c:	1064      	asrs	r4, r4, #1
 800821e:	3608      	adds	r6, #8
 8008220:	e7e5      	b.n	80081ee <_dtoa_r+0x36e>
 8008222:	f000 80a5 	beq.w	8008370 <_dtoa_r+0x4f0>
 8008226:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800822a:	f1ca 0400 	rsb	r4, sl, #0
 800822e:	4b7d      	ldr	r3, [pc, #500]	; (8008424 <_dtoa_r+0x5a4>)
 8008230:	f004 020f 	and.w	r2, r4, #15
 8008234:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800823c:	f7f8 f94c 	bl	80004d8 <__aeabi_dmul>
 8008240:	2702      	movs	r7, #2
 8008242:	2300      	movs	r3, #0
 8008244:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008248:	4e77      	ldr	r6, [pc, #476]	; (8008428 <_dtoa_r+0x5a8>)
 800824a:	1124      	asrs	r4, r4, #4
 800824c:	2c00      	cmp	r4, #0
 800824e:	f040 8084 	bne.w	800835a <_dtoa_r+0x4da>
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1d2      	bne.n	80081fc <_dtoa_r+0x37c>
 8008256:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008258:	2b00      	cmp	r3, #0
 800825a:	f000 808b 	beq.w	8008374 <_dtoa_r+0x4f4>
 800825e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008262:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008266:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800826a:	2200      	movs	r2, #0
 800826c:	4b6f      	ldr	r3, [pc, #444]	; (800842c <_dtoa_r+0x5ac>)
 800826e:	f7f8 fba5 	bl	80009bc <__aeabi_dcmplt>
 8008272:	2800      	cmp	r0, #0
 8008274:	d07e      	beq.n	8008374 <_dtoa_r+0x4f4>
 8008276:	9b08      	ldr	r3, [sp, #32]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d07b      	beq.n	8008374 <_dtoa_r+0x4f4>
 800827c:	f1b9 0f00 	cmp.w	r9, #0
 8008280:	dd38      	ble.n	80082f4 <_dtoa_r+0x474>
 8008282:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008286:	2200      	movs	r2, #0
 8008288:	4b69      	ldr	r3, [pc, #420]	; (8008430 <_dtoa_r+0x5b0>)
 800828a:	f7f8 f925 	bl	80004d8 <__aeabi_dmul>
 800828e:	464c      	mov	r4, r9
 8008290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008294:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008298:	3701      	adds	r7, #1
 800829a:	4638      	mov	r0, r7
 800829c:	f7f8 f8b2 	bl	8000404 <__aeabi_i2d>
 80082a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082a4:	f7f8 f918 	bl	80004d8 <__aeabi_dmul>
 80082a8:	2200      	movs	r2, #0
 80082aa:	4b62      	ldr	r3, [pc, #392]	; (8008434 <_dtoa_r+0x5b4>)
 80082ac:	f7f7 ff5e 	bl	800016c <__adddf3>
 80082b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80082b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80082b8:	9611      	str	r6, [sp, #68]	; 0x44
 80082ba:	2c00      	cmp	r4, #0
 80082bc:	d15d      	bne.n	800837a <_dtoa_r+0x4fa>
 80082be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082c2:	2200      	movs	r2, #0
 80082c4:	4b5c      	ldr	r3, [pc, #368]	; (8008438 <_dtoa_r+0x5b8>)
 80082c6:	f7f7 ff4f 	bl	8000168 <__aeabi_dsub>
 80082ca:	4602      	mov	r2, r0
 80082cc:	460b      	mov	r3, r1
 80082ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80082d2:	4633      	mov	r3, r6
 80082d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082d6:	f7f8 fb8f 	bl	80009f8 <__aeabi_dcmpgt>
 80082da:	2800      	cmp	r0, #0
 80082dc:	f040 829c 	bne.w	8008818 <_dtoa_r+0x998>
 80082e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80082e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80082ea:	f7f8 fb67 	bl	80009bc <__aeabi_dcmplt>
 80082ee:	2800      	cmp	r0, #0
 80082f0:	f040 8290 	bne.w	8008814 <_dtoa_r+0x994>
 80082f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80082f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80082fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f2c0 8152 	blt.w	80085a8 <_dtoa_r+0x728>
 8008304:	f1ba 0f0e 	cmp.w	sl, #14
 8008308:	f300 814e 	bgt.w	80085a8 <_dtoa_r+0x728>
 800830c:	4b45      	ldr	r3, [pc, #276]	; (8008424 <_dtoa_r+0x5a4>)
 800830e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008312:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008316:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800831a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f280 80db 	bge.w	80084d8 <_dtoa_r+0x658>
 8008322:	9b08      	ldr	r3, [sp, #32]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f300 80d7 	bgt.w	80084d8 <_dtoa_r+0x658>
 800832a:	f040 8272 	bne.w	8008812 <_dtoa_r+0x992>
 800832e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008332:	2200      	movs	r2, #0
 8008334:	4b40      	ldr	r3, [pc, #256]	; (8008438 <_dtoa_r+0x5b8>)
 8008336:	f7f8 f8cf 	bl	80004d8 <__aeabi_dmul>
 800833a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800833e:	f7f8 fb51 	bl	80009e4 <__aeabi_dcmpge>
 8008342:	9c08      	ldr	r4, [sp, #32]
 8008344:	4626      	mov	r6, r4
 8008346:	2800      	cmp	r0, #0
 8008348:	f040 8248 	bne.w	80087dc <_dtoa_r+0x95c>
 800834c:	2331      	movs	r3, #49	; 0x31
 800834e:	9f03      	ldr	r7, [sp, #12]
 8008350:	f10a 0a01 	add.w	sl, sl, #1
 8008354:	f807 3b01 	strb.w	r3, [r7], #1
 8008358:	e244      	b.n	80087e4 <_dtoa_r+0x964>
 800835a:	07e2      	lsls	r2, r4, #31
 800835c:	d505      	bpl.n	800836a <_dtoa_r+0x4ea>
 800835e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008362:	f7f8 f8b9 	bl	80004d8 <__aeabi_dmul>
 8008366:	2301      	movs	r3, #1
 8008368:	3701      	adds	r7, #1
 800836a:	1064      	asrs	r4, r4, #1
 800836c:	3608      	adds	r6, #8
 800836e:	e76d      	b.n	800824c <_dtoa_r+0x3cc>
 8008370:	2702      	movs	r7, #2
 8008372:	e770      	b.n	8008256 <_dtoa_r+0x3d6>
 8008374:	46d0      	mov	r8, sl
 8008376:	9c08      	ldr	r4, [sp, #32]
 8008378:	e78f      	b.n	800829a <_dtoa_r+0x41a>
 800837a:	9903      	ldr	r1, [sp, #12]
 800837c:	4b29      	ldr	r3, [pc, #164]	; (8008424 <_dtoa_r+0x5a4>)
 800837e:	4421      	add	r1, r4
 8008380:	9112      	str	r1, [sp, #72]	; 0x48
 8008382:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008384:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008388:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800838c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008390:	2900      	cmp	r1, #0
 8008392:	d055      	beq.n	8008440 <_dtoa_r+0x5c0>
 8008394:	2000      	movs	r0, #0
 8008396:	4929      	ldr	r1, [pc, #164]	; (800843c <_dtoa_r+0x5bc>)
 8008398:	f7f8 f9c8 	bl	800072c <__aeabi_ddiv>
 800839c:	463b      	mov	r3, r7
 800839e:	4632      	mov	r2, r6
 80083a0:	f7f7 fee2 	bl	8000168 <__aeabi_dsub>
 80083a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80083a8:	9f03      	ldr	r7, [sp, #12]
 80083aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083ae:	f7f8 fb43 	bl	8000a38 <__aeabi_d2iz>
 80083b2:	4604      	mov	r4, r0
 80083b4:	f7f8 f826 	bl	8000404 <__aeabi_i2d>
 80083b8:	4602      	mov	r2, r0
 80083ba:	460b      	mov	r3, r1
 80083bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80083c0:	f7f7 fed2 	bl	8000168 <__aeabi_dsub>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	3430      	adds	r4, #48	; 0x30
 80083ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80083ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083d2:	f807 4b01 	strb.w	r4, [r7], #1
 80083d6:	f7f8 faf1 	bl	80009bc <__aeabi_dcmplt>
 80083da:	2800      	cmp	r0, #0
 80083dc:	d174      	bne.n	80084c8 <_dtoa_r+0x648>
 80083de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80083e2:	2000      	movs	r0, #0
 80083e4:	4911      	ldr	r1, [pc, #68]	; (800842c <_dtoa_r+0x5ac>)
 80083e6:	f7f7 febf 	bl	8000168 <__aeabi_dsub>
 80083ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083ee:	f7f8 fae5 	bl	80009bc <__aeabi_dcmplt>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f040 80b7 	bne.w	8008566 <_dtoa_r+0x6e6>
 80083f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80083fa:	429f      	cmp	r7, r3
 80083fc:	f43f af7a 	beq.w	80082f4 <_dtoa_r+0x474>
 8008400:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008404:	2200      	movs	r2, #0
 8008406:	4b0a      	ldr	r3, [pc, #40]	; (8008430 <_dtoa_r+0x5b0>)
 8008408:	f7f8 f866 	bl	80004d8 <__aeabi_dmul>
 800840c:	2200      	movs	r2, #0
 800840e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008412:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008416:	4b06      	ldr	r3, [pc, #24]	; (8008430 <_dtoa_r+0x5b0>)
 8008418:	f7f8 f85e 	bl	80004d8 <__aeabi_dmul>
 800841c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008420:	e7c3      	b.n	80083aa <_dtoa_r+0x52a>
 8008422:	bf00      	nop
 8008424:	08009d70 	.word	0x08009d70
 8008428:	08009d48 	.word	0x08009d48
 800842c:	3ff00000 	.word	0x3ff00000
 8008430:	40240000 	.word	0x40240000
 8008434:	401c0000 	.word	0x401c0000
 8008438:	40140000 	.word	0x40140000
 800843c:	3fe00000 	.word	0x3fe00000
 8008440:	4630      	mov	r0, r6
 8008442:	4639      	mov	r1, r7
 8008444:	f7f8 f848 	bl	80004d8 <__aeabi_dmul>
 8008448:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800844a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800844e:	9c03      	ldr	r4, [sp, #12]
 8008450:	9314      	str	r3, [sp, #80]	; 0x50
 8008452:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008456:	f7f8 faef 	bl	8000a38 <__aeabi_d2iz>
 800845a:	9015      	str	r0, [sp, #84]	; 0x54
 800845c:	f7f7 ffd2 	bl	8000404 <__aeabi_i2d>
 8008460:	4602      	mov	r2, r0
 8008462:	460b      	mov	r3, r1
 8008464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008468:	f7f7 fe7e 	bl	8000168 <__aeabi_dsub>
 800846c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800846e:	4606      	mov	r6, r0
 8008470:	3330      	adds	r3, #48	; 0x30
 8008472:	f804 3b01 	strb.w	r3, [r4], #1
 8008476:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008478:	460f      	mov	r7, r1
 800847a:	429c      	cmp	r4, r3
 800847c:	f04f 0200 	mov.w	r2, #0
 8008480:	d124      	bne.n	80084cc <_dtoa_r+0x64c>
 8008482:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008486:	4bb0      	ldr	r3, [pc, #704]	; (8008748 <_dtoa_r+0x8c8>)
 8008488:	f7f7 fe70 	bl	800016c <__adddf3>
 800848c:	4602      	mov	r2, r0
 800848e:	460b      	mov	r3, r1
 8008490:	4630      	mov	r0, r6
 8008492:	4639      	mov	r1, r7
 8008494:	f7f8 fab0 	bl	80009f8 <__aeabi_dcmpgt>
 8008498:	2800      	cmp	r0, #0
 800849a:	d163      	bne.n	8008564 <_dtoa_r+0x6e4>
 800849c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084a0:	2000      	movs	r0, #0
 80084a2:	49a9      	ldr	r1, [pc, #676]	; (8008748 <_dtoa_r+0x8c8>)
 80084a4:	f7f7 fe60 	bl	8000168 <__aeabi_dsub>
 80084a8:	4602      	mov	r2, r0
 80084aa:	460b      	mov	r3, r1
 80084ac:	4630      	mov	r0, r6
 80084ae:	4639      	mov	r1, r7
 80084b0:	f7f8 fa84 	bl	80009bc <__aeabi_dcmplt>
 80084b4:	2800      	cmp	r0, #0
 80084b6:	f43f af1d 	beq.w	80082f4 <_dtoa_r+0x474>
 80084ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80084bc:	1e7b      	subs	r3, r7, #1
 80084be:	9314      	str	r3, [sp, #80]	; 0x50
 80084c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80084c4:	2b30      	cmp	r3, #48	; 0x30
 80084c6:	d0f8      	beq.n	80084ba <_dtoa_r+0x63a>
 80084c8:	46c2      	mov	sl, r8
 80084ca:	e03b      	b.n	8008544 <_dtoa_r+0x6c4>
 80084cc:	4b9f      	ldr	r3, [pc, #636]	; (800874c <_dtoa_r+0x8cc>)
 80084ce:	f7f8 f803 	bl	80004d8 <__aeabi_dmul>
 80084d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80084d6:	e7bc      	b.n	8008452 <_dtoa_r+0x5d2>
 80084d8:	9f03      	ldr	r7, [sp, #12]
 80084da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80084de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084e2:	4640      	mov	r0, r8
 80084e4:	4649      	mov	r1, r9
 80084e6:	f7f8 f921 	bl	800072c <__aeabi_ddiv>
 80084ea:	f7f8 faa5 	bl	8000a38 <__aeabi_d2iz>
 80084ee:	4604      	mov	r4, r0
 80084f0:	f7f7 ff88 	bl	8000404 <__aeabi_i2d>
 80084f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80084f8:	f7f7 ffee 	bl	80004d8 <__aeabi_dmul>
 80084fc:	4602      	mov	r2, r0
 80084fe:	460b      	mov	r3, r1
 8008500:	4640      	mov	r0, r8
 8008502:	4649      	mov	r1, r9
 8008504:	f7f7 fe30 	bl	8000168 <__aeabi_dsub>
 8008508:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800850c:	f807 6b01 	strb.w	r6, [r7], #1
 8008510:	9e03      	ldr	r6, [sp, #12]
 8008512:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008516:	1bbe      	subs	r6, r7, r6
 8008518:	45b4      	cmp	ip, r6
 800851a:	4602      	mov	r2, r0
 800851c:	460b      	mov	r3, r1
 800851e:	d136      	bne.n	800858e <_dtoa_r+0x70e>
 8008520:	f7f7 fe24 	bl	800016c <__adddf3>
 8008524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008528:	4680      	mov	r8, r0
 800852a:	4689      	mov	r9, r1
 800852c:	f7f8 fa64 	bl	80009f8 <__aeabi_dcmpgt>
 8008530:	bb58      	cbnz	r0, 800858a <_dtoa_r+0x70a>
 8008532:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008536:	4640      	mov	r0, r8
 8008538:	4649      	mov	r1, r9
 800853a:	f7f8 fa35 	bl	80009a8 <__aeabi_dcmpeq>
 800853e:	b108      	cbz	r0, 8008544 <_dtoa_r+0x6c4>
 8008540:	07e1      	lsls	r1, r4, #31
 8008542:	d422      	bmi.n	800858a <_dtoa_r+0x70a>
 8008544:	4628      	mov	r0, r5
 8008546:	4659      	mov	r1, fp
 8008548:	f000 fbbe 	bl	8008cc8 <_Bfree>
 800854c:	2300      	movs	r3, #0
 800854e:	703b      	strb	r3, [r7, #0]
 8008550:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008552:	f10a 0001 	add.w	r0, sl, #1
 8008556:	6018      	str	r0, [r3, #0]
 8008558:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800855a:	2b00      	cmp	r3, #0
 800855c:	f43f acde 	beq.w	8007f1c <_dtoa_r+0x9c>
 8008560:	601f      	str	r7, [r3, #0]
 8008562:	e4db      	b.n	8007f1c <_dtoa_r+0x9c>
 8008564:	4627      	mov	r7, r4
 8008566:	463b      	mov	r3, r7
 8008568:	461f      	mov	r7, r3
 800856a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800856e:	2a39      	cmp	r2, #57	; 0x39
 8008570:	d107      	bne.n	8008582 <_dtoa_r+0x702>
 8008572:	9a03      	ldr	r2, [sp, #12]
 8008574:	429a      	cmp	r2, r3
 8008576:	d1f7      	bne.n	8008568 <_dtoa_r+0x6e8>
 8008578:	2230      	movs	r2, #48	; 0x30
 800857a:	9903      	ldr	r1, [sp, #12]
 800857c:	f108 0801 	add.w	r8, r8, #1
 8008580:	700a      	strb	r2, [r1, #0]
 8008582:	781a      	ldrb	r2, [r3, #0]
 8008584:	3201      	adds	r2, #1
 8008586:	701a      	strb	r2, [r3, #0]
 8008588:	e79e      	b.n	80084c8 <_dtoa_r+0x648>
 800858a:	46d0      	mov	r8, sl
 800858c:	e7eb      	b.n	8008566 <_dtoa_r+0x6e6>
 800858e:	2200      	movs	r2, #0
 8008590:	4b6e      	ldr	r3, [pc, #440]	; (800874c <_dtoa_r+0x8cc>)
 8008592:	f7f7 ffa1 	bl	80004d8 <__aeabi_dmul>
 8008596:	2200      	movs	r2, #0
 8008598:	2300      	movs	r3, #0
 800859a:	4680      	mov	r8, r0
 800859c:	4689      	mov	r9, r1
 800859e:	f7f8 fa03 	bl	80009a8 <__aeabi_dcmpeq>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d09b      	beq.n	80084de <_dtoa_r+0x65e>
 80085a6:	e7cd      	b.n	8008544 <_dtoa_r+0x6c4>
 80085a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80085aa:	2a00      	cmp	r2, #0
 80085ac:	f000 80d0 	beq.w	8008750 <_dtoa_r+0x8d0>
 80085b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	f300 80ae 	bgt.w	8008714 <_dtoa_r+0x894>
 80085b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80085ba:	2a00      	cmp	r2, #0
 80085bc:	f000 80a6 	beq.w	800870c <_dtoa_r+0x88c>
 80085c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80085c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80085c6:	9f06      	ldr	r7, [sp, #24]
 80085c8:	9a06      	ldr	r2, [sp, #24]
 80085ca:	2101      	movs	r1, #1
 80085cc:	441a      	add	r2, r3
 80085ce:	9206      	str	r2, [sp, #24]
 80085d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085d2:	4628      	mov	r0, r5
 80085d4:	441a      	add	r2, r3
 80085d6:	9209      	str	r2, [sp, #36]	; 0x24
 80085d8:	f000 fc2c 	bl	8008e34 <__i2b>
 80085dc:	4606      	mov	r6, r0
 80085de:	2f00      	cmp	r7, #0
 80085e0:	dd0c      	ble.n	80085fc <_dtoa_r+0x77c>
 80085e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	dd09      	ble.n	80085fc <_dtoa_r+0x77c>
 80085e8:	42bb      	cmp	r3, r7
 80085ea:	bfa8      	it	ge
 80085ec:	463b      	movge	r3, r7
 80085ee:	9a06      	ldr	r2, [sp, #24]
 80085f0:	1aff      	subs	r7, r7, r3
 80085f2:	1ad2      	subs	r2, r2, r3
 80085f4:	9206      	str	r2, [sp, #24]
 80085f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085f8:	1ad3      	subs	r3, r2, r3
 80085fa:	9309      	str	r3, [sp, #36]	; 0x24
 80085fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085fe:	b1f3      	cbz	r3, 800863e <_dtoa_r+0x7be>
 8008600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008602:	2b00      	cmp	r3, #0
 8008604:	f000 80a8 	beq.w	8008758 <_dtoa_r+0x8d8>
 8008608:	2c00      	cmp	r4, #0
 800860a:	dd10      	ble.n	800862e <_dtoa_r+0x7ae>
 800860c:	4631      	mov	r1, r6
 800860e:	4622      	mov	r2, r4
 8008610:	4628      	mov	r0, r5
 8008612:	f000 fccd 	bl	8008fb0 <__pow5mult>
 8008616:	465a      	mov	r2, fp
 8008618:	4601      	mov	r1, r0
 800861a:	4606      	mov	r6, r0
 800861c:	4628      	mov	r0, r5
 800861e:	f000 fc1f 	bl	8008e60 <__multiply>
 8008622:	4680      	mov	r8, r0
 8008624:	4659      	mov	r1, fp
 8008626:	4628      	mov	r0, r5
 8008628:	f000 fb4e 	bl	8008cc8 <_Bfree>
 800862c:	46c3      	mov	fp, r8
 800862e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008630:	1b1a      	subs	r2, r3, r4
 8008632:	d004      	beq.n	800863e <_dtoa_r+0x7be>
 8008634:	4659      	mov	r1, fp
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fcba 	bl	8008fb0 <__pow5mult>
 800863c:	4683      	mov	fp, r0
 800863e:	2101      	movs	r1, #1
 8008640:	4628      	mov	r0, r5
 8008642:	f000 fbf7 	bl	8008e34 <__i2b>
 8008646:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008648:	4604      	mov	r4, r0
 800864a:	2b00      	cmp	r3, #0
 800864c:	f340 8086 	ble.w	800875c <_dtoa_r+0x8dc>
 8008650:	461a      	mov	r2, r3
 8008652:	4601      	mov	r1, r0
 8008654:	4628      	mov	r0, r5
 8008656:	f000 fcab 	bl	8008fb0 <__pow5mult>
 800865a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800865c:	4604      	mov	r4, r0
 800865e:	2b01      	cmp	r3, #1
 8008660:	dd7f      	ble.n	8008762 <_dtoa_r+0x8e2>
 8008662:	f04f 0800 	mov.w	r8, #0
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800866c:	6918      	ldr	r0, [r3, #16]
 800866e:	f000 fb93 	bl	8008d98 <__hi0bits>
 8008672:	f1c0 0020 	rsb	r0, r0, #32
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	4418      	add	r0, r3
 800867a:	f010 001f 	ands.w	r0, r0, #31
 800867e:	f000 8092 	beq.w	80087a6 <_dtoa_r+0x926>
 8008682:	f1c0 0320 	rsb	r3, r0, #32
 8008686:	2b04      	cmp	r3, #4
 8008688:	f340 808a 	ble.w	80087a0 <_dtoa_r+0x920>
 800868c:	f1c0 001c 	rsb	r0, r0, #28
 8008690:	9b06      	ldr	r3, [sp, #24]
 8008692:	4407      	add	r7, r0
 8008694:	4403      	add	r3, r0
 8008696:	9306      	str	r3, [sp, #24]
 8008698:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800869a:	4403      	add	r3, r0
 800869c:	9309      	str	r3, [sp, #36]	; 0x24
 800869e:	9b06      	ldr	r3, [sp, #24]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	dd05      	ble.n	80086b0 <_dtoa_r+0x830>
 80086a4:	4659      	mov	r1, fp
 80086a6:	461a      	mov	r2, r3
 80086a8:	4628      	mov	r0, r5
 80086aa:	f000 fcdb 	bl	8009064 <__lshift>
 80086ae:	4683      	mov	fp, r0
 80086b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	dd05      	ble.n	80086c2 <_dtoa_r+0x842>
 80086b6:	4621      	mov	r1, r4
 80086b8:	461a      	mov	r2, r3
 80086ba:	4628      	mov	r0, r5
 80086bc:	f000 fcd2 	bl	8009064 <__lshift>
 80086c0:	4604      	mov	r4, r0
 80086c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d070      	beq.n	80087aa <_dtoa_r+0x92a>
 80086c8:	4621      	mov	r1, r4
 80086ca:	4658      	mov	r0, fp
 80086cc:	f000 fd3a 	bl	8009144 <__mcmp>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	da6a      	bge.n	80087aa <_dtoa_r+0x92a>
 80086d4:	2300      	movs	r3, #0
 80086d6:	4659      	mov	r1, fp
 80086d8:	220a      	movs	r2, #10
 80086da:	4628      	mov	r0, r5
 80086dc:	f000 fb16 	bl	8008d0c <__multadd>
 80086e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086e2:	4683      	mov	fp, r0
 80086e4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	f000 8194 	beq.w	8008a16 <_dtoa_r+0xb96>
 80086ee:	4631      	mov	r1, r6
 80086f0:	2300      	movs	r3, #0
 80086f2:	220a      	movs	r2, #10
 80086f4:	4628      	mov	r0, r5
 80086f6:	f000 fb09 	bl	8008d0c <__multadd>
 80086fa:	f1b9 0f00 	cmp.w	r9, #0
 80086fe:	4606      	mov	r6, r0
 8008700:	f300 8093 	bgt.w	800882a <_dtoa_r+0x9aa>
 8008704:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008706:	2b02      	cmp	r3, #2
 8008708:	dc57      	bgt.n	80087ba <_dtoa_r+0x93a>
 800870a:	e08e      	b.n	800882a <_dtoa_r+0x9aa>
 800870c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800870e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008712:	e757      	b.n	80085c4 <_dtoa_r+0x744>
 8008714:	9b08      	ldr	r3, [sp, #32]
 8008716:	1e5c      	subs	r4, r3, #1
 8008718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800871a:	42a3      	cmp	r3, r4
 800871c:	bfb7      	itett	lt
 800871e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008720:	1b1c      	subge	r4, r3, r4
 8008722:	1ae2      	sublt	r2, r4, r3
 8008724:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008726:	bfbe      	ittt	lt
 8008728:	940a      	strlt	r4, [sp, #40]	; 0x28
 800872a:	189b      	addlt	r3, r3, r2
 800872c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800872e:	9b08      	ldr	r3, [sp, #32]
 8008730:	bfb8      	it	lt
 8008732:	2400      	movlt	r4, #0
 8008734:	2b00      	cmp	r3, #0
 8008736:	bfbb      	ittet	lt
 8008738:	9b06      	ldrlt	r3, [sp, #24]
 800873a:	9a08      	ldrlt	r2, [sp, #32]
 800873c:	9f06      	ldrge	r7, [sp, #24]
 800873e:	1a9f      	sublt	r7, r3, r2
 8008740:	bfac      	ite	ge
 8008742:	9b08      	ldrge	r3, [sp, #32]
 8008744:	2300      	movlt	r3, #0
 8008746:	e73f      	b.n	80085c8 <_dtoa_r+0x748>
 8008748:	3fe00000 	.word	0x3fe00000
 800874c:	40240000 	.word	0x40240000
 8008750:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008752:	9f06      	ldr	r7, [sp, #24]
 8008754:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008756:	e742      	b.n	80085de <_dtoa_r+0x75e>
 8008758:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800875a:	e76b      	b.n	8008634 <_dtoa_r+0x7b4>
 800875c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800875e:	2b01      	cmp	r3, #1
 8008760:	dc19      	bgt.n	8008796 <_dtoa_r+0x916>
 8008762:	9b04      	ldr	r3, [sp, #16]
 8008764:	b9bb      	cbnz	r3, 8008796 <_dtoa_r+0x916>
 8008766:	9b05      	ldr	r3, [sp, #20]
 8008768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800876c:	b99b      	cbnz	r3, 8008796 <_dtoa_r+0x916>
 800876e:	9b05      	ldr	r3, [sp, #20]
 8008770:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008774:	0d1b      	lsrs	r3, r3, #20
 8008776:	051b      	lsls	r3, r3, #20
 8008778:	b183      	cbz	r3, 800879c <_dtoa_r+0x91c>
 800877a:	f04f 0801 	mov.w	r8, #1
 800877e:	9b06      	ldr	r3, [sp, #24]
 8008780:	3301      	adds	r3, #1
 8008782:	9306      	str	r3, [sp, #24]
 8008784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008786:	3301      	adds	r3, #1
 8008788:	9309      	str	r3, [sp, #36]	; 0x24
 800878a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800878c:	2b00      	cmp	r3, #0
 800878e:	f47f af6a 	bne.w	8008666 <_dtoa_r+0x7e6>
 8008792:	2001      	movs	r0, #1
 8008794:	e76f      	b.n	8008676 <_dtoa_r+0x7f6>
 8008796:	f04f 0800 	mov.w	r8, #0
 800879a:	e7f6      	b.n	800878a <_dtoa_r+0x90a>
 800879c:	4698      	mov	r8, r3
 800879e:	e7f4      	b.n	800878a <_dtoa_r+0x90a>
 80087a0:	f43f af7d 	beq.w	800869e <_dtoa_r+0x81e>
 80087a4:	4618      	mov	r0, r3
 80087a6:	301c      	adds	r0, #28
 80087a8:	e772      	b.n	8008690 <_dtoa_r+0x810>
 80087aa:	9b08      	ldr	r3, [sp, #32]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	dc36      	bgt.n	800881e <_dtoa_r+0x99e>
 80087b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	dd33      	ble.n	800881e <_dtoa_r+0x99e>
 80087b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80087ba:	f1b9 0f00 	cmp.w	r9, #0
 80087be:	d10d      	bne.n	80087dc <_dtoa_r+0x95c>
 80087c0:	4621      	mov	r1, r4
 80087c2:	464b      	mov	r3, r9
 80087c4:	2205      	movs	r2, #5
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 faa0 	bl	8008d0c <__multadd>
 80087cc:	4601      	mov	r1, r0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4658      	mov	r0, fp
 80087d2:	f000 fcb7 	bl	8009144 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	f73f adb8 	bgt.w	800834c <_dtoa_r+0x4cc>
 80087dc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80087de:	9f03      	ldr	r7, [sp, #12]
 80087e0:	ea6f 0a03 	mvn.w	sl, r3
 80087e4:	f04f 0800 	mov.w	r8, #0
 80087e8:	4621      	mov	r1, r4
 80087ea:	4628      	mov	r0, r5
 80087ec:	f000 fa6c 	bl	8008cc8 <_Bfree>
 80087f0:	2e00      	cmp	r6, #0
 80087f2:	f43f aea7 	beq.w	8008544 <_dtoa_r+0x6c4>
 80087f6:	f1b8 0f00 	cmp.w	r8, #0
 80087fa:	d005      	beq.n	8008808 <_dtoa_r+0x988>
 80087fc:	45b0      	cmp	r8, r6
 80087fe:	d003      	beq.n	8008808 <_dtoa_r+0x988>
 8008800:	4641      	mov	r1, r8
 8008802:	4628      	mov	r0, r5
 8008804:	f000 fa60 	bl	8008cc8 <_Bfree>
 8008808:	4631      	mov	r1, r6
 800880a:	4628      	mov	r0, r5
 800880c:	f000 fa5c 	bl	8008cc8 <_Bfree>
 8008810:	e698      	b.n	8008544 <_dtoa_r+0x6c4>
 8008812:	2400      	movs	r4, #0
 8008814:	4626      	mov	r6, r4
 8008816:	e7e1      	b.n	80087dc <_dtoa_r+0x95c>
 8008818:	46c2      	mov	sl, r8
 800881a:	4626      	mov	r6, r4
 800881c:	e596      	b.n	800834c <_dtoa_r+0x4cc>
 800881e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008820:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 80fd 	beq.w	8008a24 <_dtoa_r+0xba4>
 800882a:	2f00      	cmp	r7, #0
 800882c:	dd05      	ble.n	800883a <_dtoa_r+0x9ba>
 800882e:	4631      	mov	r1, r6
 8008830:	463a      	mov	r2, r7
 8008832:	4628      	mov	r0, r5
 8008834:	f000 fc16 	bl	8009064 <__lshift>
 8008838:	4606      	mov	r6, r0
 800883a:	f1b8 0f00 	cmp.w	r8, #0
 800883e:	d05c      	beq.n	80088fa <_dtoa_r+0xa7a>
 8008840:	4628      	mov	r0, r5
 8008842:	6871      	ldr	r1, [r6, #4]
 8008844:	f000 fa00 	bl	8008c48 <_Balloc>
 8008848:	4607      	mov	r7, r0
 800884a:	b928      	cbnz	r0, 8008858 <_dtoa_r+0x9d8>
 800884c:	4602      	mov	r2, r0
 800884e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008852:	4b7f      	ldr	r3, [pc, #508]	; (8008a50 <_dtoa_r+0xbd0>)
 8008854:	f7ff bb28 	b.w	8007ea8 <_dtoa_r+0x28>
 8008858:	6932      	ldr	r2, [r6, #16]
 800885a:	f106 010c 	add.w	r1, r6, #12
 800885e:	3202      	adds	r2, #2
 8008860:	0092      	lsls	r2, r2, #2
 8008862:	300c      	adds	r0, #12
 8008864:	f7fe fc95 	bl	8007192 <memcpy>
 8008868:	2201      	movs	r2, #1
 800886a:	4639      	mov	r1, r7
 800886c:	4628      	mov	r0, r5
 800886e:	f000 fbf9 	bl	8009064 <__lshift>
 8008872:	46b0      	mov	r8, r6
 8008874:	4606      	mov	r6, r0
 8008876:	9b03      	ldr	r3, [sp, #12]
 8008878:	3301      	adds	r3, #1
 800887a:	9308      	str	r3, [sp, #32]
 800887c:	9b03      	ldr	r3, [sp, #12]
 800887e:	444b      	add	r3, r9
 8008880:	930a      	str	r3, [sp, #40]	; 0x28
 8008882:	9b04      	ldr	r3, [sp, #16]
 8008884:	f003 0301 	and.w	r3, r3, #1
 8008888:	9309      	str	r3, [sp, #36]	; 0x24
 800888a:	9b08      	ldr	r3, [sp, #32]
 800888c:	4621      	mov	r1, r4
 800888e:	3b01      	subs	r3, #1
 8008890:	4658      	mov	r0, fp
 8008892:	9304      	str	r3, [sp, #16]
 8008894:	f7ff fa68 	bl	8007d68 <quorem>
 8008898:	4603      	mov	r3, r0
 800889a:	4641      	mov	r1, r8
 800889c:	3330      	adds	r3, #48	; 0x30
 800889e:	9006      	str	r0, [sp, #24]
 80088a0:	4658      	mov	r0, fp
 80088a2:	930b      	str	r3, [sp, #44]	; 0x2c
 80088a4:	f000 fc4e 	bl	8009144 <__mcmp>
 80088a8:	4632      	mov	r2, r6
 80088aa:	4681      	mov	r9, r0
 80088ac:	4621      	mov	r1, r4
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 fc64 	bl	800917c <__mdiff>
 80088b4:	68c2      	ldr	r2, [r0, #12]
 80088b6:	4607      	mov	r7, r0
 80088b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088ba:	bb02      	cbnz	r2, 80088fe <_dtoa_r+0xa7e>
 80088bc:	4601      	mov	r1, r0
 80088be:	4658      	mov	r0, fp
 80088c0:	f000 fc40 	bl	8009144 <__mcmp>
 80088c4:	4602      	mov	r2, r0
 80088c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088c8:	4639      	mov	r1, r7
 80088ca:	4628      	mov	r0, r5
 80088cc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80088d0:	f000 f9fa 	bl	8008cc8 <_Bfree>
 80088d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80088d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088d8:	9f08      	ldr	r7, [sp, #32]
 80088da:	ea43 0102 	orr.w	r1, r3, r2
 80088de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088e0:	430b      	orrs	r3, r1
 80088e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80088e4:	d10d      	bne.n	8008902 <_dtoa_r+0xa82>
 80088e6:	2b39      	cmp	r3, #57	; 0x39
 80088e8:	d029      	beq.n	800893e <_dtoa_r+0xabe>
 80088ea:	f1b9 0f00 	cmp.w	r9, #0
 80088ee:	dd01      	ble.n	80088f4 <_dtoa_r+0xa74>
 80088f0:	9b06      	ldr	r3, [sp, #24]
 80088f2:	3331      	adds	r3, #49	; 0x31
 80088f4:	9a04      	ldr	r2, [sp, #16]
 80088f6:	7013      	strb	r3, [r2, #0]
 80088f8:	e776      	b.n	80087e8 <_dtoa_r+0x968>
 80088fa:	4630      	mov	r0, r6
 80088fc:	e7b9      	b.n	8008872 <_dtoa_r+0x9f2>
 80088fe:	2201      	movs	r2, #1
 8008900:	e7e2      	b.n	80088c8 <_dtoa_r+0xa48>
 8008902:	f1b9 0f00 	cmp.w	r9, #0
 8008906:	db06      	blt.n	8008916 <_dtoa_r+0xa96>
 8008908:	9922      	ldr	r1, [sp, #136]	; 0x88
 800890a:	ea41 0909 	orr.w	r9, r1, r9
 800890e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008910:	ea59 0101 	orrs.w	r1, r9, r1
 8008914:	d120      	bne.n	8008958 <_dtoa_r+0xad8>
 8008916:	2a00      	cmp	r2, #0
 8008918:	ddec      	ble.n	80088f4 <_dtoa_r+0xa74>
 800891a:	4659      	mov	r1, fp
 800891c:	2201      	movs	r2, #1
 800891e:	4628      	mov	r0, r5
 8008920:	9308      	str	r3, [sp, #32]
 8008922:	f000 fb9f 	bl	8009064 <__lshift>
 8008926:	4621      	mov	r1, r4
 8008928:	4683      	mov	fp, r0
 800892a:	f000 fc0b 	bl	8009144 <__mcmp>
 800892e:	2800      	cmp	r0, #0
 8008930:	9b08      	ldr	r3, [sp, #32]
 8008932:	dc02      	bgt.n	800893a <_dtoa_r+0xaba>
 8008934:	d1de      	bne.n	80088f4 <_dtoa_r+0xa74>
 8008936:	07da      	lsls	r2, r3, #31
 8008938:	d5dc      	bpl.n	80088f4 <_dtoa_r+0xa74>
 800893a:	2b39      	cmp	r3, #57	; 0x39
 800893c:	d1d8      	bne.n	80088f0 <_dtoa_r+0xa70>
 800893e:	2339      	movs	r3, #57	; 0x39
 8008940:	9a04      	ldr	r2, [sp, #16]
 8008942:	7013      	strb	r3, [r2, #0]
 8008944:	463b      	mov	r3, r7
 8008946:	461f      	mov	r7, r3
 8008948:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800894c:	3b01      	subs	r3, #1
 800894e:	2a39      	cmp	r2, #57	; 0x39
 8008950:	d050      	beq.n	80089f4 <_dtoa_r+0xb74>
 8008952:	3201      	adds	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
 8008956:	e747      	b.n	80087e8 <_dtoa_r+0x968>
 8008958:	2a00      	cmp	r2, #0
 800895a:	dd03      	ble.n	8008964 <_dtoa_r+0xae4>
 800895c:	2b39      	cmp	r3, #57	; 0x39
 800895e:	d0ee      	beq.n	800893e <_dtoa_r+0xabe>
 8008960:	3301      	adds	r3, #1
 8008962:	e7c7      	b.n	80088f4 <_dtoa_r+0xa74>
 8008964:	9a08      	ldr	r2, [sp, #32]
 8008966:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008968:	f802 3c01 	strb.w	r3, [r2, #-1]
 800896c:	428a      	cmp	r2, r1
 800896e:	d02a      	beq.n	80089c6 <_dtoa_r+0xb46>
 8008970:	4659      	mov	r1, fp
 8008972:	2300      	movs	r3, #0
 8008974:	220a      	movs	r2, #10
 8008976:	4628      	mov	r0, r5
 8008978:	f000 f9c8 	bl	8008d0c <__multadd>
 800897c:	45b0      	cmp	r8, r6
 800897e:	4683      	mov	fp, r0
 8008980:	f04f 0300 	mov.w	r3, #0
 8008984:	f04f 020a 	mov.w	r2, #10
 8008988:	4641      	mov	r1, r8
 800898a:	4628      	mov	r0, r5
 800898c:	d107      	bne.n	800899e <_dtoa_r+0xb1e>
 800898e:	f000 f9bd 	bl	8008d0c <__multadd>
 8008992:	4680      	mov	r8, r0
 8008994:	4606      	mov	r6, r0
 8008996:	9b08      	ldr	r3, [sp, #32]
 8008998:	3301      	adds	r3, #1
 800899a:	9308      	str	r3, [sp, #32]
 800899c:	e775      	b.n	800888a <_dtoa_r+0xa0a>
 800899e:	f000 f9b5 	bl	8008d0c <__multadd>
 80089a2:	4631      	mov	r1, r6
 80089a4:	4680      	mov	r8, r0
 80089a6:	2300      	movs	r3, #0
 80089a8:	220a      	movs	r2, #10
 80089aa:	4628      	mov	r0, r5
 80089ac:	f000 f9ae 	bl	8008d0c <__multadd>
 80089b0:	4606      	mov	r6, r0
 80089b2:	e7f0      	b.n	8008996 <_dtoa_r+0xb16>
 80089b4:	f1b9 0f00 	cmp.w	r9, #0
 80089b8:	bfcc      	ite	gt
 80089ba:	464f      	movgt	r7, r9
 80089bc:	2701      	movle	r7, #1
 80089be:	f04f 0800 	mov.w	r8, #0
 80089c2:	9a03      	ldr	r2, [sp, #12]
 80089c4:	4417      	add	r7, r2
 80089c6:	4659      	mov	r1, fp
 80089c8:	2201      	movs	r2, #1
 80089ca:	4628      	mov	r0, r5
 80089cc:	9308      	str	r3, [sp, #32]
 80089ce:	f000 fb49 	bl	8009064 <__lshift>
 80089d2:	4621      	mov	r1, r4
 80089d4:	4683      	mov	fp, r0
 80089d6:	f000 fbb5 	bl	8009144 <__mcmp>
 80089da:	2800      	cmp	r0, #0
 80089dc:	dcb2      	bgt.n	8008944 <_dtoa_r+0xac4>
 80089de:	d102      	bne.n	80089e6 <_dtoa_r+0xb66>
 80089e0:	9b08      	ldr	r3, [sp, #32]
 80089e2:	07db      	lsls	r3, r3, #31
 80089e4:	d4ae      	bmi.n	8008944 <_dtoa_r+0xac4>
 80089e6:	463b      	mov	r3, r7
 80089e8:	461f      	mov	r7, r3
 80089ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80089ee:	2a30      	cmp	r2, #48	; 0x30
 80089f0:	d0fa      	beq.n	80089e8 <_dtoa_r+0xb68>
 80089f2:	e6f9      	b.n	80087e8 <_dtoa_r+0x968>
 80089f4:	9a03      	ldr	r2, [sp, #12]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d1a5      	bne.n	8008946 <_dtoa_r+0xac6>
 80089fa:	2331      	movs	r3, #49	; 0x31
 80089fc:	f10a 0a01 	add.w	sl, sl, #1
 8008a00:	e779      	b.n	80088f6 <_dtoa_r+0xa76>
 8008a02:	4b14      	ldr	r3, [pc, #80]	; (8008a54 <_dtoa_r+0xbd4>)
 8008a04:	f7ff baa8 	b.w	8007f58 <_dtoa_r+0xd8>
 8008a08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f47f aa81 	bne.w	8007f12 <_dtoa_r+0x92>
 8008a10:	4b11      	ldr	r3, [pc, #68]	; (8008a58 <_dtoa_r+0xbd8>)
 8008a12:	f7ff baa1 	b.w	8007f58 <_dtoa_r+0xd8>
 8008a16:	f1b9 0f00 	cmp.w	r9, #0
 8008a1a:	dc03      	bgt.n	8008a24 <_dtoa_r+0xba4>
 8008a1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a1e:	2b02      	cmp	r3, #2
 8008a20:	f73f aecb 	bgt.w	80087ba <_dtoa_r+0x93a>
 8008a24:	9f03      	ldr	r7, [sp, #12]
 8008a26:	4621      	mov	r1, r4
 8008a28:	4658      	mov	r0, fp
 8008a2a:	f7ff f99d 	bl	8007d68 <quorem>
 8008a2e:	9a03      	ldr	r2, [sp, #12]
 8008a30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008a34:	f807 3b01 	strb.w	r3, [r7], #1
 8008a38:	1aba      	subs	r2, r7, r2
 8008a3a:	4591      	cmp	r9, r2
 8008a3c:	ddba      	ble.n	80089b4 <_dtoa_r+0xb34>
 8008a3e:	4659      	mov	r1, fp
 8008a40:	2300      	movs	r3, #0
 8008a42:	220a      	movs	r2, #10
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 f961 	bl	8008d0c <__multadd>
 8008a4a:	4683      	mov	fp, r0
 8008a4c:	e7eb      	b.n	8008a26 <_dtoa_r+0xba6>
 8008a4e:	bf00      	nop
 8008a50:	08009cdb 	.word	0x08009cdb
 8008a54:	08009c38 	.word	0x08009c38
 8008a58:	08009c5c 	.word	0x08009c5c

08008a5c <__sflush_r>:
 8008a5c:	898a      	ldrh	r2, [r1, #12]
 8008a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a60:	4605      	mov	r5, r0
 8008a62:	0710      	lsls	r0, r2, #28
 8008a64:	460c      	mov	r4, r1
 8008a66:	d457      	bmi.n	8008b18 <__sflush_r+0xbc>
 8008a68:	684b      	ldr	r3, [r1, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc04      	bgt.n	8008a78 <__sflush_r+0x1c>
 8008a6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dc01      	bgt.n	8008a78 <__sflush_r+0x1c>
 8008a74:	2000      	movs	r0, #0
 8008a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a7a:	2e00      	cmp	r6, #0
 8008a7c:	d0fa      	beq.n	8008a74 <__sflush_r+0x18>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a84:	682f      	ldr	r7, [r5, #0]
 8008a86:	602b      	str	r3, [r5, #0]
 8008a88:	d032      	beq.n	8008af0 <__sflush_r+0x94>
 8008a8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	075a      	lsls	r2, r3, #29
 8008a90:	d505      	bpl.n	8008a9e <__sflush_r+0x42>
 8008a92:	6863      	ldr	r3, [r4, #4]
 8008a94:	1ac0      	subs	r0, r0, r3
 8008a96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a98:	b10b      	cbz	r3, 8008a9e <__sflush_r+0x42>
 8008a9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a9c:	1ac0      	subs	r0, r0, r3
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008aa4:	4628      	mov	r0, r5
 8008aa6:	6a21      	ldr	r1, [r4, #32]
 8008aa8:	47b0      	blx	r6
 8008aaa:	1c43      	adds	r3, r0, #1
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	d106      	bne.n	8008abe <__sflush_r+0x62>
 8008ab0:	6829      	ldr	r1, [r5, #0]
 8008ab2:	291d      	cmp	r1, #29
 8008ab4:	d82c      	bhi.n	8008b10 <__sflush_r+0xb4>
 8008ab6:	4a29      	ldr	r2, [pc, #164]	; (8008b5c <__sflush_r+0x100>)
 8008ab8:	40ca      	lsrs	r2, r1
 8008aba:	07d6      	lsls	r6, r2, #31
 8008abc:	d528      	bpl.n	8008b10 <__sflush_r+0xb4>
 8008abe:	2200      	movs	r2, #0
 8008ac0:	6062      	str	r2, [r4, #4]
 8008ac2:	6922      	ldr	r2, [r4, #16]
 8008ac4:	04d9      	lsls	r1, r3, #19
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	d504      	bpl.n	8008ad4 <__sflush_r+0x78>
 8008aca:	1c42      	adds	r2, r0, #1
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0x76>
 8008ace:	682b      	ldr	r3, [r5, #0]
 8008ad0:	b903      	cbnz	r3, 8008ad4 <__sflush_r+0x78>
 8008ad2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ad4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ad6:	602f      	str	r7, [r5, #0]
 8008ad8:	2900      	cmp	r1, #0
 8008ada:	d0cb      	beq.n	8008a74 <__sflush_r+0x18>
 8008adc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ae0:	4299      	cmp	r1, r3
 8008ae2:	d002      	beq.n	8008aea <__sflush_r+0x8e>
 8008ae4:	4628      	mov	r0, r5
 8008ae6:	f000 fc45 	bl	8009374 <_free_r>
 8008aea:	2000      	movs	r0, #0
 8008aec:	6360      	str	r0, [r4, #52]	; 0x34
 8008aee:	e7c2      	b.n	8008a76 <__sflush_r+0x1a>
 8008af0:	6a21      	ldr	r1, [r4, #32]
 8008af2:	2301      	movs	r3, #1
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b0      	blx	r6
 8008af8:	1c41      	adds	r1, r0, #1
 8008afa:	d1c7      	bne.n	8008a8c <__sflush_r+0x30>
 8008afc:	682b      	ldr	r3, [r5, #0]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d0c4      	beq.n	8008a8c <__sflush_r+0x30>
 8008b02:	2b1d      	cmp	r3, #29
 8008b04:	d001      	beq.n	8008b0a <__sflush_r+0xae>
 8008b06:	2b16      	cmp	r3, #22
 8008b08:	d101      	bne.n	8008b0e <__sflush_r+0xb2>
 8008b0a:	602f      	str	r7, [r5, #0]
 8008b0c:	e7b2      	b.n	8008a74 <__sflush_r+0x18>
 8008b0e:	89a3      	ldrh	r3, [r4, #12]
 8008b10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b14:	81a3      	strh	r3, [r4, #12]
 8008b16:	e7ae      	b.n	8008a76 <__sflush_r+0x1a>
 8008b18:	690f      	ldr	r7, [r1, #16]
 8008b1a:	2f00      	cmp	r7, #0
 8008b1c:	d0aa      	beq.n	8008a74 <__sflush_r+0x18>
 8008b1e:	0793      	lsls	r3, r2, #30
 8008b20:	bf18      	it	ne
 8008b22:	2300      	movne	r3, #0
 8008b24:	680e      	ldr	r6, [r1, #0]
 8008b26:	bf08      	it	eq
 8008b28:	694b      	ldreq	r3, [r1, #20]
 8008b2a:	1bf6      	subs	r6, r6, r7
 8008b2c:	600f      	str	r7, [r1, #0]
 8008b2e:	608b      	str	r3, [r1, #8]
 8008b30:	2e00      	cmp	r6, #0
 8008b32:	dd9f      	ble.n	8008a74 <__sflush_r+0x18>
 8008b34:	4633      	mov	r3, r6
 8008b36:	463a      	mov	r2, r7
 8008b38:	4628      	mov	r0, r5
 8008b3a:	6a21      	ldr	r1, [r4, #32]
 8008b3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008b40:	47e0      	blx	ip
 8008b42:	2800      	cmp	r0, #0
 8008b44:	dc06      	bgt.n	8008b54 <__sflush_r+0xf8>
 8008b46:	89a3      	ldrh	r3, [r4, #12]
 8008b48:	f04f 30ff 	mov.w	r0, #4294967295
 8008b4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b50:	81a3      	strh	r3, [r4, #12]
 8008b52:	e790      	b.n	8008a76 <__sflush_r+0x1a>
 8008b54:	4407      	add	r7, r0
 8008b56:	1a36      	subs	r6, r6, r0
 8008b58:	e7ea      	b.n	8008b30 <__sflush_r+0xd4>
 8008b5a:	bf00      	nop
 8008b5c:	20400001 	.word	0x20400001

08008b60 <_fflush_r>:
 8008b60:	b538      	push	{r3, r4, r5, lr}
 8008b62:	690b      	ldr	r3, [r1, #16]
 8008b64:	4605      	mov	r5, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	b913      	cbnz	r3, 8008b70 <_fflush_r+0x10>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	4628      	mov	r0, r5
 8008b6e:	bd38      	pop	{r3, r4, r5, pc}
 8008b70:	b118      	cbz	r0, 8008b7a <_fflush_r+0x1a>
 8008b72:	6983      	ldr	r3, [r0, #24]
 8008b74:	b90b      	cbnz	r3, 8008b7a <_fflush_r+0x1a>
 8008b76:	f7fe fa47 	bl	8007008 <__sinit>
 8008b7a:	4b14      	ldr	r3, [pc, #80]	; (8008bcc <_fflush_r+0x6c>)
 8008b7c:	429c      	cmp	r4, r3
 8008b7e:	d11b      	bne.n	8008bb8 <_fflush_r+0x58>
 8008b80:	686c      	ldr	r4, [r5, #4]
 8008b82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d0ef      	beq.n	8008b6a <_fflush_r+0xa>
 8008b8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b8c:	07d0      	lsls	r0, r2, #31
 8008b8e:	d404      	bmi.n	8008b9a <_fflush_r+0x3a>
 8008b90:	0599      	lsls	r1, r3, #22
 8008b92:	d402      	bmi.n	8008b9a <_fflush_r+0x3a>
 8008b94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b96:	f7fe fafa 	bl	800718e <__retarget_lock_acquire_recursive>
 8008b9a:	4628      	mov	r0, r5
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	f7ff ff5d 	bl	8008a5c <__sflush_r>
 8008ba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008ba4:	4605      	mov	r5, r0
 8008ba6:	07da      	lsls	r2, r3, #31
 8008ba8:	d4e0      	bmi.n	8008b6c <_fflush_r+0xc>
 8008baa:	89a3      	ldrh	r3, [r4, #12]
 8008bac:	059b      	lsls	r3, r3, #22
 8008bae:	d4dd      	bmi.n	8008b6c <_fflush_r+0xc>
 8008bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008bb2:	f7fe faed 	bl	8007190 <__retarget_lock_release_recursive>
 8008bb6:	e7d9      	b.n	8008b6c <_fflush_r+0xc>
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <_fflush_r+0x70>)
 8008bba:	429c      	cmp	r4, r3
 8008bbc:	d101      	bne.n	8008bc2 <_fflush_r+0x62>
 8008bbe:	68ac      	ldr	r4, [r5, #8]
 8008bc0:	e7df      	b.n	8008b82 <_fflush_r+0x22>
 8008bc2:	4b04      	ldr	r3, [pc, #16]	; (8008bd4 <_fflush_r+0x74>)
 8008bc4:	429c      	cmp	r4, r3
 8008bc6:	bf08      	it	eq
 8008bc8:	68ec      	ldreq	r4, [r5, #12]
 8008bca:	e7da      	b.n	8008b82 <_fflush_r+0x22>
 8008bcc:	08009be4 	.word	0x08009be4
 8008bd0:	08009c04 	.word	0x08009c04
 8008bd4:	08009bc4 	.word	0x08009bc4

08008bd8 <_localeconv_r>:
 8008bd8:	4800      	ldr	r0, [pc, #0]	; (8008bdc <_localeconv_r+0x4>)
 8008bda:	4770      	bx	lr
 8008bdc:	20000164 	.word	0x20000164

08008be0 <_lseek_r>:
 8008be0:	b538      	push	{r3, r4, r5, lr}
 8008be2:	4604      	mov	r4, r0
 8008be4:	4608      	mov	r0, r1
 8008be6:	4611      	mov	r1, r2
 8008be8:	2200      	movs	r2, #0
 8008bea:	4d05      	ldr	r5, [pc, #20]	; (8008c00 <_lseek_r+0x20>)
 8008bec:	602a      	str	r2, [r5, #0]
 8008bee:	461a      	mov	r2, r3
 8008bf0:	f7f8 fdbc 	bl	800176c <_lseek>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d102      	bne.n	8008bfe <_lseek_r+0x1e>
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	b103      	cbz	r3, 8008bfe <_lseek_r+0x1e>
 8008bfc:	6023      	str	r3, [r4, #0]
 8008bfe:	bd38      	pop	{r3, r4, r5, pc}
 8008c00:	20001d4c 	.word	0x20001d4c

08008c04 <malloc>:
 8008c04:	4b02      	ldr	r3, [pc, #8]	; (8008c10 <malloc+0xc>)
 8008c06:	4601      	mov	r1, r0
 8008c08:	6818      	ldr	r0, [r3, #0]
 8008c0a:	f7fe baf9 	b.w	8007200 <_malloc_r>
 8008c0e:	bf00      	nop
 8008c10:	20000010 	.word	0x20000010

08008c14 <memchr>:
 8008c14:	4603      	mov	r3, r0
 8008c16:	b510      	push	{r4, lr}
 8008c18:	b2c9      	uxtb	r1, r1
 8008c1a:	4402      	add	r2, r0
 8008c1c:	4293      	cmp	r3, r2
 8008c1e:	4618      	mov	r0, r3
 8008c20:	d101      	bne.n	8008c26 <memchr+0x12>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e003      	b.n	8008c2e <memchr+0x1a>
 8008c26:	7804      	ldrb	r4, [r0, #0]
 8008c28:	3301      	adds	r3, #1
 8008c2a:	428c      	cmp	r4, r1
 8008c2c:	d1f6      	bne.n	8008c1c <memchr+0x8>
 8008c2e:	bd10      	pop	{r4, pc}

08008c30 <__malloc_lock>:
 8008c30:	4801      	ldr	r0, [pc, #4]	; (8008c38 <__malloc_lock+0x8>)
 8008c32:	f7fe baac 	b.w	800718e <__retarget_lock_acquire_recursive>
 8008c36:	bf00      	nop
 8008c38:	20001d40 	.word	0x20001d40

08008c3c <__malloc_unlock>:
 8008c3c:	4801      	ldr	r0, [pc, #4]	; (8008c44 <__malloc_unlock+0x8>)
 8008c3e:	f7fe baa7 	b.w	8007190 <__retarget_lock_release_recursive>
 8008c42:	bf00      	nop
 8008c44:	20001d40 	.word	0x20001d40

08008c48 <_Balloc>:
 8008c48:	b570      	push	{r4, r5, r6, lr}
 8008c4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	460d      	mov	r5, r1
 8008c50:	b976      	cbnz	r6, 8008c70 <_Balloc+0x28>
 8008c52:	2010      	movs	r0, #16
 8008c54:	f7ff ffd6 	bl	8008c04 <malloc>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	6260      	str	r0, [r4, #36]	; 0x24
 8008c5c:	b920      	cbnz	r0, 8008c68 <_Balloc+0x20>
 8008c5e:	2166      	movs	r1, #102	; 0x66
 8008c60:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <_Balloc+0x78>)
 8008c62:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <_Balloc+0x7c>)
 8008c64:	f000 fbe0 	bl	8009428 <__assert_func>
 8008c68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008c6c:	6006      	str	r6, [r0, #0]
 8008c6e:	60c6      	str	r6, [r0, #12]
 8008c70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008c72:	68f3      	ldr	r3, [r6, #12]
 8008c74:	b183      	cbz	r3, 8008c98 <_Balloc+0x50>
 8008c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008c7e:	b9b8      	cbnz	r0, 8008cb0 <_Balloc+0x68>
 8008c80:	2101      	movs	r1, #1
 8008c82:	fa01 f605 	lsl.w	r6, r1, r5
 8008c86:	1d72      	adds	r2, r6, #5
 8008c88:	4620      	mov	r0, r4
 8008c8a:	0092      	lsls	r2, r2, #2
 8008c8c:	f000 fb5e 	bl	800934c <_calloc_r>
 8008c90:	b160      	cbz	r0, 8008cac <_Balloc+0x64>
 8008c92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008c96:	e00e      	b.n	8008cb6 <_Balloc+0x6e>
 8008c98:	2221      	movs	r2, #33	; 0x21
 8008c9a:	2104      	movs	r1, #4
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f000 fb55 	bl	800934c <_calloc_r>
 8008ca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ca4:	60f0      	str	r0, [r6, #12]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e4      	bne.n	8008c76 <_Balloc+0x2e>
 8008cac:	2000      	movs	r0, #0
 8008cae:	bd70      	pop	{r4, r5, r6, pc}
 8008cb0:	6802      	ldr	r2, [r0, #0]
 8008cb2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008cbc:	e7f7      	b.n	8008cae <_Balloc+0x66>
 8008cbe:	bf00      	nop
 8008cc0:	08009c69 	.word	0x08009c69
 8008cc4:	08009cec 	.word	0x08009cec

08008cc8 <_Bfree>:
 8008cc8:	b570      	push	{r4, r5, r6, lr}
 8008cca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008ccc:	4605      	mov	r5, r0
 8008cce:	460c      	mov	r4, r1
 8008cd0:	b976      	cbnz	r6, 8008cf0 <_Bfree+0x28>
 8008cd2:	2010      	movs	r0, #16
 8008cd4:	f7ff ff96 	bl	8008c04 <malloc>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6268      	str	r0, [r5, #36]	; 0x24
 8008cdc:	b920      	cbnz	r0, 8008ce8 <_Bfree+0x20>
 8008cde:	218a      	movs	r1, #138	; 0x8a
 8008ce0:	4b08      	ldr	r3, [pc, #32]	; (8008d04 <_Bfree+0x3c>)
 8008ce2:	4809      	ldr	r0, [pc, #36]	; (8008d08 <_Bfree+0x40>)
 8008ce4:	f000 fba0 	bl	8009428 <__assert_func>
 8008ce8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008cec:	6006      	str	r6, [r0, #0]
 8008cee:	60c6      	str	r6, [r0, #12]
 8008cf0:	b13c      	cbz	r4, 8008d02 <_Bfree+0x3a>
 8008cf2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008cf4:	6862      	ldr	r2, [r4, #4]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008cfc:	6021      	str	r1, [r4, #0]
 8008cfe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008d02:	bd70      	pop	{r4, r5, r6, pc}
 8008d04:	08009c69 	.word	0x08009c69
 8008d08:	08009cec 	.word	0x08009cec

08008d0c <__multadd>:
 8008d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d10:	4607      	mov	r7, r0
 8008d12:	460c      	mov	r4, r1
 8008d14:	461e      	mov	r6, r3
 8008d16:	2000      	movs	r0, #0
 8008d18:	690d      	ldr	r5, [r1, #16]
 8008d1a:	f101 0c14 	add.w	ip, r1, #20
 8008d1e:	f8dc 3000 	ldr.w	r3, [ip]
 8008d22:	3001      	adds	r0, #1
 8008d24:	b299      	uxth	r1, r3
 8008d26:	fb02 6101 	mla	r1, r2, r1, r6
 8008d2a:	0c1e      	lsrs	r6, r3, #16
 8008d2c:	0c0b      	lsrs	r3, r1, #16
 8008d2e:	fb02 3306 	mla	r3, r2, r6, r3
 8008d32:	b289      	uxth	r1, r1
 8008d34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008d38:	4285      	cmp	r5, r0
 8008d3a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008d3e:	f84c 1b04 	str.w	r1, [ip], #4
 8008d42:	dcec      	bgt.n	8008d1e <__multadd+0x12>
 8008d44:	b30e      	cbz	r6, 8008d8a <__multadd+0x7e>
 8008d46:	68a3      	ldr	r3, [r4, #8]
 8008d48:	42ab      	cmp	r3, r5
 8008d4a:	dc19      	bgt.n	8008d80 <__multadd+0x74>
 8008d4c:	6861      	ldr	r1, [r4, #4]
 8008d4e:	4638      	mov	r0, r7
 8008d50:	3101      	adds	r1, #1
 8008d52:	f7ff ff79 	bl	8008c48 <_Balloc>
 8008d56:	4680      	mov	r8, r0
 8008d58:	b928      	cbnz	r0, 8008d66 <__multadd+0x5a>
 8008d5a:	4602      	mov	r2, r0
 8008d5c:	21b5      	movs	r1, #181	; 0xb5
 8008d5e:	4b0c      	ldr	r3, [pc, #48]	; (8008d90 <__multadd+0x84>)
 8008d60:	480c      	ldr	r0, [pc, #48]	; (8008d94 <__multadd+0x88>)
 8008d62:	f000 fb61 	bl	8009428 <__assert_func>
 8008d66:	6922      	ldr	r2, [r4, #16]
 8008d68:	f104 010c 	add.w	r1, r4, #12
 8008d6c:	3202      	adds	r2, #2
 8008d6e:	0092      	lsls	r2, r2, #2
 8008d70:	300c      	adds	r0, #12
 8008d72:	f7fe fa0e 	bl	8007192 <memcpy>
 8008d76:	4621      	mov	r1, r4
 8008d78:	4638      	mov	r0, r7
 8008d7a:	f7ff ffa5 	bl	8008cc8 <_Bfree>
 8008d7e:	4644      	mov	r4, r8
 8008d80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008d84:	3501      	adds	r5, #1
 8008d86:	615e      	str	r6, [r3, #20]
 8008d88:	6125      	str	r5, [r4, #16]
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d90:	08009cdb 	.word	0x08009cdb
 8008d94:	08009cec 	.word	0x08009cec

08008d98 <__hi0bits>:
 8008d98:	0c02      	lsrs	r2, r0, #16
 8008d9a:	0412      	lsls	r2, r2, #16
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	b9ca      	cbnz	r2, 8008dd4 <__hi0bits+0x3c>
 8008da0:	0403      	lsls	r3, r0, #16
 8008da2:	2010      	movs	r0, #16
 8008da4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8008da8:	bf04      	itt	eq
 8008daa:	021b      	lsleq	r3, r3, #8
 8008dac:	3008      	addeq	r0, #8
 8008dae:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8008db2:	bf04      	itt	eq
 8008db4:	011b      	lsleq	r3, r3, #4
 8008db6:	3004      	addeq	r0, #4
 8008db8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8008dbc:	bf04      	itt	eq
 8008dbe:	009b      	lsleq	r3, r3, #2
 8008dc0:	3002      	addeq	r0, #2
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	db05      	blt.n	8008dd2 <__hi0bits+0x3a>
 8008dc6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8008dca:	f100 0001 	add.w	r0, r0, #1
 8008dce:	bf08      	it	eq
 8008dd0:	2020      	moveq	r0, #32
 8008dd2:	4770      	bx	lr
 8008dd4:	2000      	movs	r0, #0
 8008dd6:	e7e5      	b.n	8008da4 <__hi0bits+0xc>

08008dd8 <__lo0bits>:
 8008dd8:	6803      	ldr	r3, [r0, #0]
 8008dda:	4602      	mov	r2, r0
 8008ddc:	f013 0007 	ands.w	r0, r3, #7
 8008de0:	d00b      	beq.n	8008dfa <__lo0bits+0x22>
 8008de2:	07d9      	lsls	r1, r3, #31
 8008de4:	d421      	bmi.n	8008e2a <__lo0bits+0x52>
 8008de6:	0798      	lsls	r0, r3, #30
 8008de8:	bf49      	itett	mi
 8008dea:	085b      	lsrmi	r3, r3, #1
 8008dec:	089b      	lsrpl	r3, r3, #2
 8008dee:	2001      	movmi	r0, #1
 8008df0:	6013      	strmi	r3, [r2, #0]
 8008df2:	bf5c      	itt	pl
 8008df4:	2002      	movpl	r0, #2
 8008df6:	6013      	strpl	r3, [r2, #0]
 8008df8:	4770      	bx	lr
 8008dfa:	b299      	uxth	r1, r3
 8008dfc:	b909      	cbnz	r1, 8008e02 <__lo0bits+0x2a>
 8008dfe:	2010      	movs	r0, #16
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	b2d9      	uxtb	r1, r3
 8008e04:	b909      	cbnz	r1, 8008e0a <__lo0bits+0x32>
 8008e06:	3008      	adds	r0, #8
 8008e08:	0a1b      	lsrs	r3, r3, #8
 8008e0a:	0719      	lsls	r1, r3, #28
 8008e0c:	bf04      	itt	eq
 8008e0e:	091b      	lsreq	r3, r3, #4
 8008e10:	3004      	addeq	r0, #4
 8008e12:	0799      	lsls	r1, r3, #30
 8008e14:	bf04      	itt	eq
 8008e16:	089b      	lsreq	r3, r3, #2
 8008e18:	3002      	addeq	r0, #2
 8008e1a:	07d9      	lsls	r1, r3, #31
 8008e1c:	d403      	bmi.n	8008e26 <__lo0bits+0x4e>
 8008e1e:	085b      	lsrs	r3, r3, #1
 8008e20:	f100 0001 	add.w	r0, r0, #1
 8008e24:	d003      	beq.n	8008e2e <__lo0bits+0x56>
 8008e26:	6013      	str	r3, [r2, #0]
 8008e28:	4770      	bx	lr
 8008e2a:	2000      	movs	r0, #0
 8008e2c:	4770      	bx	lr
 8008e2e:	2020      	movs	r0, #32
 8008e30:	4770      	bx	lr
	...

08008e34 <__i2b>:
 8008e34:	b510      	push	{r4, lr}
 8008e36:	460c      	mov	r4, r1
 8008e38:	2101      	movs	r1, #1
 8008e3a:	f7ff ff05 	bl	8008c48 <_Balloc>
 8008e3e:	4602      	mov	r2, r0
 8008e40:	b928      	cbnz	r0, 8008e4e <__i2b+0x1a>
 8008e42:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8008e46:	4b04      	ldr	r3, [pc, #16]	; (8008e58 <__i2b+0x24>)
 8008e48:	4804      	ldr	r0, [pc, #16]	; (8008e5c <__i2b+0x28>)
 8008e4a:	f000 faed 	bl	8009428 <__assert_func>
 8008e4e:	2301      	movs	r3, #1
 8008e50:	6144      	str	r4, [r0, #20]
 8008e52:	6103      	str	r3, [r0, #16]
 8008e54:	bd10      	pop	{r4, pc}
 8008e56:	bf00      	nop
 8008e58:	08009cdb 	.word	0x08009cdb
 8008e5c:	08009cec 	.word	0x08009cec

08008e60 <__multiply>:
 8008e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e64:	4691      	mov	r9, r2
 8008e66:	690a      	ldr	r2, [r1, #16]
 8008e68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e6c:	460c      	mov	r4, r1
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	bfbe      	ittt	lt
 8008e72:	460b      	movlt	r3, r1
 8008e74:	464c      	movlt	r4, r9
 8008e76:	4699      	movlt	r9, r3
 8008e78:	6927      	ldr	r7, [r4, #16]
 8008e7a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008e7e:	68a3      	ldr	r3, [r4, #8]
 8008e80:	6861      	ldr	r1, [r4, #4]
 8008e82:	eb07 060a 	add.w	r6, r7, sl
 8008e86:	42b3      	cmp	r3, r6
 8008e88:	b085      	sub	sp, #20
 8008e8a:	bfb8      	it	lt
 8008e8c:	3101      	addlt	r1, #1
 8008e8e:	f7ff fedb 	bl	8008c48 <_Balloc>
 8008e92:	b930      	cbnz	r0, 8008ea2 <__multiply+0x42>
 8008e94:	4602      	mov	r2, r0
 8008e96:	f240 115d 	movw	r1, #349	; 0x15d
 8008e9a:	4b43      	ldr	r3, [pc, #268]	; (8008fa8 <__multiply+0x148>)
 8008e9c:	4843      	ldr	r0, [pc, #268]	; (8008fac <__multiply+0x14c>)
 8008e9e:	f000 fac3 	bl	8009428 <__assert_func>
 8008ea2:	f100 0514 	add.w	r5, r0, #20
 8008ea6:	462b      	mov	r3, r5
 8008ea8:	2200      	movs	r2, #0
 8008eaa:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008eae:	4543      	cmp	r3, r8
 8008eb0:	d321      	bcc.n	8008ef6 <__multiply+0x96>
 8008eb2:	f104 0314 	add.w	r3, r4, #20
 8008eb6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008eba:	f109 0314 	add.w	r3, r9, #20
 8008ebe:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8008ec2:	9202      	str	r2, [sp, #8]
 8008ec4:	1b3a      	subs	r2, r7, r4
 8008ec6:	3a15      	subs	r2, #21
 8008ec8:	f022 0203 	bic.w	r2, r2, #3
 8008ecc:	3204      	adds	r2, #4
 8008ece:	f104 0115 	add.w	r1, r4, #21
 8008ed2:	428f      	cmp	r7, r1
 8008ed4:	bf38      	it	cc
 8008ed6:	2204      	movcc	r2, #4
 8008ed8:	9201      	str	r2, [sp, #4]
 8008eda:	9a02      	ldr	r2, [sp, #8]
 8008edc:	9303      	str	r3, [sp, #12]
 8008ede:	429a      	cmp	r2, r3
 8008ee0:	d80c      	bhi.n	8008efc <__multiply+0x9c>
 8008ee2:	2e00      	cmp	r6, #0
 8008ee4:	dd03      	ble.n	8008eee <__multiply+0x8e>
 8008ee6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d059      	beq.n	8008fa2 <__multiply+0x142>
 8008eee:	6106      	str	r6, [r0, #16]
 8008ef0:	b005      	add	sp, #20
 8008ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ef6:	f843 2b04 	str.w	r2, [r3], #4
 8008efa:	e7d8      	b.n	8008eae <__multiply+0x4e>
 8008efc:	f8b3 a000 	ldrh.w	sl, [r3]
 8008f00:	f1ba 0f00 	cmp.w	sl, #0
 8008f04:	d023      	beq.n	8008f4e <__multiply+0xee>
 8008f06:	46a9      	mov	r9, r5
 8008f08:	f04f 0c00 	mov.w	ip, #0
 8008f0c:	f104 0e14 	add.w	lr, r4, #20
 8008f10:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008f14:	f8d9 1000 	ldr.w	r1, [r9]
 8008f18:	fa1f fb82 	uxth.w	fp, r2
 8008f1c:	b289      	uxth	r1, r1
 8008f1e:	fb0a 110b 	mla	r1, sl, fp, r1
 8008f22:	4461      	add	r1, ip
 8008f24:	f8d9 c000 	ldr.w	ip, [r9]
 8008f28:	0c12      	lsrs	r2, r2, #16
 8008f2a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008f2e:	fb0a c202 	mla	r2, sl, r2, ip
 8008f32:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008f36:	b289      	uxth	r1, r1
 8008f38:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008f3c:	4577      	cmp	r7, lr
 8008f3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008f42:	f849 1b04 	str.w	r1, [r9], #4
 8008f46:	d8e3      	bhi.n	8008f10 <__multiply+0xb0>
 8008f48:	9a01      	ldr	r2, [sp, #4]
 8008f4a:	f845 c002 	str.w	ip, [r5, r2]
 8008f4e:	9a03      	ldr	r2, [sp, #12]
 8008f50:	3304      	adds	r3, #4
 8008f52:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008f56:	f1b9 0f00 	cmp.w	r9, #0
 8008f5a:	d020      	beq.n	8008f9e <__multiply+0x13e>
 8008f5c:	46ae      	mov	lr, r5
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	6829      	ldr	r1, [r5, #0]
 8008f64:	f104 0c14 	add.w	ip, r4, #20
 8008f68:	f8bc b000 	ldrh.w	fp, [ip]
 8008f6c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008f70:	b289      	uxth	r1, r1
 8008f72:	fb09 220b 	mla	r2, r9, fp, r2
 8008f76:	4492      	add	sl, r2
 8008f78:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008f7c:	f84e 1b04 	str.w	r1, [lr], #4
 8008f80:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008f84:	f8be 1000 	ldrh.w	r1, [lr]
 8008f88:	0c12      	lsrs	r2, r2, #16
 8008f8a:	fb09 1102 	mla	r1, r9, r2, r1
 8008f8e:	4567      	cmp	r7, ip
 8008f90:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008f94:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008f98:	d8e6      	bhi.n	8008f68 <__multiply+0x108>
 8008f9a:	9a01      	ldr	r2, [sp, #4]
 8008f9c:	50a9      	str	r1, [r5, r2]
 8008f9e:	3504      	adds	r5, #4
 8008fa0:	e79b      	b.n	8008eda <__multiply+0x7a>
 8008fa2:	3e01      	subs	r6, #1
 8008fa4:	e79d      	b.n	8008ee2 <__multiply+0x82>
 8008fa6:	bf00      	nop
 8008fa8:	08009cdb 	.word	0x08009cdb
 8008fac:	08009cec 	.word	0x08009cec

08008fb0 <__pow5mult>:
 8008fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008fb4:	4615      	mov	r5, r2
 8008fb6:	f012 0203 	ands.w	r2, r2, #3
 8008fba:	4606      	mov	r6, r0
 8008fbc:	460f      	mov	r7, r1
 8008fbe:	d007      	beq.n	8008fd0 <__pow5mult+0x20>
 8008fc0:	4c25      	ldr	r4, [pc, #148]	; (8009058 <__pow5mult+0xa8>)
 8008fc2:	3a01      	subs	r2, #1
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008fca:	f7ff fe9f 	bl	8008d0c <__multadd>
 8008fce:	4607      	mov	r7, r0
 8008fd0:	10ad      	asrs	r5, r5, #2
 8008fd2:	d03d      	beq.n	8009050 <__pow5mult+0xa0>
 8008fd4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008fd6:	b97c      	cbnz	r4, 8008ff8 <__pow5mult+0x48>
 8008fd8:	2010      	movs	r0, #16
 8008fda:	f7ff fe13 	bl	8008c04 <malloc>
 8008fde:	4602      	mov	r2, r0
 8008fe0:	6270      	str	r0, [r6, #36]	; 0x24
 8008fe2:	b928      	cbnz	r0, 8008ff0 <__pow5mult+0x40>
 8008fe4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008fe8:	4b1c      	ldr	r3, [pc, #112]	; (800905c <__pow5mult+0xac>)
 8008fea:	481d      	ldr	r0, [pc, #116]	; (8009060 <__pow5mult+0xb0>)
 8008fec:	f000 fa1c 	bl	8009428 <__assert_func>
 8008ff0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008ff4:	6004      	str	r4, [r0, #0]
 8008ff6:	60c4      	str	r4, [r0, #12]
 8008ff8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008ffc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009000:	b94c      	cbnz	r4, 8009016 <__pow5mult+0x66>
 8009002:	f240 2171 	movw	r1, #625	; 0x271
 8009006:	4630      	mov	r0, r6
 8009008:	f7ff ff14 	bl	8008e34 <__i2b>
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	f8c8 0008 	str.w	r0, [r8, #8]
 8009014:	6003      	str	r3, [r0, #0]
 8009016:	f04f 0900 	mov.w	r9, #0
 800901a:	07eb      	lsls	r3, r5, #31
 800901c:	d50a      	bpl.n	8009034 <__pow5mult+0x84>
 800901e:	4639      	mov	r1, r7
 8009020:	4622      	mov	r2, r4
 8009022:	4630      	mov	r0, r6
 8009024:	f7ff ff1c 	bl	8008e60 <__multiply>
 8009028:	4680      	mov	r8, r0
 800902a:	4639      	mov	r1, r7
 800902c:	4630      	mov	r0, r6
 800902e:	f7ff fe4b 	bl	8008cc8 <_Bfree>
 8009032:	4647      	mov	r7, r8
 8009034:	106d      	asrs	r5, r5, #1
 8009036:	d00b      	beq.n	8009050 <__pow5mult+0xa0>
 8009038:	6820      	ldr	r0, [r4, #0]
 800903a:	b938      	cbnz	r0, 800904c <__pow5mult+0x9c>
 800903c:	4622      	mov	r2, r4
 800903e:	4621      	mov	r1, r4
 8009040:	4630      	mov	r0, r6
 8009042:	f7ff ff0d 	bl	8008e60 <__multiply>
 8009046:	6020      	str	r0, [r4, #0]
 8009048:	f8c0 9000 	str.w	r9, [r0]
 800904c:	4604      	mov	r4, r0
 800904e:	e7e4      	b.n	800901a <__pow5mult+0x6a>
 8009050:	4638      	mov	r0, r7
 8009052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009056:	bf00      	nop
 8009058:	08009e38 	.word	0x08009e38
 800905c:	08009c69 	.word	0x08009c69
 8009060:	08009cec 	.word	0x08009cec

08009064 <__lshift>:
 8009064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009068:	460c      	mov	r4, r1
 800906a:	4607      	mov	r7, r0
 800906c:	4691      	mov	r9, r2
 800906e:	6923      	ldr	r3, [r4, #16]
 8009070:	6849      	ldr	r1, [r1, #4]
 8009072:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009076:	68a3      	ldr	r3, [r4, #8]
 8009078:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800907c:	f108 0601 	add.w	r6, r8, #1
 8009080:	42b3      	cmp	r3, r6
 8009082:	db0b      	blt.n	800909c <__lshift+0x38>
 8009084:	4638      	mov	r0, r7
 8009086:	f7ff fddf 	bl	8008c48 <_Balloc>
 800908a:	4605      	mov	r5, r0
 800908c:	b948      	cbnz	r0, 80090a2 <__lshift+0x3e>
 800908e:	4602      	mov	r2, r0
 8009090:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009094:	4b29      	ldr	r3, [pc, #164]	; (800913c <__lshift+0xd8>)
 8009096:	482a      	ldr	r0, [pc, #168]	; (8009140 <__lshift+0xdc>)
 8009098:	f000 f9c6 	bl	8009428 <__assert_func>
 800909c:	3101      	adds	r1, #1
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	e7ee      	b.n	8009080 <__lshift+0x1c>
 80090a2:	2300      	movs	r3, #0
 80090a4:	f100 0114 	add.w	r1, r0, #20
 80090a8:	f100 0210 	add.w	r2, r0, #16
 80090ac:	4618      	mov	r0, r3
 80090ae:	4553      	cmp	r3, sl
 80090b0:	db37      	blt.n	8009122 <__lshift+0xbe>
 80090b2:	6920      	ldr	r0, [r4, #16]
 80090b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80090b8:	f104 0314 	add.w	r3, r4, #20
 80090bc:	f019 091f 	ands.w	r9, r9, #31
 80090c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80090c4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80090c8:	d02f      	beq.n	800912a <__lshift+0xc6>
 80090ca:	468a      	mov	sl, r1
 80090cc:	f04f 0c00 	mov.w	ip, #0
 80090d0:	f1c9 0e20 	rsb	lr, r9, #32
 80090d4:	681a      	ldr	r2, [r3, #0]
 80090d6:	fa02 f209 	lsl.w	r2, r2, r9
 80090da:	ea42 020c 	orr.w	r2, r2, ip
 80090de:	f84a 2b04 	str.w	r2, [sl], #4
 80090e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e6:	4298      	cmp	r0, r3
 80090e8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80090ec:	d8f2      	bhi.n	80090d4 <__lshift+0x70>
 80090ee:	1b03      	subs	r3, r0, r4
 80090f0:	3b15      	subs	r3, #21
 80090f2:	f023 0303 	bic.w	r3, r3, #3
 80090f6:	3304      	adds	r3, #4
 80090f8:	f104 0215 	add.w	r2, r4, #21
 80090fc:	4290      	cmp	r0, r2
 80090fe:	bf38      	it	cc
 8009100:	2304      	movcc	r3, #4
 8009102:	f841 c003 	str.w	ip, [r1, r3]
 8009106:	f1bc 0f00 	cmp.w	ip, #0
 800910a:	d001      	beq.n	8009110 <__lshift+0xac>
 800910c:	f108 0602 	add.w	r6, r8, #2
 8009110:	3e01      	subs	r6, #1
 8009112:	4638      	mov	r0, r7
 8009114:	4621      	mov	r1, r4
 8009116:	612e      	str	r6, [r5, #16]
 8009118:	f7ff fdd6 	bl	8008cc8 <_Bfree>
 800911c:	4628      	mov	r0, r5
 800911e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009122:	f842 0f04 	str.w	r0, [r2, #4]!
 8009126:	3301      	adds	r3, #1
 8009128:	e7c1      	b.n	80090ae <__lshift+0x4a>
 800912a:	3904      	subs	r1, #4
 800912c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009130:	4298      	cmp	r0, r3
 8009132:	f841 2f04 	str.w	r2, [r1, #4]!
 8009136:	d8f9      	bhi.n	800912c <__lshift+0xc8>
 8009138:	e7ea      	b.n	8009110 <__lshift+0xac>
 800913a:	bf00      	nop
 800913c:	08009cdb 	.word	0x08009cdb
 8009140:	08009cec 	.word	0x08009cec

08009144 <__mcmp>:
 8009144:	4603      	mov	r3, r0
 8009146:	690a      	ldr	r2, [r1, #16]
 8009148:	6900      	ldr	r0, [r0, #16]
 800914a:	b530      	push	{r4, r5, lr}
 800914c:	1a80      	subs	r0, r0, r2
 800914e:	d10d      	bne.n	800916c <__mcmp+0x28>
 8009150:	3314      	adds	r3, #20
 8009152:	3114      	adds	r1, #20
 8009154:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009158:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800915c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009160:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009164:	4295      	cmp	r5, r2
 8009166:	d002      	beq.n	800916e <__mcmp+0x2a>
 8009168:	d304      	bcc.n	8009174 <__mcmp+0x30>
 800916a:	2001      	movs	r0, #1
 800916c:	bd30      	pop	{r4, r5, pc}
 800916e:	42a3      	cmp	r3, r4
 8009170:	d3f4      	bcc.n	800915c <__mcmp+0x18>
 8009172:	e7fb      	b.n	800916c <__mcmp+0x28>
 8009174:	f04f 30ff 	mov.w	r0, #4294967295
 8009178:	e7f8      	b.n	800916c <__mcmp+0x28>
	...

0800917c <__mdiff>:
 800917c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009180:	460d      	mov	r5, r1
 8009182:	4607      	mov	r7, r0
 8009184:	4611      	mov	r1, r2
 8009186:	4628      	mov	r0, r5
 8009188:	4614      	mov	r4, r2
 800918a:	f7ff ffdb 	bl	8009144 <__mcmp>
 800918e:	1e06      	subs	r6, r0, #0
 8009190:	d111      	bne.n	80091b6 <__mdiff+0x3a>
 8009192:	4631      	mov	r1, r6
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff fd57 	bl	8008c48 <_Balloc>
 800919a:	4602      	mov	r2, r0
 800919c:	b928      	cbnz	r0, 80091aa <__mdiff+0x2e>
 800919e:	f240 2132 	movw	r1, #562	; 0x232
 80091a2:	4b3a      	ldr	r3, [pc, #232]	; (800928c <__mdiff+0x110>)
 80091a4:	483a      	ldr	r0, [pc, #232]	; (8009290 <__mdiff+0x114>)
 80091a6:	f000 f93f 	bl	8009428 <__assert_func>
 80091aa:	2301      	movs	r3, #1
 80091ac:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80091b0:	4610      	mov	r0, r2
 80091b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b6:	bfa4      	itt	ge
 80091b8:	4623      	movge	r3, r4
 80091ba:	462c      	movge	r4, r5
 80091bc:	4638      	mov	r0, r7
 80091be:	6861      	ldr	r1, [r4, #4]
 80091c0:	bfa6      	itte	ge
 80091c2:	461d      	movge	r5, r3
 80091c4:	2600      	movge	r6, #0
 80091c6:	2601      	movlt	r6, #1
 80091c8:	f7ff fd3e 	bl	8008c48 <_Balloc>
 80091cc:	4602      	mov	r2, r0
 80091ce:	b918      	cbnz	r0, 80091d8 <__mdiff+0x5c>
 80091d0:	f44f 7110 	mov.w	r1, #576	; 0x240
 80091d4:	4b2d      	ldr	r3, [pc, #180]	; (800928c <__mdiff+0x110>)
 80091d6:	e7e5      	b.n	80091a4 <__mdiff+0x28>
 80091d8:	f102 0814 	add.w	r8, r2, #20
 80091dc:	46c2      	mov	sl, r8
 80091de:	f04f 0c00 	mov.w	ip, #0
 80091e2:	6927      	ldr	r7, [r4, #16]
 80091e4:	60c6      	str	r6, [r0, #12]
 80091e6:	692e      	ldr	r6, [r5, #16]
 80091e8:	f104 0014 	add.w	r0, r4, #20
 80091ec:	f105 0914 	add.w	r9, r5, #20
 80091f0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80091f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80091f8:	3410      	adds	r4, #16
 80091fa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80091fe:	f859 3b04 	ldr.w	r3, [r9], #4
 8009202:	fa1f f18b 	uxth.w	r1, fp
 8009206:	448c      	add	ip, r1
 8009208:	b299      	uxth	r1, r3
 800920a:	0c1b      	lsrs	r3, r3, #16
 800920c:	ebac 0101 	sub.w	r1, ip, r1
 8009210:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009214:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8009218:	b289      	uxth	r1, r1
 800921a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800921e:	454e      	cmp	r6, r9
 8009220:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8009224:	f84a 3b04 	str.w	r3, [sl], #4
 8009228:	d8e7      	bhi.n	80091fa <__mdiff+0x7e>
 800922a:	1b73      	subs	r3, r6, r5
 800922c:	3b15      	subs	r3, #21
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	3515      	adds	r5, #21
 8009234:	3304      	adds	r3, #4
 8009236:	42ae      	cmp	r6, r5
 8009238:	bf38      	it	cc
 800923a:	2304      	movcc	r3, #4
 800923c:	4418      	add	r0, r3
 800923e:	4443      	add	r3, r8
 8009240:	461e      	mov	r6, r3
 8009242:	4605      	mov	r5, r0
 8009244:	4575      	cmp	r5, lr
 8009246:	d30e      	bcc.n	8009266 <__mdiff+0xea>
 8009248:	f10e 0103 	add.w	r1, lr, #3
 800924c:	1a09      	subs	r1, r1, r0
 800924e:	f021 0103 	bic.w	r1, r1, #3
 8009252:	3803      	subs	r0, #3
 8009254:	4586      	cmp	lr, r0
 8009256:	bf38      	it	cc
 8009258:	2100      	movcc	r1, #0
 800925a:	4419      	add	r1, r3
 800925c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8009260:	b18b      	cbz	r3, 8009286 <__mdiff+0x10a>
 8009262:	6117      	str	r7, [r2, #16]
 8009264:	e7a4      	b.n	80091b0 <__mdiff+0x34>
 8009266:	f855 8b04 	ldr.w	r8, [r5], #4
 800926a:	fa1f f188 	uxth.w	r1, r8
 800926e:	4461      	add	r1, ip
 8009270:	140c      	asrs	r4, r1, #16
 8009272:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009276:	b289      	uxth	r1, r1
 8009278:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800927c:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8009280:	f846 1b04 	str.w	r1, [r6], #4
 8009284:	e7de      	b.n	8009244 <__mdiff+0xc8>
 8009286:	3f01      	subs	r7, #1
 8009288:	e7e8      	b.n	800925c <__mdiff+0xe0>
 800928a:	bf00      	nop
 800928c:	08009cdb 	.word	0x08009cdb
 8009290:	08009cec 	.word	0x08009cec

08009294 <__d2b>:
 8009294:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009298:	2101      	movs	r1, #1
 800929a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800929e:	4690      	mov	r8, r2
 80092a0:	461d      	mov	r5, r3
 80092a2:	f7ff fcd1 	bl	8008c48 <_Balloc>
 80092a6:	4604      	mov	r4, r0
 80092a8:	b930      	cbnz	r0, 80092b8 <__d2b+0x24>
 80092aa:	4602      	mov	r2, r0
 80092ac:	f240 310a 	movw	r1, #778	; 0x30a
 80092b0:	4b24      	ldr	r3, [pc, #144]	; (8009344 <__d2b+0xb0>)
 80092b2:	4825      	ldr	r0, [pc, #148]	; (8009348 <__d2b+0xb4>)
 80092b4:	f000 f8b8 	bl	8009428 <__assert_func>
 80092b8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80092bc:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80092c0:	bb2d      	cbnz	r5, 800930e <__d2b+0x7a>
 80092c2:	9301      	str	r3, [sp, #4]
 80092c4:	f1b8 0300 	subs.w	r3, r8, #0
 80092c8:	d026      	beq.n	8009318 <__d2b+0x84>
 80092ca:	4668      	mov	r0, sp
 80092cc:	9300      	str	r3, [sp, #0]
 80092ce:	f7ff fd83 	bl	8008dd8 <__lo0bits>
 80092d2:	9900      	ldr	r1, [sp, #0]
 80092d4:	b1f0      	cbz	r0, 8009314 <__d2b+0x80>
 80092d6:	9a01      	ldr	r2, [sp, #4]
 80092d8:	f1c0 0320 	rsb	r3, r0, #32
 80092dc:	fa02 f303 	lsl.w	r3, r2, r3
 80092e0:	430b      	orrs	r3, r1
 80092e2:	40c2      	lsrs	r2, r0
 80092e4:	6163      	str	r3, [r4, #20]
 80092e6:	9201      	str	r2, [sp, #4]
 80092e8:	9b01      	ldr	r3, [sp, #4]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	bf14      	ite	ne
 80092ee:	2102      	movne	r1, #2
 80092f0:	2101      	moveq	r1, #1
 80092f2:	61a3      	str	r3, [r4, #24]
 80092f4:	6121      	str	r1, [r4, #16]
 80092f6:	b1c5      	cbz	r5, 800932a <__d2b+0x96>
 80092f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80092fc:	4405      	add	r5, r0
 80092fe:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009302:	603d      	str	r5, [r7, #0]
 8009304:	6030      	str	r0, [r6, #0]
 8009306:	4620      	mov	r0, r4
 8009308:	b002      	add	sp, #8
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009312:	e7d6      	b.n	80092c2 <__d2b+0x2e>
 8009314:	6161      	str	r1, [r4, #20]
 8009316:	e7e7      	b.n	80092e8 <__d2b+0x54>
 8009318:	a801      	add	r0, sp, #4
 800931a:	f7ff fd5d 	bl	8008dd8 <__lo0bits>
 800931e:	2101      	movs	r1, #1
 8009320:	9b01      	ldr	r3, [sp, #4]
 8009322:	6121      	str	r1, [r4, #16]
 8009324:	6163      	str	r3, [r4, #20]
 8009326:	3020      	adds	r0, #32
 8009328:	e7e5      	b.n	80092f6 <__d2b+0x62>
 800932a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800932e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009332:	6038      	str	r0, [r7, #0]
 8009334:	6918      	ldr	r0, [r3, #16]
 8009336:	f7ff fd2f 	bl	8008d98 <__hi0bits>
 800933a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800933e:	6031      	str	r1, [r6, #0]
 8009340:	e7e1      	b.n	8009306 <__d2b+0x72>
 8009342:	bf00      	nop
 8009344:	08009cdb 	.word	0x08009cdb
 8009348:	08009cec 	.word	0x08009cec

0800934c <_calloc_r>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	fba1 5402 	umull	r5, r4, r1, r2
 8009352:	b934      	cbnz	r4, 8009362 <_calloc_r+0x16>
 8009354:	4629      	mov	r1, r5
 8009356:	f7fd ff53 	bl	8007200 <_malloc_r>
 800935a:	4606      	mov	r6, r0
 800935c:	b928      	cbnz	r0, 800936a <_calloc_r+0x1e>
 800935e:	4630      	mov	r0, r6
 8009360:	bd70      	pop	{r4, r5, r6, pc}
 8009362:	220c      	movs	r2, #12
 8009364:	2600      	movs	r6, #0
 8009366:	6002      	str	r2, [r0, #0]
 8009368:	e7f9      	b.n	800935e <_calloc_r+0x12>
 800936a:	462a      	mov	r2, r5
 800936c:	4621      	mov	r1, r4
 800936e:	f7fd ff1e 	bl	80071ae <memset>
 8009372:	e7f4      	b.n	800935e <_calloc_r+0x12>

08009374 <_free_r>:
 8009374:	b538      	push	{r3, r4, r5, lr}
 8009376:	4605      	mov	r5, r0
 8009378:	2900      	cmp	r1, #0
 800937a:	d040      	beq.n	80093fe <_free_r+0x8a>
 800937c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009380:	1f0c      	subs	r4, r1, #4
 8009382:	2b00      	cmp	r3, #0
 8009384:	bfb8      	it	lt
 8009386:	18e4      	addlt	r4, r4, r3
 8009388:	f7ff fc52 	bl	8008c30 <__malloc_lock>
 800938c:	4a1c      	ldr	r2, [pc, #112]	; (8009400 <_free_r+0x8c>)
 800938e:	6813      	ldr	r3, [r2, #0]
 8009390:	b933      	cbnz	r3, 80093a0 <_free_r+0x2c>
 8009392:	6063      	str	r3, [r4, #4]
 8009394:	6014      	str	r4, [r2, #0]
 8009396:	4628      	mov	r0, r5
 8009398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800939c:	f7ff bc4e 	b.w	8008c3c <__malloc_unlock>
 80093a0:	42a3      	cmp	r3, r4
 80093a2:	d908      	bls.n	80093b6 <_free_r+0x42>
 80093a4:	6820      	ldr	r0, [r4, #0]
 80093a6:	1821      	adds	r1, r4, r0
 80093a8:	428b      	cmp	r3, r1
 80093aa:	bf01      	itttt	eq
 80093ac:	6819      	ldreq	r1, [r3, #0]
 80093ae:	685b      	ldreq	r3, [r3, #4]
 80093b0:	1809      	addeq	r1, r1, r0
 80093b2:	6021      	streq	r1, [r4, #0]
 80093b4:	e7ed      	b.n	8009392 <_free_r+0x1e>
 80093b6:	461a      	mov	r2, r3
 80093b8:	685b      	ldr	r3, [r3, #4]
 80093ba:	b10b      	cbz	r3, 80093c0 <_free_r+0x4c>
 80093bc:	42a3      	cmp	r3, r4
 80093be:	d9fa      	bls.n	80093b6 <_free_r+0x42>
 80093c0:	6811      	ldr	r1, [r2, #0]
 80093c2:	1850      	adds	r0, r2, r1
 80093c4:	42a0      	cmp	r0, r4
 80093c6:	d10b      	bne.n	80093e0 <_free_r+0x6c>
 80093c8:	6820      	ldr	r0, [r4, #0]
 80093ca:	4401      	add	r1, r0
 80093cc:	1850      	adds	r0, r2, r1
 80093ce:	4283      	cmp	r3, r0
 80093d0:	6011      	str	r1, [r2, #0]
 80093d2:	d1e0      	bne.n	8009396 <_free_r+0x22>
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	685b      	ldr	r3, [r3, #4]
 80093d8:	4401      	add	r1, r0
 80093da:	6011      	str	r1, [r2, #0]
 80093dc:	6053      	str	r3, [r2, #4]
 80093de:	e7da      	b.n	8009396 <_free_r+0x22>
 80093e0:	d902      	bls.n	80093e8 <_free_r+0x74>
 80093e2:	230c      	movs	r3, #12
 80093e4:	602b      	str	r3, [r5, #0]
 80093e6:	e7d6      	b.n	8009396 <_free_r+0x22>
 80093e8:	6820      	ldr	r0, [r4, #0]
 80093ea:	1821      	adds	r1, r4, r0
 80093ec:	428b      	cmp	r3, r1
 80093ee:	bf01      	itttt	eq
 80093f0:	6819      	ldreq	r1, [r3, #0]
 80093f2:	685b      	ldreq	r3, [r3, #4]
 80093f4:	1809      	addeq	r1, r1, r0
 80093f6:	6021      	streq	r1, [r4, #0]
 80093f8:	6063      	str	r3, [r4, #4]
 80093fa:	6054      	str	r4, [r2, #4]
 80093fc:	e7cb      	b.n	8009396 <_free_r+0x22>
 80093fe:	bd38      	pop	{r3, r4, r5, pc}
 8009400:	20001d44 	.word	0x20001d44

08009404 <_read_r>:
 8009404:	b538      	push	{r3, r4, r5, lr}
 8009406:	4604      	mov	r4, r0
 8009408:	4608      	mov	r0, r1
 800940a:	4611      	mov	r1, r2
 800940c:	2200      	movs	r2, #0
 800940e:	4d05      	ldr	r5, [pc, #20]	; (8009424 <_read_r+0x20>)
 8009410:	602a      	str	r2, [r5, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	f7f8 f94d 	bl	80016b2 <_read>
 8009418:	1c43      	adds	r3, r0, #1
 800941a:	d102      	bne.n	8009422 <_read_r+0x1e>
 800941c:	682b      	ldr	r3, [r5, #0]
 800941e:	b103      	cbz	r3, 8009422 <_read_r+0x1e>
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	bd38      	pop	{r3, r4, r5, pc}
 8009424:	20001d4c 	.word	0x20001d4c

08009428 <__assert_func>:
 8009428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800942a:	4614      	mov	r4, r2
 800942c:	461a      	mov	r2, r3
 800942e:	4b09      	ldr	r3, [pc, #36]	; (8009454 <__assert_func+0x2c>)
 8009430:	4605      	mov	r5, r0
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	68d8      	ldr	r0, [r3, #12]
 8009436:	b14c      	cbz	r4, 800944c <__assert_func+0x24>
 8009438:	4b07      	ldr	r3, [pc, #28]	; (8009458 <__assert_func+0x30>)
 800943a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800943e:	9100      	str	r1, [sp, #0]
 8009440:	462b      	mov	r3, r5
 8009442:	4906      	ldr	r1, [pc, #24]	; (800945c <__assert_func+0x34>)
 8009444:	f000 f80e 	bl	8009464 <fiprintf>
 8009448:	f000 fa56 	bl	80098f8 <abort>
 800944c:	4b04      	ldr	r3, [pc, #16]	; (8009460 <__assert_func+0x38>)
 800944e:	461c      	mov	r4, r3
 8009450:	e7f3      	b.n	800943a <__assert_func+0x12>
 8009452:	bf00      	nop
 8009454:	20000010 	.word	0x20000010
 8009458:	08009e44 	.word	0x08009e44
 800945c:	08009e51 	.word	0x08009e51
 8009460:	08009e7f 	.word	0x08009e7f

08009464 <fiprintf>:
 8009464:	b40e      	push	{r1, r2, r3}
 8009466:	b503      	push	{r0, r1, lr}
 8009468:	4601      	mov	r1, r0
 800946a:	ab03      	add	r3, sp, #12
 800946c:	4805      	ldr	r0, [pc, #20]	; (8009484 <fiprintf+0x20>)
 800946e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009472:	6800      	ldr	r0, [r0, #0]
 8009474:	9301      	str	r3, [sp, #4]
 8009476:	f000 f841 	bl	80094fc <_vfiprintf_r>
 800947a:	b002      	add	sp, #8
 800947c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009480:	b003      	add	sp, #12
 8009482:	4770      	bx	lr
 8009484:	20000010 	.word	0x20000010

08009488 <__ascii_mbtowc>:
 8009488:	b082      	sub	sp, #8
 800948a:	b901      	cbnz	r1, 800948e <__ascii_mbtowc+0x6>
 800948c:	a901      	add	r1, sp, #4
 800948e:	b142      	cbz	r2, 80094a2 <__ascii_mbtowc+0x1a>
 8009490:	b14b      	cbz	r3, 80094a6 <__ascii_mbtowc+0x1e>
 8009492:	7813      	ldrb	r3, [r2, #0]
 8009494:	600b      	str	r3, [r1, #0]
 8009496:	7812      	ldrb	r2, [r2, #0]
 8009498:	1e10      	subs	r0, r2, #0
 800949a:	bf18      	it	ne
 800949c:	2001      	movne	r0, #1
 800949e:	b002      	add	sp, #8
 80094a0:	4770      	bx	lr
 80094a2:	4610      	mov	r0, r2
 80094a4:	e7fb      	b.n	800949e <__ascii_mbtowc+0x16>
 80094a6:	f06f 0001 	mvn.w	r0, #1
 80094aa:	e7f8      	b.n	800949e <__ascii_mbtowc+0x16>

080094ac <__sfputc_r>:
 80094ac:	6893      	ldr	r3, [r2, #8]
 80094ae:	b410      	push	{r4}
 80094b0:	3b01      	subs	r3, #1
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	6093      	str	r3, [r2, #8]
 80094b6:	da07      	bge.n	80094c8 <__sfputc_r+0x1c>
 80094b8:	6994      	ldr	r4, [r2, #24]
 80094ba:	42a3      	cmp	r3, r4
 80094bc:	db01      	blt.n	80094c2 <__sfputc_r+0x16>
 80094be:	290a      	cmp	r1, #10
 80094c0:	d102      	bne.n	80094c8 <__sfputc_r+0x1c>
 80094c2:	bc10      	pop	{r4}
 80094c4:	f000 b94a 	b.w	800975c <__swbuf_r>
 80094c8:	6813      	ldr	r3, [r2, #0]
 80094ca:	1c58      	adds	r0, r3, #1
 80094cc:	6010      	str	r0, [r2, #0]
 80094ce:	7019      	strb	r1, [r3, #0]
 80094d0:	4608      	mov	r0, r1
 80094d2:	bc10      	pop	{r4}
 80094d4:	4770      	bx	lr

080094d6 <__sfputs_r>:
 80094d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094d8:	4606      	mov	r6, r0
 80094da:	460f      	mov	r7, r1
 80094dc:	4614      	mov	r4, r2
 80094de:	18d5      	adds	r5, r2, r3
 80094e0:	42ac      	cmp	r4, r5
 80094e2:	d101      	bne.n	80094e8 <__sfputs_r+0x12>
 80094e4:	2000      	movs	r0, #0
 80094e6:	e007      	b.n	80094f8 <__sfputs_r+0x22>
 80094e8:	463a      	mov	r2, r7
 80094ea:	4630      	mov	r0, r6
 80094ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094f0:	f7ff ffdc 	bl	80094ac <__sfputc_r>
 80094f4:	1c43      	adds	r3, r0, #1
 80094f6:	d1f3      	bne.n	80094e0 <__sfputs_r+0xa>
 80094f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080094fc <_vfiprintf_r>:
 80094fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009500:	460d      	mov	r5, r1
 8009502:	4614      	mov	r4, r2
 8009504:	4698      	mov	r8, r3
 8009506:	4606      	mov	r6, r0
 8009508:	b09d      	sub	sp, #116	; 0x74
 800950a:	b118      	cbz	r0, 8009514 <_vfiprintf_r+0x18>
 800950c:	6983      	ldr	r3, [r0, #24]
 800950e:	b90b      	cbnz	r3, 8009514 <_vfiprintf_r+0x18>
 8009510:	f7fd fd7a 	bl	8007008 <__sinit>
 8009514:	4b89      	ldr	r3, [pc, #548]	; (800973c <_vfiprintf_r+0x240>)
 8009516:	429d      	cmp	r5, r3
 8009518:	d11b      	bne.n	8009552 <_vfiprintf_r+0x56>
 800951a:	6875      	ldr	r5, [r6, #4]
 800951c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800951e:	07d9      	lsls	r1, r3, #31
 8009520:	d405      	bmi.n	800952e <_vfiprintf_r+0x32>
 8009522:	89ab      	ldrh	r3, [r5, #12]
 8009524:	059a      	lsls	r2, r3, #22
 8009526:	d402      	bmi.n	800952e <_vfiprintf_r+0x32>
 8009528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800952a:	f7fd fe30 	bl	800718e <__retarget_lock_acquire_recursive>
 800952e:	89ab      	ldrh	r3, [r5, #12]
 8009530:	071b      	lsls	r3, r3, #28
 8009532:	d501      	bpl.n	8009538 <_vfiprintf_r+0x3c>
 8009534:	692b      	ldr	r3, [r5, #16]
 8009536:	b9eb      	cbnz	r3, 8009574 <_vfiprintf_r+0x78>
 8009538:	4629      	mov	r1, r5
 800953a:	4630      	mov	r0, r6
 800953c:	f000 f96e 	bl	800981c <__swsetup_r>
 8009540:	b1c0      	cbz	r0, 8009574 <_vfiprintf_r+0x78>
 8009542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009544:	07dc      	lsls	r4, r3, #31
 8009546:	d50e      	bpl.n	8009566 <_vfiprintf_r+0x6a>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	b01d      	add	sp, #116	; 0x74
 800954e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009552:	4b7b      	ldr	r3, [pc, #492]	; (8009740 <_vfiprintf_r+0x244>)
 8009554:	429d      	cmp	r5, r3
 8009556:	d101      	bne.n	800955c <_vfiprintf_r+0x60>
 8009558:	68b5      	ldr	r5, [r6, #8]
 800955a:	e7df      	b.n	800951c <_vfiprintf_r+0x20>
 800955c:	4b79      	ldr	r3, [pc, #484]	; (8009744 <_vfiprintf_r+0x248>)
 800955e:	429d      	cmp	r5, r3
 8009560:	bf08      	it	eq
 8009562:	68f5      	ldreq	r5, [r6, #12]
 8009564:	e7da      	b.n	800951c <_vfiprintf_r+0x20>
 8009566:	89ab      	ldrh	r3, [r5, #12]
 8009568:	0598      	lsls	r0, r3, #22
 800956a:	d4ed      	bmi.n	8009548 <_vfiprintf_r+0x4c>
 800956c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800956e:	f7fd fe0f 	bl	8007190 <__retarget_lock_release_recursive>
 8009572:	e7e9      	b.n	8009548 <_vfiprintf_r+0x4c>
 8009574:	2300      	movs	r3, #0
 8009576:	9309      	str	r3, [sp, #36]	; 0x24
 8009578:	2320      	movs	r3, #32
 800957a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800957e:	2330      	movs	r3, #48	; 0x30
 8009580:	f04f 0901 	mov.w	r9, #1
 8009584:	f8cd 800c 	str.w	r8, [sp, #12]
 8009588:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8009748 <_vfiprintf_r+0x24c>
 800958c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009590:	4623      	mov	r3, r4
 8009592:	469a      	mov	sl, r3
 8009594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009598:	b10a      	cbz	r2, 800959e <_vfiprintf_r+0xa2>
 800959a:	2a25      	cmp	r2, #37	; 0x25
 800959c:	d1f9      	bne.n	8009592 <_vfiprintf_r+0x96>
 800959e:	ebba 0b04 	subs.w	fp, sl, r4
 80095a2:	d00b      	beq.n	80095bc <_vfiprintf_r+0xc0>
 80095a4:	465b      	mov	r3, fp
 80095a6:	4622      	mov	r2, r4
 80095a8:	4629      	mov	r1, r5
 80095aa:	4630      	mov	r0, r6
 80095ac:	f7ff ff93 	bl	80094d6 <__sfputs_r>
 80095b0:	3001      	adds	r0, #1
 80095b2:	f000 80aa 	beq.w	800970a <_vfiprintf_r+0x20e>
 80095b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095b8:	445a      	add	r2, fp
 80095ba:	9209      	str	r2, [sp, #36]	; 0x24
 80095bc:	f89a 3000 	ldrb.w	r3, [sl]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	f000 80a2 	beq.w	800970a <_vfiprintf_r+0x20e>
 80095c6:	2300      	movs	r3, #0
 80095c8:	f04f 32ff 	mov.w	r2, #4294967295
 80095cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095d0:	f10a 0a01 	add.w	sl, sl, #1
 80095d4:	9304      	str	r3, [sp, #16]
 80095d6:	9307      	str	r3, [sp, #28]
 80095d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095dc:	931a      	str	r3, [sp, #104]	; 0x68
 80095de:	4654      	mov	r4, sl
 80095e0:	2205      	movs	r2, #5
 80095e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095e6:	4858      	ldr	r0, [pc, #352]	; (8009748 <_vfiprintf_r+0x24c>)
 80095e8:	f7ff fb14 	bl	8008c14 <memchr>
 80095ec:	9a04      	ldr	r2, [sp, #16]
 80095ee:	b9d8      	cbnz	r0, 8009628 <_vfiprintf_r+0x12c>
 80095f0:	06d1      	lsls	r1, r2, #27
 80095f2:	bf44      	itt	mi
 80095f4:	2320      	movmi	r3, #32
 80095f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095fa:	0713      	lsls	r3, r2, #28
 80095fc:	bf44      	itt	mi
 80095fe:	232b      	movmi	r3, #43	; 0x2b
 8009600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009604:	f89a 3000 	ldrb.w	r3, [sl]
 8009608:	2b2a      	cmp	r3, #42	; 0x2a
 800960a:	d015      	beq.n	8009638 <_vfiprintf_r+0x13c>
 800960c:	4654      	mov	r4, sl
 800960e:	2000      	movs	r0, #0
 8009610:	f04f 0c0a 	mov.w	ip, #10
 8009614:	9a07      	ldr	r2, [sp, #28]
 8009616:	4621      	mov	r1, r4
 8009618:	f811 3b01 	ldrb.w	r3, [r1], #1
 800961c:	3b30      	subs	r3, #48	; 0x30
 800961e:	2b09      	cmp	r3, #9
 8009620:	d94e      	bls.n	80096c0 <_vfiprintf_r+0x1c4>
 8009622:	b1b0      	cbz	r0, 8009652 <_vfiprintf_r+0x156>
 8009624:	9207      	str	r2, [sp, #28]
 8009626:	e014      	b.n	8009652 <_vfiprintf_r+0x156>
 8009628:	eba0 0308 	sub.w	r3, r0, r8
 800962c:	fa09 f303 	lsl.w	r3, r9, r3
 8009630:	4313      	orrs	r3, r2
 8009632:	46a2      	mov	sl, r4
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	e7d2      	b.n	80095de <_vfiprintf_r+0xe2>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d19      	adds	r1, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9103      	str	r1, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfbb      	ittet	lt
 8009644:	425b      	neglt	r3, r3
 8009646:	f042 0202 	orrlt.w	r2, r2, #2
 800964a:	9307      	strge	r3, [sp, #28]
 800964c:	9307      	strlt	r3, [sp, #28]
 800964e:	bfb8      	it	lt
 8009650:	9204      	strlt	r2, [sp, #16]
 8009652:	7823      	ldrb	r3, [r4, #0]
 8009654:	2b2e      	cmp	r3, #46	; 0x2e
 8009656:	d10c      	bne.n	8009672 <_vfiprintf_r+0x176>
 8009658:	7863      	ldrb	r3, [r4, #1]
 800965a:	2b2a      	cmp	r3, #42	; 0x2a
 800965c:	d135      	bne.n	80096ca <_vfiprintf_r+0x1ce>
 800965e:	9b03      	ldr	r3, [sp, #12]
 8009660:	3402      	adds	r4, #2
 8009662:	1d1a      	adds	r2, r3, #4
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	9203      	str	r2, [sp, #12]
 8009668:	2b00      	cmp	r3, #0
 800966a:	bfb8      	it	lt
 800966c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009670:	9305      	str	r3, [sp, #20]
 8009672:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800974c <_vfiprintf_r+0x250>
 8009676:	2203      	movs	r2, #3
 8009678:	4650      	mov	r0, sl
 800967a:	7821      	ldrb	r1, [r4, #0]
 800967c:	f7ff faca 	bl	8008c14 <memchr>
 8009680:	b140      	cbz	r0, 8009694 <_vfiprintf_r+0x198>
 8009682:	2340      	movs	r3, #64	; 0x40
 8009684:	eba0 000a 	sub.w	r0, r0, sl
 8009688:	fa03 f000 	lsl.w	r0, r3, r0
 800968c:	9b04      	ldr	r3, [sp, #16]
 800968e:	3401      	adds	r4, #1
 8009690:	4303      	orrs	r3, r0
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009698:	2206      	movs	r2, #6
 800969a:	482d      	ldr	r0, [pc, #180]	; (8009750 <_vfiprintf_r+0x254>)
 800969c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80096a0:	f7ff fab8 	bl	8008c14 <memchr>
 80096a4:	2800      	cmp	r0, #0
 80096a6:	d03f      	beq.n	8009728 <_vfiprintf_r+0x22c>
 80096a8:	4b2a      	ldr	r3, [pc, #168]	; (8009754 <_vfiprintf_r+0x258>)
 80096aa:	bb1b      	cbnz	r3, 80096f4 <_vfiprintf_r+0x1f8>
 80096ac:	9b03      	ldr	r3, [sp, #12]
 80096ae:	3307      	adds	r3, #7
 80096b0:	f023 0307 	bic.w	r3, r3, #7
 80096b4:	3308      	adds	r3, #8
 80096b6:	9303      	str	r3, [sp, #12]
 80096b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80096ba:	443b      	add	r3, r7
 80096bc:	9309      	str	r3, [sp, #36]	; 0x24
 80096be:	e767      	b.n	8009590 <_vfiprintf_r+0x94>
 80096c0:	460c      	mov	r4, r1
 80096c2:	2001      	movs	r0, #1
 80096c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80096c8:	e7a5      	b.n	8009616 <_vfiprintf_r+0x11a>
 80096ca:	2300      	movs	r3, #0
 80096cc:	f04f 0c0a 	mov.w	ip, #10
 80096d0:	4619      	mov	r1, r3
 80096d2:	3401      	adds	r4, #1
 80096d4:	9305      	str	r3, [sp, #20]
 80096d6:	4620      	mov	r0, r4
 80096d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096dc:	3a30      	subs	r2, #48	; 0x30
 80096de:	2a09      	cmp	r2, #9
 80096e0:	d903      	bls.n	80096ea <_vfiprintf_r+0x1ee>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0c5      	beq.n	8009672 <_vfiprintf_r+0x176>
 80096e6:	9105      	str	r1, [sp, #20]
 80096e8:	e7c3      	b.n	8009672 <_vfiprintf_r+0x176>
 80096ea:	4604      	mov	r4, r0
 80096ec:	2301      	movs	r3, #1
 80096ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80096f2:	e7f0      	b.n	80096d6 <_vfiprintf_r+0x1da>
 80096f4:	ab03      	add	r3, sp, #12
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	462a      	mov	r2, r5
 80096fa:	4630      	mov	r0, r6
 80096fc:	4b16      	ldr	r3, [pc, #88]	; (8009758 <_vfiprintf_r+0x25c>)
 80096fe:	a904      	add	r1, sp, #16
 8009700:	f7fd fe90 	bl	8007424 <_printf_float>
 8009704:	4607      	mov	r7, r0
 8009706:	1c78      	adds	r0, r7, #1
 8009708:	d1d6      	bne.n	80096b8 <_vfiprintf_r+0x1bc>
 800970a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800970c:	07d9      	lsls	r1, r3, #31
 800970e:	d405      	bmi.n	800971c <_vfiprintf_r+0x220>
 8009710:	89ab      	ldrh	r3, [r5, #12]
 8009712:	059a      	lsls	r2, r3, #22
 8009714:	d402      	bmi.n	800971c <_vfiprintf_r+0x220>
 8009716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009718:	f7fd fd3a 	bl	8007190 <__retarget_lock_release_recursive>
 800971c:	89ab      	ldrh	r3, [r5, #12]
 800971e:	065b      	lsls	r3, r3, #25
 8009720:	f53f af12 	bmi.w	8009548 <_vfiprintf_r+0x4c>
 8009724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009726:	e711      	b.n	800954c <_vfiprintf_r+0x50>
 8009728:	ab03      	add	r3, sp, #12
 800972a:	9300      	str	r3, [sp, #0]
 800972c:	462a      	mov	r2, r5
 800972e:	4630      	mov	r0, r6
 8009730:	4b09      	ldr	r3, [pc, #36]	; (8009758 <_vfiprintf_r+0x25c>)
 8009732:	a904      	add	r1, sp, #16
 8009734:	f7fe f912 	bl	800795c <_printf_i>
 8009738:	e7e4      	b.n	8009704 <_vfiprintf_r+0x208>
 800973a:	bf00      	nop
 800973c:	08009be4 	.word	0x08009be4
 8009740:	08009c04 	.word	0x08009c04
 8009744:	08009bc4 	.word	0x08009bc4
 8009748:	08009e8a 	.word	0x08009e8a
 800974c:	08009e90 	.word	0x08009e90
 8009750:	08009e94 	.word	0x08009e94
 8009754:	08007425 	.word	0x08007425
 8009758:	080094d7 	.word	0x080094d7

0800975c <__swbuf_r>:
 800975c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800975e:	460e      	mov	r6, r1
 8009760:	4614      	mov	r4, r2
 8009762:	4605      	mov	r5, r0
 8009764:	b118      	cbz	r0, 800976e <__swbuf_r+0x12>
 8009766:	6983      	ldr	r3, [r0, #24]
 8009768:	b90b      	cbnz	r3, 800976e <__swbuf_r+0x12>
 800976a:	f7fd fc4d 	bl	8007008 <__sinit>
 800976e:	4b21      	ldr	r3, [pc, #132]	; (80097f4 <__swbuf_r+0x98>)
 8009770:	429c      	cmp	r4, r3
 8009772:	d12b      	bne.n	80097cc <__swbuf_r+0x70>
 8009774:	686c      	ldr	r4, [r5, #4]
 8009776:	69a3      	ldr	r3, [r4, #24]
 8009778:	60a3      	str	r3, [r4, #8]
 800977a:	89a3      	ldrh	r3, [r4, #12]
 800977c:	071a      	lsls	r2, r3, #28
 800977e:	d52f      	bpl.n	80097e0 <__swbuf_r+0x84>
 8009780:	6923      	ldr	r3, [r4, #16]
 8009782:	b36b      	cbz	r3, 80097e0 <__swbuf_r+0x84>
 8009784:	6923      	ldr	r3, [r4, #16]
 8009786:	6820      	ldr	r0, [r4, #0]
 8009788:	b2f6      	uxtb	r6, r6
 800978a:	1ac0      	subs	r0, r0, r3
 800978c:	6963      	ldr	r3, [r4, #20]
 800978e:	4637      	mov	r7, r6
 8009790:	4283      	cmp	r3, r0
 8009792:	dc04      	bgt.n	800979e <__swbuf_r+0x42>
 8009794:	4621      	mov	r1, r4
 8009796:	4628      	mov	r0, r5
 8009798:	f7ff f9e2 	bl	8008b60 <_fflush_r>
 800979c:	bb30      	cbnz	r0, 80097ec <__swbuf_r+0x90>
 800979e:	68a3      	ldr	r3, [r4, #8]
 80097a0:	3001      	adds	r0, #1
 80097a2:	3b01      	subs	r3, #1
 80097a4:	60a3      	str	r3, [r4, #8]
 80097a6:	6823      	ldr	r3, [r4, #0]
 80097a8:	1c5a      	adds	r2, r3, #1
 80097aa:	6022      	str	r2, [r4, #0]
 80097ac:	701e      	strb	r6, [r3, #0]
 80097ae:	6963      	ldr	r3, [r4, #20]
 80097b0:	4283      	cmp	r3, r0
 80097b2:	d004      	beq.n	80097be <__swbuf_r+0x62>
 80097b4:	89a3      	ldrh	r3, [r4, #12]
 80097b6:	07db      	lsls	r3, r3, #31
 80097b8:	d506      	bpl.n	80097c8 <__swbuf_r+0x6c>
 80097ba:	2e0a      	cmp	r6, #10
 80097bc:	d104      	bne.n	80097c8 <__swbuf_r+0x6c>
 80097be:	4621      	mov	r1, r4
 80097c0:	4628      	mov	r0, r5
 80097c2:	f7ff f9cd 	bl	8008b60 <_fflush_r>
 80097c6:	b988      	cbnz	r0, 80097ec <__swbuf_r+0x90>
 80097c8:	4638      	mov	r0, r7
 80097ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097cc:	4b0a      	ldr	r3, [pc, #40]	; (80097f8 <__swbuf_r+0x9c>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <__swbuf_r+0x7a>
 80097d2:	68ac      	ldr	r4, [r5, #8]
 80097d4:	e7cf      	b.n	8009776 <__swbuf_r+0x1a>
 80097d6:	4b09      	ldr	r3, [pc, #36]	; (80097fc <__swbuf_r+0xa0>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68ec      	ldreq	r4, [r5, #12]
 80097de:	e7ca      	b.n	8009776 <__swbuf_r+0x1a>
 80097e0:	4621      	mov	r1, r4
 80097e2:	4628      	mov	r0, r5
 80097e4:	f000 f81a 	bl	800981c <__swsetup_r>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d0cb      	beq.n	8009784 <__swbuf_r+0x28>
 80097ec:	f04f 37ff 	mov.w	r7, #4294967295
 80097f0:	e7ea      	b.n	80097c8 <__swbuf_r+0x6c>
 80097f2:	bf00      	nop
 80097f4:	08009be4 	.word	0x08009be4
 80097f8:	08009c04 	.word	0x08009c04
 80097fc:	08009bc4 	.word	0x08009bc4

08009800 <__ascii_wctomb>:
 8009800:	4603      	mov	r3, r0
 8009802:	4608      	mov	r0, r1
 8009804:	b141      	cbz	r1, 8009818 <__ascii_wctomb+0x18>
 8009806:	2aff      	cmp	r2, #255	; 0xff
 8009808:	d904      	bls.n	8009814 <__ascii_wctomb+0x14>
 800980a:	228a      	movs	r2, #138	; 0x8a
 800980c:	f04f 30ff 	mov.w	r0, #4294967295
 8009810:	601a      	str	r2, [r3, #0]
 8009812:	4770      	bx	lr
 8009814:	2001      	movs	r0, #1
 8009816:	700a      	strb	r2, [r1, #0]
 8009818:	4770      	bx	lr
	...

0800981c <__swsetup_r>:
 800981c:	4b32      	ldr	r3, [pc, #200]	; (80098e8 <__swsetup_r+0xcc>)
 800981e:	b570      	push	{r4, r5, r6, lr}
 8009820:	681d      	ldr	r5, [r3, #0]
 8009822:	4606      	mov	r6, r0
 8009824:	460c      	mov	r4, r1
 8009826:	b125      	cbz	r5, 8009832 <__swsetup_r+0x16>
 8009828:	69ab      	ldr	r3, [r5, #24]
 800982a:	b913      	cbnz	r3, 8009832 <__swsetup_r+0x16>
 800982c:	4628      	mov	r0, r5
 800982e:	f7fd fbeb 	bl	8007008 <__sinit>
 8009832:	4b2e      	ldr	r3, [pc, #184]	; (80098ec <__swsetup_r+0xd0>)
 8009834:	429c      	cmp	r4, r3
 8009836:	d10f      	bne.n	8009858 <__swsetup_r+0x3c>
 8009838:	686c      	ldr	r4, [r5, #4]
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009840:	0719      	lsls	r1, r3, #28
 8009842:	d42c      	bmi.n	800989e <__swsetup_r+0x82>
 8009844:	06dd      	lsls	r5, r3, #27
 8009846:	d411      	bmi.n	800986c <__swsetup_r+0x50>
 8009848:	2309      	movs	r3, #9
 800984a:	6033      	str	r3, [r6, #0]
 800984c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009850:	f04f 30ff 	mov.w	r0, #4294967295
 8009854:	81a3      	strh	r3, [r4, #12]
 8009856:	e03e      	b.n	80098d6 <__swsetup_r+0xba>
 8009858:	4b25      	ldr	r3, [pc, #148]	; (80098f0 <__swsetup_r+0xd4>)
 800985a:	429c      	cmp	r4, r3
 800985c:	d101      	bne.n	8009862 <__swsetup_r+0x46>
 800985e:	68ac      	ldr	r4, [r5, #8]
 8009860:	e7eb      	b.n	800983a <__swsetup_r+0x1e>
 8009862:	4b24      	ldr	r3, [pc, #144]	; (80098f4 <__swsetup_r+0xd8>)
 8009864:	429c      	cmp	r4, r3
 8009866:	bf08      	it	eq
 8009868:	68ec      	ldreq	r4, [r5, #12]
 800986a:	e7e6      	b.n	800983a <__swsetup_r+0x1e>
 800986c:	0758      	lsls	r0, r3, #29
 800986e:	d512      	bpl.n	8009896 <__swsetup_r+0x7a>
 8009870:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009872:	b141      	cbz	r1, 8009886 <__swsetup_r+0x6a>
 8009874:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009878:	4299      	cmp	r1, r3
 800987a:	d002      	beq.n	8009882 <__swsetup_r+0x66>
 800987c:	4630      	mov	r0, r6
 800987e:	f7ff fd79 	bl	8009374 <_free_r>
 8009882:	2300      	movs	r3, #0
 8009884:	6363      	str	r3, [r4, #52]	; 0x34
 8009886:	89a3      	ldrh	r3, [r4, #12]
 8009888:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	2300      	movs	r3, #0
 8009890:	6063      	str	r3, [r4, #4]
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6023      	str	r3, [r4, #0]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	f043 0308 	orr.w	r3, r3, #8
 800989c:	81a3      	strh	r3, [r4, #12]
 800989e:	6923      	ldr	r3, [r4, #16]
 80098a0:	b94b      	cbnz	r3, 80098b6 <__swsetup_r+0x9a>
 80098a2:	89a3      	ldrh	r3, [r4, #12]
 80098a4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80098a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80098ac:	d003      	beq.n	80098b6 <__swsetup_r+0x9a>
 80098ae:	4621      	mov	r1, r4
 80098b0:	4630      	mov	r0, r6
 80098b2:	f000 f84d 	bl	8009950 <__smakebuf_r>
 80098b6:	89a0      	ldrh	r0, [r4, #12]
 80098b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80098bc:	f010 0301 	ands.w	r3, r0, #1
 80098c0:	d00a      	beq.n	80098d8 <__swsetup_r+0xbc>
 80098c2:	2300      	movs	r3, #0
 80098c4:	60a3      	str	r3, [r4, #8]
 80098c6:	6963      	ldr	r3, [r4, #20]
 80098c8:	425b      	negs	r3, r3
 80098ca:	61a3      	str	r3, [r4, #24]
 80098cc:	6923      	ldr	r3, [r4, #16]
 80098ce:	b943      	cbnz	r3, 80098e2 <__swsetup_r+0xc6>
 80098d0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80098d4:	d1ba      	bne.n	800984c <__swsetup_r+0x30>
 80098d6:	bd70      	pop	{r4, r5, r6, pc}
 80098d8:	0781      	lsls	r1, r0, #30
 80098da:	bf58      	it	pl
 80098dc:	6963      	ldrpl	r3, [r4, #20]
 80098de:	60a3      	str	r3, [r4, #8]
 80098e0:	e7f4      	b.n	80098cc <__swsetup_r+0xb0>
 80098e2:	2000      	movs	r0, #0
 80098e4:	e7f7      	b.n	80098d6 <__swsetup_r+0xba>
 80098e6:	bf00      	nop
 80098e8:	20000010 	.word	0x20000010
 80098ec:	08009be4 	.word	0x08009be4
 80098f0:	08009c04 	.word	0x08009c04
 80098f4:	08009bc4 	.word	0x08009bc4

080098f8 <abort>:
 80098f8:	2006      	movs	r0, #6
 80098fa:	b508      	push	{r3, lr}
 80098fc:	f000 f890 	bl	8009a20 <raise>
 8009900:	2001      	movs	r0, #1
 8009902:	f7f7 fecc 	bl	800169e <_exit>

08009906 <__swhatbuf_r>:
 8009906:	b570      	push	{r4, r5, r6, lr}
 8009908:	460e      	mov	r6, r1
 800990a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990e:	4614      	mov	r4, r2
 8009910:	2900      	cmp	r1, #0
 8009912:	461d      	mov	r5, r3
 8009914:	b096      	sub	sp, #88	; 0x58
 8009916:	da08      	bge.n	800992a <__swhatbuf_r+0x24>
 8009918:	2200      	movs	r2, #0
 800991a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800991e:	602a      	str	r2, [r5, #0]
 8009920:	061a      	lsls	r2, r3, #24
 8009922:	d410      	bmi.n	8009946 <__swhatbuf_r+0x40>
 8009924:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009928:	e00e      	b.n	8009948 <__swhatbuf_r+0x42>
 800992a:	466a      	mov	r2, sp
 800992c:	f000 f894 	bl	8009a58 <_fstat_r>
 8009930:	2800      	cmp	r0, #0
 8009932:	dbf1      	blt.n	8009918 <__swhatbuf_r+0x12>
 8009934:	9a01      	ldr	r2, [sp, #4]
 8009936:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800993a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800993e:	425a      	negs	r2, r3
 8009940:	415a      	adcs	r2, r3
 8009942:	602a      	str	r2, [r5, #0]
 8009944:	e7ee      	b.n	8009924 <__swhatbuf_r+0x1e>
 8009946:	2340      	movs	r3, #64	; 0x40
 8009948:	2000      	movs	r0, #0
 800994a:	6023      	str	r3, [r4, #0]
 800994c:	b016      	add	sp, #88	; 0x58
 800994e:	bd70      	pop	{r4, r5, r6, pc}

08009950 <__smakebuf_r>:
 8009950:	898b      	ldrh	r3, [r1, #12]
 8009952:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009954:	079d      	lsls	r5, r3, #30
 8009956:	4606      	mov	r6, r0
 8009958:	460c      	mov	r4, r1
 800995a:	d507      	bpl.n	800996c <__smakebuf_r+0x1c>
 800995c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009960:	6023      	str	r3, [r4, #0]
 8009962:	6123      	str	r3, [r4, #16]
 8009964:	2301      	movs	r3, #1
 8009966:	6163      	str	r3, [r4, #20]
 8009968:	b002      	add	sp, #8
 800996a:	bd70      	pop	{r4, r5, r6, pc}
 800996c:	466a      	mov	r2, sp
 800996e:	ab01      	add	r3, sp, #4
 8009970:	f7ff ffc9 	bl	8009906 <__swhatbuf_r>
 8009974:	9900      	ldr	r1, [sp, #0]
 8009976:	4605      	mov	r5, r0
 8009978:	4630      	mov	r0, r6
 800997a:	f7fd fc41 	bl	8007200 <_malloc_r>
 800997e:	b948      	cbnz	r0, 8009994 <__smakebuf_r+0x44>
 8009980:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009984:	059a      	lsls	r2, r3, #22
 8009986:	d4ef      	bmi.n	8009968 <__smakebuf_r+0x18>
 8009988:	f023 0303 	bic.w	r3, r3, #3
 800998c:	f043 0302 	orr.w	r3, r3, #2
 8009990:	81a3      	strh	r3, [r4, #12]
 8009992:	e7e3      	b.n	800995c <__smakebuf_r+0xc>
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <__smakebuf_r+0x7c>)
 8009996:	62b3      	str	r3, [r6, #40]	; 0x28
 8009998:	89a3      	ldrh	r3, [r4, #12]
 800999a:	6020      	str	r0, [r4, #0]
 800999c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a0:	81a3      	strh	r3, [r4, #12]
 80099a2:	9b00      	ldr	r3, [sp, #0]
 80099a4:	6120      	str	r0, [r4, #16]
 80099a6:	6163      	str	r3, [r4, #20]
 80099a8:	9b01      	ldr	r3, [sp, #4]
 80099aa:	b15b      	cbz	r3, 80099c4 <__smakebuf_r+0x74>
 80099ac:	4630      	mov	r0, r6
 80099ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80099b2:	f000 f863 	bl	8009a7c <_isatty_r>
 80099b6:	b128      	cbz	r0, 80099c4 <__smakebuf_r+0x74>
 80099b8:	89a3      	ldrh	r3, [r4, #12]
 80099ba:	f023 0303 	bic.w	r3, r3, #3
 80099be:	f043 0301 	orr.w	r3, r3, #1
 80099c2:	81a3      	strh	r3, [r4, #12]
 80099c4:	89a0      	ldrh	r0, [r4, #12]
 80099c6:	4305      	orrs	r5, r0
 80099c8:	81a5      	strh	r5, [r4, #12]
 80099ca:	e7cd      	b.n	8009968 <__smakebuf_r+0x18>
 80099cc:	08006fa1 	.word	0x08006fa1

080099d0 <_raise_r>:
 80099d0:	291f      	cmp	r1, #31
 80099d2:	b538      	push	{r3, r4, r5, lr}
 80099d4:	4604      	mov	r4, r0
 80099d6:	460d      	mov	r5, r1
 80099d8:	d904      	bls.n	80099e4 <_raise_r+0x14>
 80099da:	2316      	movs	r3, #22
 80099dc:	6003      	str	r3, [r0, #0]
 80099de:	f04f 30ff 	mov.w	r0, #4294967295
 80099e2:	bd38      	pop	{r3, r4, r5, pc}
 80099e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80099e6:	b112      	cbz	r2, 80099ee <_raise_r+0x1e>
 80099e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099ec:	b94b      	cbnz	r3, 8009a02 <_raise_r+0x32>
 80099ee:	4620      	mov	r0, r4
 80099f0:	f000 f830 	bl	8009a54 <_getpid_r>
 80099f4:	462a      	mov	r2, r5
 80099f6:	4601      	mov	r1, r0
 80099f8:	4620      	mov	r0, r4
 80099fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099fe:	f000 b817 	b.w	8009a30 <_kill_r>
 8009a02:	2b01      	cmp	r3, #1
 8009a04:	d00a      	beq.n	8009a1c <_raise_r+0x4c>
 8009a06:	1c59      	adds	r1, r3, #1
 8009a08:	d103      	bne.n	8009a12 <_raise_r+0x42>
 8009a0a:	2316      	movs	r3, #22
 8009a0c:	6003      	str	r3, [r0, #0]
 8009a0e:	2001      	movs	r0, #1
 8009a10:	e7e7      	b.n	80099e2 <_raise_r+0x12>
 8009a12:	2400      	movs	r4, #0
 8009a14:	4628      	mov	r0, r5
 8009a16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009a1a:	4798      	blx	r3
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e7e0      	b.n	80099e2 <_raise_r+0x12>

08009a20 <raise>:
 8009a20:	4b02      	ldr	r3, [pc, #8]	; (8009a2c <raise+0xc>)
 8009a22:	4601      	mov	r1, r0
 8009a24:	6818      	ldr	r0, [r3, #0]
 8009a26:	f7ff bfd3 	b.w	80099d0 <_raise_r>
 8009a2a:	bf00      	nop
 8009a2c:	20000010 	.word	0x20000010

08009a30 <_kill_r>:
 8009a30:	b538      	push	{r3, r4, r5, lr}
 8009a32:	2300      	movs	r3, #0
 8009a34:	4d06      	ldr	r5, [pc, #24]	; (8009a50 <_kill_r+0x20>)
 8009a36:	4604      	mov	r4, r0
 8009a38:	4608      	mov	r0, r1
 8009a3a:	4611      	mov	r1, r2
 8009a3c:	602b      	str	r3, [r5, #0]
 8009a3e:	f7f7 fe1e 	bl	800167e <_kill>
 8009a42:	1c43      	adds	r3, r0, #1
 8009a44:	d102      	bne.n	8009a4c <_kill_r+0x1c>
 8009a46:	682b      	ldr	r3, [r5, #0]
 8009a48:	b103      	cbz	r3, 8009a4c <_kill_r+0x1c>
 8009a4a:	6023      	str	r3, [r4, #0]
 8009a4c:	bd38      	pop	{r3, r4, r5, pc}
 8009a4e:	bf00      	nop
 8009a50:	20001d4c 	.word	0x20001d4c

08009a54 <_getpid_r>:
 8009a54:	f7f7 be0c 	b.w	8001670 <_getpid>

08009a58 <_fstat_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	4d06      	ldr	r5, [pc, #24]	; (8009a78 <_fstat_r+0x20>)
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	4611      	mov	r1, r2
 8009a64:	602b      	str	r3, [r5, #0]
 8009a66:	f7f7 fe68 	bl	800173a <_fstat>
 8009a6a:	1c43      	adds	r3, r0, #1
 8009a6c:	d102      	bne.n	8009a74 <_fstat_r+0x1c>
 8009a6e:	682b      	ldr	r3, [r5, #0]
 8009a70:	b103      	cbz	r3, 8009a74 <_fstat_r+0x1c>
 8009a72:	6023      	str	r3, [r4, #0]
 8009a74:	bd38      	pop	{r3, r4, r5, pc}
 8009a76:	bf00      	nop
 8009a78:	20001d4c 	.word	0x20001d4c

08009a7c <_isatty_r>:
 8009a7c:	b538      	push	{r3, r4, r5, lr}
 8009a7e:	2300      	movs	r3, #0
 8009a80:	4d05      	ldr	r5, [pc, #20]	; (8009a98 <_isatty_r+0x1c>)
 8009a82:	4604      	mov	r4, r0
 8009a84:	4608      	mov	r0, r1
 8009a86:	602b      	str	r3, [r5, #0]
 8009a88:	f7f7 fe66 	bl	8001758 <_isatty>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_isatty_r+0x1a>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_isatty_r+0x1a>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20001d4c 	.word	0x20001d4c

08009a9c <_init>:
 8009a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a9e:	bf00      	nop
 8009aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aa2:	bc08      	pop	{r3}
 8009aa4:	469e      	mov	lr, r3
 8009aa6:	4770      	bx	lr

08009aa8 <_fini>:
 8009aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aaa:	bf00      	nop
 8009aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009aae:	bc08      	pop	{r3}
 8009ab0:	469e      	mov	lr, r3
 8009ab2:	4770      	bx	lr
